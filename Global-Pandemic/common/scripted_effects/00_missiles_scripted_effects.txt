#################################
### missiles scripted effects ###
#################################
#
# ### missile trajectory arrays ###
# missile_launch_point_array
# missile_target_point_array
# missile_type_array
# missile_tech_array
# missile_warhead_array
# missile_salvo_array
# missile_duration_array
# missile_strike_type_array
#
##################################

missile_ui_update = {
	if = { limit = { NOT = { has_variable = global.missile_ui_updated } }
		set_variable = { global.missile_ui_updated = 0 }
	}
	add_to_variable = { global.missile_ui_updated = 1 }
}

set_landbased_missile_defense_cap = {
	meta_effect = {
		text = {
			### boost phase defense ###
			if = {
				limit = {
					has_country_flag = boost_phase_defense
				}
				every_controlled_state = {
					limit = {
						anti_air_building > 0
						[launch_point_ID] = {
							distance_to = {
								value < [SAM_range]
								target = PREV
							}
						}
					}
					set_temp_variable = { temp1 = 0 }
					add_to_temp_variable = { temp1 = non_damaged_building_level@anti_air_building }
					multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }
					add_to_variable = { ROOT.var_intercept_capacity_boost_land = temp1 }
					log = "[GetDateText]: [ROOT.GetName]: ### boost phase defense ### in meta"
					log = "[THIS.GetName]"
					log = "var_SAM_range [?var_SAM_range]"
					log = "ROOT.var_intercept_capacity_boost_land [?ROOT.var_intercept_capacity_boost_land]"
				}
			}
			### midcourse phase defense ###
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					[launch_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}
				}
				set_temp_variable = { temp1 = 0 }
				add_to_temp_variable = { temp1 = non_damaged_building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }
				# already coded in defense effects
				# if = {
				# 	limit = {
				# 		check_variable = { PREV.var_deployed_ABM_land < temp1 }
				# 	}
				# 	set_temp_variable = { temp1 = PREV.var_deployed_SAM_MD_land }
				# }
				# set_temp_variable = { temp_deployed_ABM_land = PREV.var_deployed_ABM_land }
				# subtract_from_temp_variable = { temp_deployed_ABM_land = temp1 }
				add_to_variable = { ROOT.var_intercept_capacity_midcourse_land = temp1 }
				set_state_flag = defend_land_launch_point
			}
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					NOT = {
						has_state_flag = defend_land_launch_point
					}
					[target_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}
				}
				set_temp_variable = { temp1 = 0 }
				add_to_temp_variable = { temp1 = non_damaged_building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }
				# already coded in defense effects
				# if = {
				# 	limit = {
				# 		check_variable = { temp_deployed_ABM_land < temp1 }
				# 	}
				# 	set_temp_variable = { temp1 = temp_deployed_ABM_land }
				# }
				add_to_variable = { ROOT.var_intercept_capacity_midcourse_land = temp1 }
			}
			every_controlled_state = {
				clr_state_flag = defend_land_launch_point
			}
			### terminal phase defense ###
			if = {
				limit = {
					has_country_flag = terminal_phase_defense
				}
				every_controlled_state = {
					limit = {
						anti_air_building > 0
						[target_point_ID] = {
							distance_to = {
								value < [SAM_range]
								target = PREV
							}
						}
					}
					set_temp_variable = { temp1 = 0 }
					add_to_temp_variable = { temp1 = non_damaged_building_level@anti_air_building }
					multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }
					# already coded in defense effects
					# if = {
					# 	limit = {
					# 		check_variable = { temp_deployed_SAM_MD_land < temp1 }
					# 	}
					# 	set_temp_variable = { temp1 = temp_deployed_SAM_MD_land }
					# }
					add_to_variable = { ROOT.var_intercept_capacity_terminal_land = temp1 }
				}
			}
		}
		launch_point_ID = "[?ROOT.missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
	}
}

set_seabased_missile_defense_cap = {
	meta_effect = {
		text = {
			if = {
			 	limit = {
			 		[launch_point_ID] = {
						has_state_flag = sea_launch_point
			 		}
				}
				set_variable = { var_ship_number_AA = 9 }
				while_loop_effect = {
					break = temp3
					limit = {
						check_variable = { var_ship_number_AA > 1 }
					}
					if = {
						limit = {
							THIS = { sea_launch_point_defense_[launch_point_ID] = yes }
						}
						set_temp_variable = { temp1 = 0 }
						set_temp_variable = { temp2 = 0 }
						### boost ###
						add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp1 = 1 }
						multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_boost_sea = temp1 }
						### midcourse ###
						add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp2 = 1 }
	 					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = temp2 }
						###
						set_temp_variable = { temp3 = 1 }
						log = "set_seabased_missile_defense_cap launch_point [launch_point_ID]"
					}
					else = {
						add_to_variable = { PREV.var_intercept_capacity_boost_sea = 0 }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
						log = "set_seabased_missile_defense_cap launch_point no ships"
					}
					subtract_from_variable = { var_ship_number_AA = 1 }
					log = "set_seabased_missile_defense_cap launch_point var_ship_number_AA [?var_ship_number_AA]"
				}
			}
			else = {
				add_to_variable = { PREV.var_intercept_capacity_boost_sea = 0 }
				add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
				log = "set_seabased_missile_defense_cap launch_point no sea_launch_point"
			}
			if = {
				limit = {
					[target_point_ID] = {
						has_state_flag = sea_launch_point
					}
				}
				set_variable = { var_ship_number_AA = 9 }
				while_loop_effect = {
					break = temp3
					limit = {
						check_variable = { var_ship_number_AA > 1 }
					}
					if = {
						limit = {
							THIS = { sea_launch_point_defense_[target_point_ID] = yes }
						}
						set_temp_variable = { temp1 = 0 }
						set_temp_variable = { temp2 = 0 }
						### midcourse ###
						add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp2 = 1 }
	 					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = temp2 }
						### terminal ###
						add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp1 = 1 }
						multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_terminal_sea = temp1 }
						###
						set_temp_variable = { temp3 = 1 }
						log = "set_seabased_missile_defense_cap target_point"
					}
					else = {
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
						add_to_variable = { PREV.var_intercept_capacity_terminal_sea = 0 }
						log = "set_seabased_missile_defense_cap target_point no ships"
					}
					subtract_from_variable = { var_ship_number_AA = 1 }
					log = "set_seabased_missile_defense_cap target_point var_ship_number_AA [?var_ship_number_AA]"
				}
			}
			else = {
				add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
				add_to_variable = { PREV.var_intercept_capacity_terminal_sea = 0 }
				log = "set_seabased_missile_defense_cap target_point no sea_launch_point"
			}
			clear_variable = var_ship_number_AA
		}
		launch_point_ID = "[?ROOT.missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
	}
}

### modify intercept chance

set_mod_intercept_chance = {
	#ICBM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 10 }
			check_variable = { missile_type_array^i < 20 }
		}
		### sea
		# add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_boost_ICBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_midcourse_ICBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_terminal_ICBM }
		### land
		# add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_boost_ICBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_midcourse_ICBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_terminal_ICBM }
	}
	#IRBM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 20 }
			check_variable = { missile_type_array^i < 30 }
		}
		### sea
		# add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_boost_IRBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_midcourse_IRBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_terminal_IRBM }
		### land
		# add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_boost_IRBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_midcourse_IRBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_terminal_IRBM }
	}
	#SLBM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 30 }
			check_variable = { missile_type_array^i < 40 }
		}
		### sea
		# add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_boost_SLBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_midcourse_SLBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_terminal_SLBM }
		### land
		# add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_boost_SLBM }
		# add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_midcourse_SLBM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_terminal_SLBM }
	}
	#ALCM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 40 }
			check_variable = { missile_type_array^i < 50 }
		}
		### sea
		add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_ALCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_ALCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_ALCM }
		### land
		add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_ALCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_ALCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_ALCM }
	}
	#GLCM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 50 }
			check_variable = { missile_type_array^i < 60 }
		}
		### sea
		add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_GLCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_GLCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_GLCM }
		### land
		add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_GLCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_GLCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_GLCM }
	}
	#SLCM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 60 }
			check_variable = { missile_type_array^i < 70 }
		}
		### sea
		add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_SLCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_SLCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_SLCM }
		### land
		add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_SLCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_SLCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_SLCM }
	}
	#HSCM
	if = {
		limit = {
			check_variable = { missile_type_array^i > 70 }
			check_variable = { missile_type_array^i < 80 }
		}
		### sea
		add_to_variable = { ROOT.var_intercept_chance_boost_sea = ROOT.var_mod_intercept_chance_HSCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_sea = ROOT.var_mod_intercept_chance_HSCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_sea = ROOT.var_mod_intercept_chance_HSCM }
		### land
		add_to_variable = { ROOT.var_intercept_chance_boost_land = ROOT.var_mod_intercept_chance_HSCM }
		add_to_variable = { ROOT.var_intercept_chance_midcourse_land = ROOT.var_mod_intercept_chance_HSCM }
		add_to_variable = { ROOT.var_intercept_chance_terminal_land = ROOT.var_mod_intercept_chance_HSCM }
	}
}

### boost phase vs defense sea ###
boost_phase_defense_sea = {
	set_temp_variable = { temp1 = var_salvo }
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp1 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_boost_sea > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_sea > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_boost_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = 1 }
			add_to_variable = { SAM_consumption_sea = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_boost_sea }
				}
				add_to_variable = { var_missile_interception_boost_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_boost_completed_sea = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_boost_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_boost_completed_sea_stat_array value = var_missile_boost_completed_sea index = i }
	add_to_array = { array = missile_interception_boost_sea_stat_array value = var_missile_interception_boost_sea index = i }
}

### boost phase vs defense land ###
boost_phase_defense_land = {
	set_temp_variable = { temp1 = var_missile_boost_completed_sea }
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp1 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_boost_land > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_land > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_boost_land = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = 1 }
			add_to_variable = { SAM_consumption_land = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_boost_land }
				}
				add_to_variable = { var_missile_interception_boost_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_boost_completed_land = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_boost_completed_land = 1 }
		}
	}
	add_to_array = { array = missile_boost_completed_land_stat_array value = var_missile_boost_completed_land index = i }
	add_to_array = { array = missile_interception_boost_land_stat_array value = var_missile_interception_boost_land index = i }
}

### midcourse phase vs defense sea ###
midcourse_phase_defense_sea = {
	set_temp_variable = { temp2 = var_missile_boost_completed_land }
	while_loop_effect = {
		limit = {
			check_variable = { temp2 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp2 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_midcourse_sea > 0 }
				check_variable = { PREV.var_deployed_ABM_sea > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_midcourse_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_ABM_sea = 1 }
			add_to_variable = { ABM_consumption_sea = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_midcourse_sea }
				}
				add_to_variable = { var_missile_interception_midcourse_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_midcourse_completed_sea = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_midcourse_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_midcourse_completed_sea_stat_array value = var_missile_midcourse_completed_sea index = i }
	add_to_array = { array = missile_interception_midcourse_sea_stat_array value = var_missile_interception_midcourse_sea index = i }
}

### midcourse phase vs defense land ###
midcourse_phase_defense_land = {
	set_temp_variable = { temp2 = var_missile_midcourse_completed_sea }
	while_loop_effect = {
		limit = {
			check_variable = { temp2 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp2 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_midcourse_land > 0 }
				check_variable = { PREV.var_deployed_ABM_land > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_midcourse_land = 1 }
			subtract_from_variable = { PREV.var_deployed_ABM_land = 1 }
			add_to_variable = { ABM_consumption_land = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_midcourse_land }
				}
				add_to_variable = { var_missile_interception_midcourse_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_midcourse_completed_land = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_midcourse_completed_land = 1 }
		}
	}
	add_to_array = { array = missile_midcourse_completed_land_stat_array value = var_missile_midcourse_completed_land index = i }
	add_to_array = { array = missile_interception_midcourse_land_stat_array value = var_missile_interception_midcourse_land index = i }
}

### for cruise missiles
midcourse_bypass = {
	add_to_variable = { var_missile_midcourse_completed_sea = var_missile_boost_completed_land }
	add_to_variable = { var_missile_midcourse_completed_land = var_missile_boost_completed_land }
	add_to_array = { array = missile_midcourse_completed_sea_stat_array value = var_missile_boost_completed_land }
	add_to_array = { array = missile_midcourse_completed_land_stat_array value = var_missile_boost_completed_land }
}

### terminal phase vs defense sea ###
terminal_phase_defense_sea = {
	set_temp_variable = { temp3 = var_missile_midcourse_completed_land }
	multiply_temp_variable = { temp3 = var_MIRV }
	set_temp_variable = { temp4 = var_missile_midcourse_completed_land }
	multiply_temp_variable = { temp4 = var_decoy }
	if = {
		limit = {
			OR = {
				check_variable = { temp4 > var_intercept_capacity_terminal_sea }
				check_variable = { temp4 > PREV.var_deployed_SAM_MD_sea }
			}
		}
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_sea > var_intercept_capacity_terminal_sea }
			}
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = var_intercept_capacity_terminal_sea }
			add_to_variable = { SAM_consumption_sea = var_intercept_capacity_terminal_sea }
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = var_intercept_capacity_terminal_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		else = {
			add_to_variable = { SAM_consumption_sea = PREV.var_deployed_SAM_MD_sea }
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = PREV.var_deployed_SAM_MD_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
			set_variable = { PREV.var_deployed_SAM_MD_sea = 0 }
		}
		set_variable = { var_intercept_capacity_terminal_sea = 0 }
	}
	else = {
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_sea > var_intercept_capacity_terminal_sea }
			}
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = var_intercept_capacity_terminal_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		else = {
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = PREV.var_deployed_SAM_MD_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		subtract_from_variable = { var_intercept_capacity_terminal_sea = temp4 }
		subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = temp4 }
		add_to_variable = { SAM_consumption_sea = temp4 }
	}
	while_loop_effect = {
		limit = {
			check_variable = { temp3 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp3 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_terminal_sea > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_sea > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_terminal_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = 1 }
			add_to_variable = { SAM_consumption_sea = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_terminal_sea }
				}
				add_to_variable = { var_missile_interception_terminal_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_terminal_completed_sea = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_terminal_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_terminal_completed_sea_stat_array value = var_missile_terminal_completed_sea index = i }
	add_to_array = { array = missile_interception_terminal_sea_stat_array value = var_missile_interception_terminal_sea index = i }
}

### terminal phase vs defense land ###
terminal_phase_defense_land = {
	set_temp_variable = { temp3 = var_missile_terminal_completed_sea }
	set_temp_variable = { temp4 = var_decoy_completed_sea }
	if = {
		limit = {
			OR = {
				check_variable = { temp4 > var_intercept_capacity_terminal_land }
				check_variable = { temp4 > PREV.var_deployed_SAM_MD_land }
			}
		}
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_land > var_intercept_capacity_terminal_land }
			}
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = var_intercept_capacity_terminal_land }
			add_to_variable = { SAM_consumption_land = var_intercept_capacity_terminal_land }
		}
		else = {
			add_to_variable = { SAM_consumption_land = PREV.var_deployed_SAM_MD_land }
			set_variable = { PREV.var_deployed_SAM_MD_land = 0 }
		}
		set_variable = { var_intercept_capacity_terminal_land = 0 }
	}
	else = {
		subtract_from_variable = { var_intercept_capacity_terminal_land = temp4 }
		subtract_from_variable = { PREV.var_deployed_SAM_MD_land = temp4 }
		add_to_variable = { SAM_consumption_land = temp4 }
	}
	while_loop_effect = {
		limit = {
			check_variable = { temp3 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp3 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_terminal_land > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_land > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_terminal_land = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = 1 }
			add_to_variable = { SAM_consumption_land = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_terminal_land }
				}
				add_to_variable = { var_missile_interception_terminal_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_trajectory = var_accuracy }
				if = {
					limit = { check_variable = { var_missile_trajectory > 1 } }
					add_to_variable = { var_missile_target_hit = 1 }
				}
				else = {
					add_to_variable = { var_missile_target_miss = 1 }
				}
			}
		}
		else = {
			add_to_variable = { var_missile_trajectory = var_accuracy }
			if = {
				limit = { check_variable = { var_missile_trajectory > 1 } }
				add_to_variable = { var_missile_target_hit = 1 }
			}
			else = {
				add_to_variable = { var_missile_target_miss = 1 }
			}
		}
	}
	add_to_array = { array = missile_interception_terminal_land_stat_array value = var_missile_interception_terminal_land index = i }
	add_to_array = { array = missile_target_miss_stat_array value = var_missile_target_miss index = i }
	add_to_array = { array = missile_target_hit_stat_array value = var_missile_target_hit index = i }
}

clear_defense_vars = {
	clear_variable = var_missile_boost_completed_sea
	clear_variable = var_missile_boost_completed_land
	clear_variable = var_missile_interception_boost_sea
	clear_variable = var_missile_interception_boost_land
	#
	clear_variable = var_missile_midcourse_completed_sea
	clear_variable = var_missile_midcourse_completed_land
	clear_variable = var_missile_interception_midcourse_sea
	clear_variable = var_missile_interception_midcourse_land
	#
	clear_variable = var_missile_terminal_completed_sea
	clear_variable = var_decoy_completed_sea
	clear_variable = var_missile_interception_terminal_sea
	clear_variable = var_missile_interception_terminal_land
	clear_variable = var_missile_target_miss
	clear_variable = var_missile_target_hit
}


#################################################
### effects for gui / buttons / trigger / loc ###
#################################################

### production gui ###

set_prod_display_arrays = {
	resize_array = { prod_1_display_array = 0 }
	resize_array = { prod_2_display_array = 0 }
	resize_array = { prod_3_display_array = 0 }
	resize_array = { prod_4_display_array = 0 }
	resize_array = { prod_5_display_array = 0 }
	resize_array = { prod_6_display_array = 0 }
	resize_array = { prod_7_display_array = 0 }
	resize_array = { prod_8_display_array = 0 }
	resize_array = { prod_9_display_array = 0 }
	resize_array = { prod_10_display_array = 0 }
	resize_array = { prod_11_display_array = 0 }
	resize_array = { prod_12_display_array = 0 }
	resize_array = { prod_13_display_array = 0 }
	resize_array = { prod_14_display_array = 0 }
	resize_array = { prod_15_display_array = 0 }

	if = {
		limit = {
			has_tech = GNSS1
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^0 }
	}
	if = {
		limit = {
			has_tech = GNSS2
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^1 }
	}
	if = {
		limit = {
			has_tech = GNSS3
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^2 }
	}
	if = {
		limit = {
			has_tech = GNSS4
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^3 }
	}
	if = {
		limit = {
			has_tech = GNSS5
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^4 }
	}
	if = {
		limit = {
			has_tech = GNSS6
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^5 }
	}
	if = {
		limit = {
			has_tech = GNSS7
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^6 }
	}
	if = {
		limit = {
			has_tech = GNSS8
		}
		add_to_array = { prod_11_display_array = global.prod_11_array^7 }
	}
	if = {
		limit = {
			has_tech = COMSAT1
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^0 }
	}
	if = {
		limit = {
			has_tech = COMSAT2
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^1 }
	}
	if = {
		limit = {
			has_tech = COMSAT3
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^2 }
	}
	if = {
		limit = {
			has_tech = COMSAT4
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^3 }
	}
	if = {
		limit = {
			has_tech = COMSAT5
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^4 }
	}
	if = {
		limit = {
			has_tech = COMSAT6
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^5 }
	}
	if = {
		limit = {
			has_tech = COMSAT7
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^6 }
	}
	if = {
		limit = {
			has_tech = COMSAT8
		}
		add_to_array = { prod_12_display_array = global.prod_12_array^7 }
	}
	if = {
		limit = {
			has_tech = SPYSAT1
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^0 }
	}
	if = {
		limit = {
			has_tech = SPYSAT2
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^1 }
	}
	if = {
		limit = {
			has_tech = SPYSAT3
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^2 }
	}
	if = {
		limit = {
			has_tech = SPYSAT4
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^3 }
	}
	if = {
		limit = {
			has_tech = SPYSAT5
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^4 }
	}
	if = {
		limit = {
			has_tech = SPYSAT6
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^5 }
	}
	if = {
		limit = {
			has_tech = SPYSAT7
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^6 }
	}
	if = {
		limit = {
			has_tech = SPYSAT8
		}
		add_to_array = { prod_13_display_array = global.prod_13_array^7 }
	}
	if = {
		limit = {
			has_tech = KILLSAT1
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^0 }
	}
	if = {
		limit = {
			has_tech = KILLSAT2
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^1 }
	}
	if = {
		limit = {
			has_tech = KILLSAT3
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^2 }
	}
	if = {
		limit = {
			has_tech = KILLSAT4
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^3 }
	}
	if = {
		limit = {
			has_tech = KILLSAT5
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^4 }
	}
	if = {
		limit = {
			has_tech = KILLSAT6
		}
		add_to_array = { prod_14_display_array = global.prod_14_array^5 }
	}
	if = {
		limit = {
			has_tech = RODS1
		}
		add_to_array = { prod_15_display_array = global.prod_15_array^0 }
	}
	if = {
		limit = {
			has_tech = RODS2
		}
		add_to_array = { prod_15_display_array = global.prod_15_array^1 }
	}
	if = {
		limit = {
			has_tech = RODS3
		}
		add_to_array = { prod_15_display_array = global.prod_15_array^2 }
	}
	if = {
		limit = {
			has_tech = OLV1
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^0 }
	}
	if = {
		limit = {
			has_tech = OLV2
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^1 }
	}
	if = {
		limit = {
			has_tech = OLV3
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^2 }
	}
	if = {
		limit = {
			has_tech = OLV4
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^3 }
	}
	if = {
		limit = {
			has_tech = OLV5
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^4 }
	}
	if = {
		limit = {
			has_tech = OLV6
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^5 }
	}
	if = {
		limit = {
			has_tech = OLV7
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^6 }
	}
	if = {
		limit = {
			has_tech = OLV8
		}
		add_to_array = { prod_10_display_array = global.prod_10_array^7 }
	}
	if = {
		limit = {
			has_tech = ICBM1
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^0 }
	}
	if = {
		limit = {
			has_tech = ICBM2
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^1 }
	}
	if = {
		limit = {
			has_tech = ICBM3
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^2 }
	}
	if = {
		limit = {
			has_tech = ICBM4
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^3 }
	}
	if = {
		limit = {
			has_tech = ICBM5
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^4 }
	}
	if = {
		limit = {
			has_tech = ICBM6
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^5 }
	}
	if = {
		limit = {
			has_tech = ICBM7
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^6 }
	}
	if = {
		limit = {
			has_tech = ICBM8
		}
		add_to_array = { prod_1_display_array = global.prod_1_array^7 }
	}
	if = {
		limit = {
			has_tech = IRBM1
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^0 }
	}
	if = {
		limit = {
			has_tech = IRBM2
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^1 }
	}
	if = {
		limit = {
			has_tech = IRBM3
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^2 }
	}
	if = {
		limit = {
			has_tech = IRBM4
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^3 }
	}
	if = {
		limit = {
			has_tech = IRBM5
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^4 }
	}
	if = {
		limit = {
			has_tech = IRBM6
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^5 }
	}
	if = {
		limit = {
			has_tech = IRBM7
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^6 }
	}
	if = {
		limit = {
			has_tech = IRBM8
		}
		add_to_array = { prod_2_display_array = global.prod_2_array^7 }
	}
	if = {
		limit = {
			has_tech = SLBM1
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^0 }
	}
	if = {
		limit = {
			has_tech = SLBM2
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^1 }
	}
	if = {
		limit = {
			has_tech = SLBM3
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^2 }
	}
	if = {
		limit = {
			has_tech = SLBM4
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^3 }
	}
	if = {
		limit = {
			has_tech = SLBM5
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^4 }
	}
	if = {
		limit = {
			has_tech = SLBM6
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^5 }
	}
	if = {
		limit = {
			has_tech = SLBM7
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^6 }
	}
	if = {
		limit = {
			has_tech = SLBM8
		}
		add_to_array = { prod_3_display_array = global.prod_3_array^7 }
	}
	if = {
		limit = {
			has_tech = ALCM1
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^0 }
	}
	if = {
		limit = {
			has_tech = ALCM2
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^1 }
	}
	if = {
		limit = {
			has_tech = ALCM3
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^2 }
	}
	if = {
		limit = {
			has_tech = ALCM4
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^3 }
	}
	if = {
		limit = {
			has_tech = ALCM5
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^4 }
	}
	if = {
		limit = {
			has_tech = ALCM6
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^5 }
	}
	if = {
		limit = {
			has_tech = ALCM7
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^6 }
	}
	if = {
		limit = {
			has_tech = ALCM8
		}
		add_to_array = { prod_4_display_array = global.prod_4_array^7 }
	}
	if = {
		limit = {
			has_tech = HSCM1
		}
		add_to_array = { prod_7_display_array = global.prod_7_array^0 }
	}
	if = {
		limit = {
			has_tech = HSCM2
		}
		add_to_array = { prod_7_display_array = global.prod_7_array^1 }
	}
	if = {
		limit = {
			has_tech = SLCM1
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^0 }
	}
	if = {
		limit = {
			has_tech = GLCM1
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^0 }
	}
	if = {
		limit = {
			has_tech = SLCM2
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^1 }
	}
	if = {
		limit = {
			has_tech = GLCM2
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^1 }
	}
	if = {
		limit = {
			has_tech = SLCM3
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^2 }
	}
	if = {
		limit = {
			has_tech = GLCM3
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^2 }
	}
	if = {
		limit = {
			has_tech = SLCM4
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^3 }
	}
	if = {
		limit = {
			has_tech = GLCM4
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^3 }
	}
	if = {
		limit = {
			has_tech = SLCM5
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^4 }
	}
	if = {
		limit = {
			has_tech = GLCM5
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^4 }
	}
	if = {
		limit = {
			has_tech = SLCM6
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^5 }
	}
	if = {
		limit = {
			has_tech = GLCM6
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^5 }
	}
	if = {
		limit = {
			has_tech = SLCM7
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^6 }
	}
	if = {
		limit = {
			has_tech = GLCM7
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^6 }
	}
	if = {
		limit = {
			has_tech = SLCM8
		}
		add_to_array = { prod_6_display_array = global.prod_6_array^7 }
	}
	if = {
		limit = {
			has_tech = GLCM8
		}
		add_to_array = { prod_5_display_array = global.prod_5_array^7 }
	}
	if = {
		limit = {
			has_tech = SAM0
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^0 }
	}
	if = {
		limit = {
			has_tech = SAM1
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^1 }
	}
	if = {
		limit = {
			has_tech = SAM2
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^2 }
	}
	if = {
		limit = {
			has_tech = SAM3
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^3 }
	}
	if = {
		limit = {
			has_tech = SAM4
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^4 }
	}
	if = {
		limit = {
			has_tech = SAM5
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^5 }
	}
	if = {
		limit = {
			has_tech = SAM6
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^6 }
	}
	if = {
		limit = {
			has_tech = SAM7
		}
		add_to_array = { prod_8_display_array = global.prod_8_array^7 }
	}
	if = {
		limit = {
			has_tech = ABM0
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^0 }
	}
	if = {
		limit = {
			has_tech = ABM1
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^1 }
	}
	if = {
		limit = {
			has_tech = ABM2
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^2 }
	}
	if = {
		limit = {
			has_tech = ABM3
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^3 }
	}
	if = {
		limit = {
			has_tech = ABM4
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^4 }
	}
	if = {
		limit = {
			has_tech = ABM5
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^5 }
	}
	if = {
		limit = {
			has_tech = ABM6
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^6 }
	}
	if = {
		limit = {
			has_tech = ABM7
		}
		add_to_array = { prod_9_display_array = global.prod_9_array^7 }
	}
}

clear_prod_display_arrays = {
	clr_country_flag = missile_production_type_1
	clr_country_flag = missile_production_type_2
	clr_country_flag = missile_production_type_3
	clr_country_flag = missile_production_type_4
	clr_country_flag = missile_production_type_5
	clr_country_flag = missile_production_type_6
	clr_country_flag = missile_production_type_7
	clr_country_flag = missile_production_type_8
	clr_country_flag = missile_production_type_9
	clr_country_flag = missile_production_type_10
	clr_country_flag = missile_production_type_11
	clr_country_flag = missile_production_type_12
	clr_country_flag = missile_production_type_13
	clr_country_flag = missile_production_type_14
	clr_country_flag = missile_production_type_15
	resize_array = { prod_1_display_array = 0 }
	resize_array = { prod_2_display_array = 0 }
	resize_array = { prod_3_display_array = 0 }
	resize_array = { prod_4_display_array = 0 }
	resize_array = { prod_5_display_array = 0 }
	resize_array = { prod_6_display_array = 0 }
	resize_array = { prod_7_display_array = 0 }
	resize_array = { prod_8_display_array = 0 }
	resize_array = { prod_9_display_array = 0 }
	resize_array = { prod_10_display_array = 0 }
	resize_array = { prod_11_display_array = 0 }
	resize_array = { prod_12_display_array = 0 }
	resize_array = { prod_13_display_array = 0 }
	resize_array = { prod_14_display_array = 0 }
	resize_array = { prod_15_display_array = 0 }
	clear_array = prod_1_display_array
	clear_array = prod_2_display_array
	clear_array = prod_3_display_array
	clear_array = prod_4_display_array
	clear_array = prod_5_display_array
	clear_array = prod_6_display_array
	clear_array = prod_7_display_array
	clear_array = prod_8_display_array
	clear_array = prod_9_display_array
	clear_array = prod_10_display_array
	clear_array = prod_11_display_array
	clear_array = prod_12_display_array
	clear_array = prod_13_display_array
	clear_array = prod_14_display_array
	clear_array = prod_15_display_array
}

### ICBM
# function: calculate_production_vars_1
# purpose: This function correlates to the production of ICBMs so it is slot 1
# parameters/variables:
# - var_gui_prod_1_amount = the total number of missile to be built
# - var_gui_prod_1_CIC_use = the total number of civilian industry to be used for building the missile
# - var_gui_prod_1_price_total = the total unit cost of the missile
# - var_gui_prod_1_CIC_total = Total assigned CIC
# - var_gui_prod_1_CIC_days = The total days for the production mission
# - var_gui_prod_1_days_unit = The default number of days for this type of ICBM (Basic: 60)
# --------
# How to convert to money fully:
# 1. Take the price and amplify that. You can find this in common/scripted_effects/00_missiles_models.txt under set_all_prod_arrays
# 2. Remove all of the references to the CIC variable for the current production type
# - look up the variable name 1_CIC and you should be able to find all references
# 3. Change increase_CIC_1_button_click to allow you to change the amount of money you're throwing at the missile production
# 4. Localization needs to be updated to show the display change (UI as well but Bird can help with this) refer to line 33 in MD_missiles_gui_l_english
#
# ----

# TODO: If you have the gumption the arrays need to be culled because there's about three dozen or so of them that aren't needed

calculate_production_vars_1 = {
	clamp_variable = { var = prod_1_multiplier min = 1 max = var_gui_prod_1_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_1_price_total = var_gui_prod_1_price_unit }
	multiply_variable = { var_gui_prod_1_price_total = var_gui_prod_1_amount }
	set_temp_variable = { var_gui_prod_1_price_total_multiplier = prod_1_multiplier }
	multiply_temp_variable = { var_gui_prod_1_price_total_multiplier = var_gui_prod_1_price_unit }
	add_to_variable = { var_gui_prod_1_price_total = var_gui_prod_1_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_1_days = var_gui_prod_1_amount }
	multiply_variable = { var_gui_prod_1_days = var_gui_prod_1_days_unit }
	divide_variable = { var_gui_prod_1_days = prod_1_multiplier }

	set_temp_variable = { modifier_1_prod = 1 }
	subtract_from_temp_variable = { modifier_1_prod = modifier@icbm_production_speed_modifier }
	multiply_variable = { var_gui_prod_1_days = modifier_1_prod }
	round_variable = var_gui_prod_1_days
	clamp_variable = { var = var_gui_prod_1_days min = 1 }
	clamp_variable = { var = var_gui_prod_1_price_total min = var_gui_prod_1_price_unit }
	clamp_variable = { var = var_gui_prod_1_amount min = 1 }
}
### IRBM
calculate_production_vars_2 = {
	clamp_variable = { var = prod_2_multiplier min = 1 max = var_gui_prod_2_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_2_price_total = var_gui_prod_2_price_unit }
	multiply_variable = { var_gui_prod_2_price_total = var_gui_prod_2_amount }
	set_temp_variable = { var_gui_prod_2_price_total_multiplier = prod_2_multiplier }
	multiply_temp_variable = { var_gui_prod_2_price_total_multiplier = var_gui_prod_2_price_unit }
	add_to_variable = { var_gui_prod_2_price_total = var_gui_prod_2_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_2_days = var_gui_prod_2_amount }
	multiply_variable = { var_gui_prod_2_days = var_gui_prod_2_days_unit }
	divide_variable = { var_gui_prod_2_days = prod_2_multiplier }

	set_temp_variable = { modifier_2_prod = 1 }
	subtract_from_temp_variable = { modifier_2_prod = modifier@irbm_production_speed_modifier }
	multiply_variable = { var_gui_prod_2_days = modifier_2_prod }
	round_variable = var_gui_prod_2_days
	clamp_variable = { var = var_gui_prod_2_days min = 1 }
	clamp_variable = { var = var_gui_prod_2_price_total min = var_gui_prod_2_price_unit }
	clamp_variable = { var = var_gui_prod_2_amount min = 1 }
}
### SLBM
calculate_production_vars_3 = {
	clamp_variable = { var = prod_3_multiplier min = 1 max = var_gui_prod_3_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_3_price_total = var_gui_prod_3_price_unit }
	multiply_variable = { var_gui_prod_3_price_total = var_gui_prod_3_amount }
	set_temp_variable = { var_gui_prod_3_price_total_multiplier = prod_3_multiplier }
	multiply_temp_variable = { var_gui_prod_3_price_total_multiplier = var_gui_prod_3_price_unit }
	add_to_variable = { var_gui_prod_3_price_total = var_gui_prod_3_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_3_days = var_gui_prod_3_amount }
	multiply_variable = { var_gui_prod_3_days = var_gui_prod_3_days_unit }
	divide_variable = { var_gui_prod_3_days = prod_3_multiplier }

	set_temp_variable = { modifier_3_prod = 1 }
	subtract_from_temp_variable = { modifier_3_prod = modifier@slbm_production_speed_modifier }
	multiply_variable = { var_gui_prod_3_days = modifier_3_prod }
	round_variable = var_gui_prod_3_days

	clamp_variable = { var = var_gui_prod_3_days min = 1 }
	clamp_variable = { var = var_gui_prod_3_price_total min = var_gui_prod_3_price_unit }
	clamp_variable = { var = var_gui_prod_3_amount min = 1 }
}
### ALCM
calculate_production_vars_4 = {
	clamp_variable = { var = prod_4_multiplier min = 1 max = var_gui_prod_4_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_4_price_total = var_gui_prod_4_price_unit }
	multiply_variable = { var_gui_prod_4_price_total = var_gui_prod_4_amount }
	set_temp_variable = { var_gui_prod_4_price_total_multiplier = prod_4_multiplier }
	multiply_temp_variable = { var_gui_prod_4_price_total_multiplier = var_gui_prod_4_price_unit }
	add_to_variable = { var_gui_prod_4_price_total = var_gui_prod_4_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_4_days = var_gui_prod_4_amount }
	multiply_variable = { var_gui_prod_4_days = var_gui_prod_4_days_unit }
	divide_variable = { var_gui_prod_4_days = prod_4_multiplier }

	set_temp_variable = { modifier_4_prod = 1 }
	subtract_from_temp_variable = { modifier_4_prod = modifier@alcm_production_speed_modifier }
	multiply_variable = { var_gui_prod_4_days = modifier_4_prod }
	round_variable = var_gui_prod_4_days

	clamp_variable = { var = var_gui_prod_4_days min = 1 }
	clamp_variable = { var = var_gui_prod_4_price_total min = var_gui_prod_4_price_unit }
	clamp_variable = { var = var_gui_prod_4_amount min = 1 }
}
### GLCM
calculate_production_vars_5 = {
	clamp_variable = { var = prod_5_multiplier min = 1 max = var_gui_prod_5_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_5_price_total = var_gui_prod_5_price_unit }
	multiply_variable = { var_gui_prod_5_price_total = var_gui_prod_5_amount }
	set_temp_variable = { var_gui_prod_5_price_total_multiplier = prod_5_multiplier }
	multiply_temp_variable = { var_gui_prod_5_price_total_multiplier = var_gui_prod_5_price_unit }
	add_to_variable = { var_gui_prod_5_price_total = var_gui_prod_5_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_5_days = var_gui_prod_5_amount }
	multiply_variable = { var_gui_prod_5_days = var_gui_prod_5_days_unit }
	divide_variable = { var_gui_prod_5_days = prod_5_multiplier }

	set_temp_variable = { modifier_5_prod = 1 }
	subtract_from_temp_variable = { modifier_5_prod = modifier@glcm_production_speed_modifier }
	multiply_variable = { var_gui_prod_5_days = modifier_5_prod }
	round_variable = var_gui_prod_5_days

	clamp_variable = { var = var_gui_prod_5_days min = 1 }
	clamp_variable = { var = var_gui_prod_5_price_total min = var_gui_prod_5_price_unit }
	clamp_variable = { var = var_gui_prod_5_amount min = 1 }
}
### SLCM
calculate_production_vars_6 = {
	clamp_variable = { var = prod_6_multiplier min = 1 max = var_gui_prod_6_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_6_price_total = var_gui_prod_6_price_unit }
	multiply_variable = { var_gui_prod_6_price_total = var_gui_prod_6_amount }
	set_temp_variable = { var_gui_prod_6_price_total_multiplier = prod_6_multiplier }
	multiply_temp_variable = { var_gui_prod_6_price_total_multiplier = var_gui_prod_6_price_unit }
	add_to_variable = { var_gui_prod_6_price_total = var_gui_prod_6_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_6_days = var_gui_prod_6_amount }
	multiply_variable = { var_gui_prod_6_days = var_gui_prod_6_days_unit }
	divide_variable = { var_gui_prod_6_days = prod_6_multiplier }

	set_temp_variable = { modifier_6_prod = 1 }
	subtract_from_temp_variable = { modifier_6_prod = modifier@slcm_production_speed_modifier }
	multiply_variable = { var_gui_prod_6_days = modifier_6_prod }
	round_variable = var_gui_prod_6_days

	clamp_variable = { var = var_gui_prod_6_days min = 1 }
	clamp_variable = { var = var_gui_prod_6_price_total min = var_gui_prod_6_price_unit }
	clamp_variable = { var = var_gui_prod_6_amount min = 1 }
}
### HSCM
calculate_production_vars_7 = {
	clamp_variable = { var = prod_7_multiplier min = 1 max = var_gui_prod_7_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_7_price_total = var_gui_prod_7_price_unit }
	multiply_variable = { var_gui_prod_7_price_total = var_gui_prod_7_amount }
	set_temp_variable = { var_gui_prod_7_price_total_multiplier = prod_7_multiplier }
	multiply_temp_variable = { var_gui_prod_7_price_total_multiplier = var_gui_prod_7_price_unit }
	add_to_variable = { var_gui_prod_7_price_total = var_gui_prod_7_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_7_days = var_gui_prod_7_amount }
	multiply_variable = { var_gui_prod_7_days = var_gui_prod_7_days_unit }
	divide_variable = { var_gui_prod_7_days = prod_7_multiplier }

	set_temp_variable = { modifier_7_prod = 1 }
	subtract_from_temp_variable = { modifier_7_prod = modifier@hscm_production_speed_modifier }
	multiply_variable = { var_gui_prod_7_days = modifier_7_prod }
	round_variable = var_gui_prod_7_days

	clamp_variable = { var = var_gui_prod_7_days min = 1 }
	clamp_variable = { var = var_gui_prod_7_price_total min = var_gui_prod_7_price_unit }
	clamp_variable = { var = var_gui_prod_7_amount min = 1 }
}
### SAM
calculate_production_vars_8 = {
	clamp_variable = { var = prod_8_multiplier min = 1 max = var_gui_prod_8_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_8_price_total = var_gui_prod_8_price_unit }
	multiply_variable = { var_gui_prod_8_price_total = var_gui_prod_8_amount }
	set_temp_variable = { var_gui_prod_8_price_total_multiplier = prod_8_multiplier }
	multiply_temp_variable = { var_gui_prod_8_price_total_multiplier = var_gui_prod_8_price_unit }
	add_to_variable = { var_gui_prod_8_price_total = var_gui_prod_8_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_8_days = var_gui_prod_8_amount }
	multiply_variable = { var_gui_prod_8_days = var_gui_prod_8_days_unit }
	divide_variable = { var_gui_prod_8_days = prod_8_multiplier }

	set_temp_variable = { modifier_8_prod = 1 }
	subtract_from_temp_variable = { modifier_8_prod = modifier@sam_production_speed_modifier }
	multiply_variable = { var_gui_prod_8_days = modifier_8_prod }
	round_variable = var_gui_prod_8_days

	clamp_variable = { var = var_gui_prod_8_days min = 1 }
	clamp_variable = { var = var_gui_prod_8_price_total min = var_gui_prod_8_price_unit }
	clamp_variable = { var = var_gui_prod_8_amount min = 1 }
}
### ABM
calculate_production_vars_9 = {
	clamp_variable = { var = prod_9_multiplier min = 1 max = var_gui_prod_9_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_9_price_total = var_gui_prod_9_price_unit }
	multiply_variable = { var_gui_prod_9_price_total = var_gui_prod_9_amount }
	set_temp_variable = { var_gui_prod_9_price_total_multiplier = prod_9_multiplier }
	multiply_temp_variable = { var_gui_prod_9_price_total_multiplier = var_gui_prod_9_price_unit }
	add_to_variable = { var_gui_prod_9_price_total = var_gui_prod_9_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_9_days = var_gui_prod_9_amount }
	multiply_variable = { var_gui_prod_9_days = var_gui_prod_9_days_unit }
	divide_variable = { var_gui_prod_9_days = prod_9_multiplier }

	set_temp_variable = { modifier_9_prod = 1 }
	subtract_from_temp_variable = { modifier_9_prod = modifier@abm_production_speed_modifier }
	multiply_variable = { var_gui_prod_9_days = modifier_9_prod }
	round_variable = var_gui_prod_9_days

	clamp_variable = { var = var_gui_prod_9_days min = 1 }
	clamp_variable = { var = var_gui_prod_9_price_total min = var_gui_prod_9_price_unit }
	clamp_variable = { var = var_gui_prod_9_amount min = 1 }
}
### OLV
calculate_production_vars_10 = {
	clamp_variable = { var = prod_10_multiplier min = 1 max = var_gui_prod_10_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_10_price_total = var_gui_prod_10_price_unit }
	multiply_variable = { var_gui_prod_10_price_total = var_gui_prod_10_amount }
	set_temp_variable = { var_gui_prod_10_price_total_multiplier = prod_10_multiplier }
	multiply_temp_variable = { var_gui_prod_10_price_total_multiplier = var_gui_prod_10_price_unit }
	add_to_variable = { var_gui_prod_10_price_total = var_gui_prod_10_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_10_days = var_gui_prod_10_amount }
	multiply_variable = { var_gui_prod_10_days = var_gui_prod_10_days_unit }
	divide_variable = { var_gui_prod_10_days = prod_10_multiplier }

	set_temp_variable = { modifier_10_prod = 1 }
	subtract_from_temp_variable = { modifier_10_prod = modifier@olv_production_speed_modifier }
	multiply_variable = { var_gui_prod_10_days = modifier_10_prod }
	round_variable = var_gui_prod_10_days

	clamp_variable = { var = var_gui_prod_10_days min = 1 }
	clamp_variable = { var = var_gui_prod_10_price_total min = var_gui_prod_10_price_unit }
	clamp_variable = { var = var_gui_prod_10_amount min = 1 }
}
### GNSS
calculate_production_vars_11 = {
	clamp_variable = { var = prod_11_multiplier min = 1 max = var_gui_prod_11_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_11_price_total = var_gui_prod_11_price_unit }
	multiply_variable = { var_gui_prod_11_price_total = var_gui_prod_11_amount }
	set_temp_variable = { var_gui_prod_11_price_total_multiplier = prod_11_multiplier }
	multiply_temp_variable = { var_gui_prod_11_price_total_multiplier = var_gui_prod_11_price_unit }
	add_to_variable = { var_gui_prod_11_price_total = var_gui_prod_11_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_11_days = var_gui_prod_11_amount }
	multiply_variable = { var_gui_prod_11_days = var_gui_prod_11_days_unit }
	divide_variable = { var_gui_prod_11_days = prod_11_multiplier }

	set_temp_variable = { modifier_11_prod = 1 }
	subtract_from_temp_variable = { modifier_11_prod = modifier@gnss_production_speed_modifier }
	multiply_variable = { var_gui_prod_11_days = modifier_11_prod }
	round_variable = var_gui_prod_11_days

	clamp_variable = { var = var_gui_prod_11_days min = 1 }
	clamp_variable = { var = var_gui_prod_11_price_total min = var_gui_prod_11_price_unit }
	clamp_variable = { var = var_gui_prod_11_amount min = 1 }
}
### COMSAT
calculate_production_vars_12 = {
	clamp_variable = { var = prod_12_multiplier min = 1 max = var_gui_prod_12_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_12_price_total = var_gui_prod_12_price_unit }
	multiply_variable = { var_gui_prod_12_price_total = var_gui_prod_12_amount }
	set_temp_variable = { var_gui_prod_12_price_total_multiplier = prod_12_multiplier }
	multiply_temp_variable = { var_gui_prod_12_price_total_multiplier = var_gui_prod_12_price_unit }
	add_to_variable = { var_gui_prod_12_price_total = var_gui_prod_12_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_12_days = var_gui_prod_12_amount }
	multiply_variable = { var_gui_prod_12_days = var_gui_prod_12_days_unit }
	divide_variable = { var_gui_prod_12_days = prod_12_multiplier }

	set_temp_variable = { modifier_12_prod = 1 }
	subtract_from_temp_variable = { modifier_12_prod = modifier@comsat_production_speed_modifier }
	multiply_variable = { var_gui_prod_12_days = modifier_12_prod }
	round_variable = var_gui_prod_12_days

	clamp_variable = { var = var_gui_prod_12_days min = 1 }
	clamp_variable = { var = var_gui_prod_12_price_total min = var_gui_prod_12_price_unit }
	clamp_variable = { var = var_gui_prod_12_amount min = 1 }
}
### SPYSAT
calculate_production_vars_13 = {
	clamp_variable = { var = prod_13_multiplier min = 1 max = var_gui_prod_13_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_13_price_total = var_gui_prod_13_price_unit }
	multiply_variable = { var_gui_prod_13_price_total = var_gui_prod_13_amount }
	set_temp_variable = { var_gui_prod_13_price_total_multiplier = prod_13_multiplier }
	multiply_temp_variable = { var_gui_prod_13_price_total_multiplier = var_gui_prod_13_price_unit }
	add_to_variable = { var_gui_prod_13_price_total = var_gui_prod_13_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_13_days = var_gui_prod_13_amount }
	multiply_variable = { var_gui_prod_13_days = var_gui_prod_13_days_unit }
	divide_variable = { var_gui_prod_13_days = prod_13_multiplier }

	set_temp_variable = { modifier_13_prod = 1 }
	subtract_from_temp_variable = { modifier_13_prod = modifier@spysat_production_speed_modifier }
	multiply_variable = { var_gui_prod_13_days = modifier_13_prod }
	round_variable = var_gui_prod_13_days

	clamp_variable = { var = var_gui_prod_13_days min = 1 }
	clamp_variable = { var = var_gui_prod_13_price_total min = var_gui_prod_13_price_unit }
	clamp_variable = { var = var_gui_prod_13_amount min = 1 }
}
### KILLSAT
calculate_production_vars_14 = {
	clamp_variable = { var = prod_14_multiplier min = 1 max = var_gui_prod_14_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_14_price_total = var_gui_prod_14_price_unit }
	multiply_variable = { var_gui_prod_14_price_total = var_gui_prod_14_amount }
	set_temp_variable = { var_gui_prod_14_price_total_multiplier = prod_14_multiplier }
	multiply_temp_variable = { var_gui_prod_14_price_total_multiplier = var_gui_prod_14_price_unit }
	add_to_variable = { var_gui_prod_14_price_total = var_gui_prod_14_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_14_days = var_gui_prod_14_amount }
	multiply_variable = { var_gui_prod_14_days = var_gui_prod_14_days_unit }
	divide_variable = { var_gui_prod_14_days = prod_14_multiplier }

	set_temp_variable = { modifier_14_prod = 1 }
	subtract_from_temp_variable = { modifier_14_prod = modifier@killsat_production_speed_modifier }
	multiply_variable = { var_gui_prod_14_days = modifier_14_prod }
	round_variable = var_gui_prod_14_days

	clamp_variable = { var = var_gui_prod_14_days min = 1 }
	clamp_variable = { var = var_gui_prod_14_price_total min = var_gui_prod_14_price_unit }
	clamp_variable = { var = var_gui_prod_14_amount min = 1 }
}
### Rods
calculate_production_vars_15 = {
	clamp_variable = { var = prod_15_multiplier min = 1 max = var_gui_prod_15_amount }
	# Initial Price of Production
	set_variable = { var_gui_prod_15_price_total = var_gui_prod_15_price_unit }
	multiply_variable = { var_gui_prod_15_price_total = var_gui_prod_15_amount }
	set_temp_variable = { var_gui_prod_15_price_total_multiplier = prod_15_multiplier }
	multiply_temp_variable = { var_gui_prod_15_price_total_multiplier = var_gui_prod_15_price_unit }
	add_to_variable = { var_gui_prod_15_price_total = var_gui_prod_15_price_total_multiplier }

	# Days
	set_variable = { var_gui_prod_15_days = var_gui_prod_15_amount }
	multiply_variable = { var_gui_prod_15_days = var_gui_prod_15_days_unit }
	divide_variable = { var_gui_prod_15_days = prod_15_multiplier }

	set_temp_variable = { modifier_15_prod = 1 }
	subtract_from_temp_variable = { modifier_15_prod = modifier@rods_production_speed_modifier }
	multiply_variable = { var_gui_prod_15_days = modifier_15_prod }
	round_variable = var_gui_prod_15_days

	clamp_variable = { var = var_gui_prod_15_days min = 1 }
	clamp_variable = { var = var_gui_prod_15_price_total min = var_gui_prod_15_price_unit }
	clamp_variable = { var = var_gui_prod_15_amount min = 1 }
}


### launch gui ###

set_missile_launch_arrays_selected_TAG = {
	clear_array = ROOT.trajectory_display_array
	clear_array = ROOT.selected_TAG_missile_launch_point_array
	clear_array = ROOT.selected_TAG_missile_target_point_array
	clear_array = ROOT.selected_TAG_missile_type_array
	#clear_array = ROOT.selected_TAG_missile_tech_array
	#clear_array = ROOT.selected_TAG_missile_warhead_array
	clear_array = ROOT.selected_TAG_missile_conventional_warhead_array
	clear_array = ROOT.selected_TAG_missile_nuclear_warhead_array
	clear_array = ROOT.selected_TAG_missile_nuke_array
	clear_array = ROOT.selected_TAG_missile_MIRV_array
	clear_array = ROOT.selected_TAG_missile_decoy_array
	clear_array = ROOT.selected_TAG_missile_salvo_array
	clear_array = ROOT.selected_TAG_missile_duration_array
	clear_array = ROOT.selected_TAG_missile_strike_type_array
	clear_array = ROOT.selected_TAG_target_selected_1_array
	clear_array = ROOT.selected_TAG_target_selected_2_array
	clear_array = ROOT.selected_TAG_target_selected_3_array
	clear_array = ROOT.selected_TAG_target_selected_4_array
	clear_array = ROOT.selected_TAG_target_selected_5_array
	clear_array = ROOT.selected_TAG_target_selected_6_array
	clear_array = ROOT.selected_TAG_target_selected_7_array
	clear_array = ROOT.selected_TAG_target_selected_8_array
	clear_array = ROOT.selected_TAG_target_selected_9_array
	clear_array = ROOT.selected_TAG_target_selected_10_array
	clear_array = ROOT.selected_TAG_target_selected_11_array
	clear_array = ROOT.selected_TAG_target_selected_12_array
	clear_array = ROOT.selected_TAG_target_selected_13_array
	clear_array = ROOT.selected_TAG_target_selected_14_array
	clear_array = ROOT.selected_TAG_target_selected_15_array
	#
	clear_array = ROOT.selected_TAG_silo_launcher_array
	clear_array = ROOT.selected_TAG_TEL_launcher_array
	clear_array = ROOT.selected_TAG_bomber_number_ALCM_array
	clear_array = ROOT.selected_TAG_STK_number_ALCM_array
	clear_array = ROOT.selected_TAG_MR_number_ALCM_array
	clear_array = ROOT.selected_TAG_MR_CV_number_ALCM_array

	var:missile_launch_selected_TAG = {
		clear_launch_trigger_num_gui_arrays = yes
		for_each_loop = {
			array = missile_target_point_array
			#array = ROOT.selected_TAG_missile_target_point_array
			set_launch_trigger_num_gui = yes
		}
	}


	var:missile_launch_selected_TAG = {
		for_each_loop = {
			array = THIS.missile_launch_point_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.trajectory_display_array = i }
			}
		}
		for_each_loop = {
			array = THIS.missile_launch_point_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_launch_point_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_target_point_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_target_point_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_type_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_type_array = v }
			}
		}
		# for_each_loop = {
		# 	array = THIS.missile_warhead_array
		# 	add_to_array = { ROOT.selected_TAG_missile_warhead_array = v }
		# }
		for_each_loop = {
			array = THIS.missile_conventional_warhead_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_conventional_warhead_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_nuclear_warhead_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_nuclear_warhead_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_nuke_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_nuke_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_MIRV_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_MIRV_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_decoy_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_decoy_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_salvo_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_salvo_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_duration_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_duration_array = v }
			}
		}
		for_each_loop = {
			array = THIS.missile_strike_type_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_missile_strike_type_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_1_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_1_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_2_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_2_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_3_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_3_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_4_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_4_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_5_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_5_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_6_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_6_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_7_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_7_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_8_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_8_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_9_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_9_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_10_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_10_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_11_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_11_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_12_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_12_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_13_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_13_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_14_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_14_array = v }
			}
		}
		for_each_loop = {
			array = THIS.target_selected_15_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_target_selected_15_array = v }
			}
		}
		###
		for_each_loop = {
			array = THIS.silo_launcher_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_silo_launcher_array = v }
			}
		}
		for_each_loop = {
			array = THIS.TEL_launcher_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_TEL_launcher_array = v }
			}
		}
		for_each_loop = {
			array = THIS.bomber_number_ALCM_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_bomber_number_ALCM_array = v }
			}
		}
		for_each_loop = {
			array = THIS.STK_number_ALCM_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_STK_number_ALCM_array = v }
			}
		}
		for_each_loop = {
			array = THIS.MR_number_ALCM_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_MR_number_ALCM_array = v }
			}
		}
		for_each_loop = {
			array = THIS.MR_CV_number_ALCM_array
			if = {
				limit = {
					check_variable = { THIS.missile_alert_array^i = ROOT.var_alert_sort_button }
				}
				add_to_array = { ROOT.selected_TAG_MR_CV_number_ALCM_array = v }
			}
		}
	}
}

set_ballistic_missile_display_array = {
	resize_array = { ballistic_missile_display_array = 0 }
	resize_array = { cruise_missile_display_array = 0 }
	add_to_array = { ballistic_missile_display_array = 11 }
	add_to_array = { ballistic_missile_display_array = 12 }
	add_to_array = { ballistic_missile_display_array = 13 }
	add_to_array = { ballistic_missile_display_array = 14 }
	add_to_array = { ballistic_missile_display_array = 15 }
	add_to_array = { ballistic_missile_display_array = 16 }
	add_to_array = { ballistic_missile_display_array = 17 }
	add_to_array = { ballistic_missile_display_array = 18 }
	add_to_array = { ballistic_missile_display_array = 21 }
	add_to_array = { ballistic_missile_display_array = 22 }
	add_to_array = { ballistic_missile_display_array = 23 }
	add_to_array = { ballistic_missile_display_array = 24 }
	add_to_array = { ballistic_missile_display_array = 25 }
	add_to_array = { ballistic_missile_display_array = 26 }
	add_to_array = { ballistic_missile_display_array = 27 }
	add_to_array = { ballistic_missile_display_array = 28 }
	add_to_array = { ballistic_missile_display_array = 31 }
	add_to_array = { ballistic_missile_display_array = 32 }
	add_to_array = { ballistic_missile_display_array = 33 }
	add_to_array = { ballistic_missile_display_array = 34 }
	add_to_array = { ballistic_missile_display_array = 35 }
	add_to_array = { ballistic_missile_display_array = 36 }
	add_to_array = { ballistic_missile_display_array = 37 }
	add_to_array = { ballistic_missile_display_array = 38 }
}
set_cruise_missile_display_array = {
	resize_array = { ballistic_missile_display_array = 0 }
	resize_array = { cruise_missile_display_array = 0 }
	add_to_array = { cruise_missile_display_array = 41 }
	add_to_array = { cruise_missile_display_array = 42 }
	add_to_array = { cruise_missile_display_array = 43 }
	add_to_array = { cruise_missile_display_array = 44 }
	add_to_array = { cruise_missile_display_array = 45 }
	add_to_array = { cruise_missile_display_array = 46 }
	add_to_array = { cruise_missile_display_array = 47 }
	add_to_array = { cruise_missile_display_array = 48 }
	add_to_array = { cruise_missile_display_array = 51 }
	add_to_array = { cruise_missile_display_array = 52 }
	add_to_array = { cruise_missile_display_array = 53 }
	add_to_array = { cruise_missile_display_array = 54 }
	add_to_array = { cruise_missile_display_array = 55 }
	add_to_array = { cruise_missile_display_array = 56 }
	add_to_array = { cruise_missile_display_array = 57 }
	add_to_array = { cruise_missile_display_array = 58 }
	add_to_array = { cruise_missile_display_array = 61 }
	add_to_array = { cruise_missile_display_array = 62 }
	add_to_array = { cruise_missile_display_array = 63 }
	add_to_array = { cruise_missile_display_array = 64 }
	add_to_array = { cruise_missile_display_array = 65 }
	add_to_array = { cruise_missile_display_array = 66 }
	add_to_array = { cruise_missile_display_array = 67 }
	add_to_array = { cruise_missile_display_array = 68 }
	add_to_array = { cruise_missile_display_array = 71 }
	add_to_array = { cruise_missile_display_array = 72 }
}
set_conventional_warhead_display_array = {
	resize_array = { conventional_warhead_display_array = 0 }
	resize_array = { nuclear_warhead_display_array = 0 }
	add_to_array = { conventional_warhead_display_array = 0 }
	add_to_array = { conventional_warhead_display_array = 1 }
	add_to_array = { conventional_warhead_display_array = 2 }
	add_to_array = { conventional_warhead_display_array = 3 }
	add_to_array = { conventional_warhead_display_array = 4 }
	add_to_array = { conventional_warhead_display_array = 5 }
	add_to_array = { conventional_warhead_display_array = 6 }
	add_to_array = { conventional_warhead_display_array = 7 }
	add_to_array = { conventional_warhead_display_array = 8 }
	add_to_array = { conventional_warhead_display_array = 9 }
	add_to_array = { conventional_warhead_display_array = 10 }
	add_to_array = { conventional_warhead_display_array = 11 }
}
set_nuclear_warhead_display_array = {
	resize_array = { conventional_warhead_display_array = 0 }
	resize_array = { nuclear_warhead_display_array = 0 }
	add_to_array = { nuclear_warhead_display_array = 0 }
	add_to_array = { nuclear_warhead_display_array = 1 }
	add_to_array = { nuclear_warhead_display_array = 2 }
	add_to_array = { nuclear_warhead_display_array = 3 }
	add_to_array = { nuclear_warhead_display_array = 4 }
	add_to_array = { nuclear_warhead_display_array = 5 }
	add_to_array = { nuclear_warhead_display_array = 6 }
	add_to_array = { nuclear_warhead_display_array = 7 }
	add_to_array = { nuclear_warhead_display_array = 8 }
	add_to_array = { nuclear_warhead_display_array = 9 }
	add_to_array = { nuclear_warhead_display_array = 10 }
	add_to_array = { nuclear_warhead_display_array = 11 }
	add_to_array = { nuclear_warhead_display_array = 12 }
	add_to_array = { nuclear_warhead_display_array = 13 }
	add_to_array = { nuclear_warhead_display_array = 14 }
	add_to_array = { nuclear_warhead_display_array = 15 }
}

set_ballistic_missile_model_gui = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?ballistic_missile_display_array^i]"
	}
}
set_cruise_missile_model_gui = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?cruise_missile_display_array^i]"
	}
}

set_gui_conventional_warhead_cost = {
	set_temp_variable = { temp_CW_costs = global.conventional_warhead_cost_array^i }
	set_temp_variable = { temp_CW_decoy = global.conventional_warhead_cost_array^i }
	if = {
		limit = {
			check_variable = { var_win_MIRV > 0 }
		}
		multiply_temp_variable = { temp_CW_costs = var_win_MIRV }
	}
	if = {
		limit = {
			check_variable = { var_win_decoy > 0 }
		}
		multiply_temp_variable = { temp_CW_decoy = var_win_decoy }
		multiply_temp_variable = { temp_CW_decoy = 0.5 }
		add_to_temp_variable = { temp_CW_costs = temp_CW_decoy }
	}
	set_variable = { var_gui_conventional_warhead_cost = temp_CW_costs }
}

set_gui_nuclear_warhead_cost = {
	set_temp_variable = { temp_NW_costs = global.nuclear_warhead_cost_array^i }
	set_temp_variable = { temp_NW_decoy = global.nuclear_warhead_cost_array^i }
	if = {
		limit = {
			check_variable = { var_win_MIRV > 0 }
		}
		multiply_temp_variable = { temp_NW_costs = var_win_MIRV }
	}
	if = {
		limit = {
			check_variable = { var_win_decoy > 0 }
		}
		multiply_temp_variable = { temp_NW_decoy = var_win_decoy }
		multiply_temp_variable = { temp_NW_decoy = 0.5 }
		add_to_temp_variable = { temp_NW_costs = temp_NW_decoy }
	}
	set_variable = { var_gui_nuclear_warhead_cost = temp_NW_costs }
}

set_missile_model = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?missile_type_array^i]"
	}
}

### rename to conventional warhead
set_warhead = {
	meta_effect = {
		text = {
			set_warhead_[warhead] = yes
		}
		warhead = "[?missile_conventional_warhead_array^i]"
	}
}


set_launch_button_number_vars = {
	###
	log = "set_launch_button_number_vars Root.GetName: [Root.GetName]"
	###
	if = {
		limit = {
			OR = {
				has_selected_SLCM = yes
				has_selected_HSCM = yes
			}
		}
		set_ship_number_LAM = yes
	}
	if = {
		limit = {
			OR = {
				#has_selected_SLBM = yes
				has_selected_SLCM = yes
				has_selected_HSCM = yes
			}
		}
		set_attack_sub_number_LAM = yes
	}
	if = {
		limit = {
			OR = {
				has_selected_SLBM = yes
				#has_selected_SLCM = yes
				#has_selected_HSCM = yes
			}
		}
		set_sub_number_LAM = yes
	}
	if = {
		limit = {
			OR = {
				has_selected_ALCM = yes
				has_selected_HSCM = yes
			}
		}
		###
		log = "start set_bomber_number_ALCM Root.GetName: [Root.GetName]"
		###
		set_bomber_number_ALCM = yes
		set_STK_number_ALCM = yes
		set_MR_number_ALCM = yes
		set_MR_CV_number_ALCM = yes
		set_variable = { var_CV_number_LAM = 0 }
	}
}

set_ship_number_LAM = {
	###
	#log = "set_ship_number_LAM start var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	if = {
		limit = {
	 		check_variable = { var_ship_VLS_launcher > var_ship_launcher }
		}
		set_variable = { var_ship_number_LAM = 0 }
		set_variable = { var_ship_number_LAM_loc = 0 }
		set_variable = { var_ship_number_LAM_VLS_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		set_temp_variable = { temp2_ship_number_LAM = 0 }
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			add_to_variable = { var_ship_number_LAM_VLS_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_VLS_launcher }
		}
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp2_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM_loc = 1 }
			set_temp_variable = { temp2_ship_number_LAM = var_ship_number_LAM_loc }
			multiply_temp_variable = { temp2_ship_number_LAM = var_ship_launcher }
		}
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	else = {
		set_variable = { var_ship_number_LAM = 0 }
		set_variable = { var_ship_number_LAM_loc = 0 }
		set_variable = { var_ship_number_LAM_VLS_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		set_temp_variable = { temp2_ship_number_LAM = 0 }
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			add_to_variable = { var_ship_number_LAM_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_launcher }
		}
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp2_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM_VLS_loc = 1 }
			set_temp_variable = { temp2_ship_number_LAM = var_ship_number_LAM_VLS_loc }
			multiply_temp_variable = { temp2_ship_number_LAM = var_ship_VLS_launcher }
		}
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	###
	#log = "set_ship_number_LAM stop var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
}

set_sub_number_LAM = {
	###
	log = "var_sub_number_LAM start var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	set_variable = { var_sub_number_LAM = 0 }
	set_variable = { var_sub_number_LAM_loc = 0 }
	set_temp_variable = { temp1_sub_number_LAM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_sub_number_LAM }
		}
		add_to_variable = { var_sub_number_LAM = 1 }
		add_to_variable = { var_sub_number_LAM_loc = 1 }
		set_temp_variable = { temp1_sub_number_LAM = var_sub_number_LAM }
		multiply_temp_variable = { temp1_sub_number_LAM = var_SLBM_launcher }
	}
	subtract_from_variable = { var_sub_number_LAM = 1 }
	###
	log = "var_sub_number_LAM stop var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo] var_SLBM_launcher = [?var_SLBM_launcher]"
	###
}

set_attack_sub_number_LAM = {
	###
	log = "var_attack_sub_number_LAM start var_attack_sub_number_LAM = [?var_attack_sub_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	set_variable = { var_attack_sub_number_LAM = 0 }
	set_variable = { var_attack_sub_number_LAM_loc = 0 }
	set_temp_variable = { temp1_attack_sub_number_LAM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_attack_sub_number_LAM }
		}
		add_to_variable = { var_attack_sub_number_LAM = 1 }
		add_to_variable = { var_attack_sub_number_LAM_loc = 1 }
		set_temp_variable = { temp1_attack_sub_number_LAM = var_attack_sub_number_LAM }
		multiply_temp_variable = { temp1_attack_sub_number_LAM = var_sub_launcher }
	}
	subtract_from_variable = { var_attack_sub_number_LAM = 1 }
	###
	log = "var_attack_sub_number_LAM stop var_attack_sub_number_LAM = [?var_attack_sub_number_LAM] var_gui_salvo = [?var_gui_salvo] var_sub_launcher = [?var_sub_launcher]"
	###
}

set_bomber_number_ALCM = {
	###
	log = "set_bomber_number_ALCM Root.GetName: [Root.GetName] var_bomber_number_ALCM [?var_bomber_number_ALCM] var_bomber_launcher [?var_bomber_launcher]"
	###
	set_variable = { var_bomber_number_ALCM = 0 }
	set_temp_variable = { temp1_bomber_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_bomber_number_ALCM }
		}
		add_to_variable = { var_bomber_number_ALCM = 1 }
		set_temp_variable = { temp1_bomber_number_ALCM = var_bomber_number_ALCM }
		multiply_temp_variable = { temp1_bomber_number_ALCM = var_bomber_launcher }
	}
	set_variable = { var_bomber_number_ALCM_loc = var_bomber_number_ALCM }
	if = {
		limit = {
			check_variable = { var_bomber_number_ALCM > 0 }
		}
		subtract_from_variable = { var_bomber_number_ALCM = 1 }
	}
	###
	log = "var_bomber_number_ALCM_loc [?var_bomber_number_ALCM_loc] var_bomber_number_ALCM [?var_bomber_number_ALCM]"
	###
}

set_STK_number_ALCM = {
	###
	log = "set_STK_number_ALCM Root.GetName: [Root.GetName]"
	###
	set_variable = { var_STK_number_ALCM = 0 }
	set_temp_variable = { temp1_STK_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_STK_number_ALCM }
		}
		add_to_variable = { var_STK_number_ALCM = 1 }
		set_temp_variable = { temp1_STK_number_ALCM = var_STK_number_ALCM }
		multiply_temp_variable = { temp1_STK_number_ALCM = var_STK_launcher }
	}
	set_variable = { var_STK_number_ALCM_loc = var_STK_number_ALCM }
	if = {
		limit = {
			check_variable = { var_STK_number_ALCM > 0 }
		}
		subtract_from_variable = { var_STK_number_ALCM = 1 }
	}
}

set_MR_number_ALCM = {
	###
	log = "set_MR_number_ALCM Root.GetName: [Root.GetName]"
	###
	set_variable = { var_MR_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_MR_number_ALCM }
		}
		add_to_variable = { var_MR_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_number_ALCM = var_MR_number_ALCM }
		multiply_temp_variable = { temp1_MR_number_ALCM = var_MR_launcher }
	}
	set_variable = { var_MR_number_ALCM_loc = var_MR_number_ALCM }
	if = {
		limit = {
			check_variable = { var_MR_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_number_ALCM = 1 }
	}
}

set_MR_CV_number_ALCM = {
	###
	log = "set_MR_CV_number_ALCM Root.GetName: [Root.GetName]"
	###
	set_variable = { var_MR_CV_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_CV_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_MR_CV_number_ALCM }
		}
		add_to_variable = { var_MR_CV_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_number_ALCM }
		multiply_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_launcher }
	}
	set_variable = { var_MR_CV_number_ALCM_loc = var_MR_CV_number_ALCM }
	if = {
		limit = {
			check_variable = { var_MR_CV_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_CV_number_ALCM = 1 }
	}
}

clear_launch_button_loc_vars = {
	ROOT = {
		clear_variable = var_ship_number_LAM_loc
		clear_variable = var_sub_number_LAM_loc
		clear_variable = var_bomber_number_ALCM_loc
		clear_variable = var_STK_number_ALCM_loc
		clear_variable = var_MR_number_ALCM_loc
		clear_variable = var_MR_CV_number_ALCM_loc
	}
}

clear_launch_button_number_vars = {
	ROOT = {
		clear_variable = var_ship_number_LAM
		clear_variable = var_sub_number_LAM
		clear_variable = var_bomber_number_ALCM
		clear_variable = var_STK_number_ALCM
		clear_variable = var_MR_number_ALCM
		clear_variable = var_MR_CV_number_ALCM
		clear_variable = var_CV_number_LAM
		#launcher
		#clear_variable = var_silo_launcher
		#clear_variable = var_TEL_launcher
		#clear_variable = var_sub_launcher
		#clear_variable = var_bomber_launcher
		#clear_variable = var_MR_launcher
		#clear_variable = var_MR_CV_launcher
		#clear_variable = var_STK_launcher
		#clear_variable = var_ship_launcher
		#clear_variable = var_ship_VLS_launcher
	}
}

### testing bugfixing ###
clear_gui_salvo_duration_vars = {
	ROOT = {
		set_variable = { var_strategic_strike = 2 } # 1 active, 2 not active
		set_variable = { var_tactical_strike = 2 } # 1 active, 2 not active
		clear_variable = var_strike_type
		clear_variable = var_gui_salvo
		clear_variable = var_gui_duration
		clear_variable = var_total_firing
		clear_variable = var_inventory
		clear_variable = var_gui_missile_type
	}
}

#######################
### launch triggers ###
#######################

set_launch_trigger_num = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?ROOT.missile_type_array^i]"
	}
	set_ship_number_LAM_trigger = yes
	set_sub_number_LAM_trigger = yes
	log = "set_launch_trigger_num: var_sub_number_LAM [?var_sub_number_LAM]"
	set_attack_sub_number_LAM_trigger = yes
	set_bomber_number_ALCM_trigger = yes
	set_STK_number_ALCM_trigger = yes
	set_MR_number_ALCM_trigger = yes
	set_MR_CV_number_ALCM_trigger = yes
}

set_ship_number_LAM_trigger = {
	###
	#log = "set_ship_number_LAM start var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	if = {
		limit = {
	 		check_variable = { var_ship_VLS_launcher > var_ship_launcher }
		}
		set_variable = { var_ship_number_LAM = 0 }
		#set_variable = { var_ship_number_LAM_loc = 0 }
		#set_variable = { var_ship_number_LAM_VLS_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		#set_temp_variable = { temp2_ship_number_LAM = 0 }
		set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
		while_loop_effect = {
			limit = {
				#check_variable = { missile_salvo_array^i > temp1_ship_number_LAM }
				check_variable = { temp_missile_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			#add_to_variable = { var_ship_number_LAM_VLS_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_VLS_launcher }
		}
		# while_loop_effect = {
		# 	limit = {
		# 		check_variable = { missile_salvo_array^i > temp2_ship_number_LAM }
		# 	}
		# 	#add_to_variable = { var_ship_number_LAM_loc = 1 }
		# 	#set_temp_variable = { temp2_ship_number_LAM = var_ship_number_LAM_loc }
		# 	#multiply_temp_variable = { temp2_ship_number_LAM = var_ship_launcher }
		# }
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	else = {
		set_variable = { var_ship_number_LAM = 0 }
		#set_variable = { var_ship_number_LAM_loc = 0 }
		#set_variable = { var_ship_number_LAM_VLS_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		#set_temp_variable = { temp2_ship_number_LAM = 0 }
		set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
		while_loop_effect = {
			limit = {
				#check_variable = { missile_salvo_array^i > temp1_ship_number_LAM }
				check_variable = { temp_missile_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			#add_to_variable = { var_ship_number_LAM_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_launcher }
		}
		# while_loop_effect = {
		# 	limit = {
		# 		check_variable = { var_gui_salvo > temp2_ship_number_LAM }
		# 	}
		# 	add_to_variable = { var_ship_number_LAM_VLS_loc = 1 }
		# 	set_temp_variable = { temp2_ship_number_LAM = var_ship_number_LAM_VLS_loc }
		# 	multiply_temp_variable = { temp2_ship_number_LAM = var_ship_VLS_launcher }
		# }
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	###
	#log = "set_ship_number_LAM stop var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
}

set_sub_number_LAM_trigger = {
	###
	#log = "var_sub_number_LAM start var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	set_variable = { var_sub_number_LAM = 0 }
	#set_variable = { var_sub_number_LAM_loc = 0 }
	set_temp_variable = { temp1_sub_number_LAM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { missile_salvo_array^i > temp1_sub_number_LAM }
			check_variable = { temp_missile_salvo > temp1_sub_number_LAM }
		}
		add_to_variable = { var_sub_number_LAM = 1 }
		#add_to_variable = { var_sub_number_LAM_loc = 1 }
		set_temp_variable = { temp1_sub_number_LAM = var_sub_number_LAM }
		multiply_temp_variable = { temp1_sub_number_LAM = var_SLBM_launcher }
	}
	subtract_from_variable = { var_sub_number_LAM = 1 }
	###
	#log = "var_sub_number_LAM stop var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo] var_sub_launcher = [?var_sub_launcher]"
	###
}

set_attack_sub_number_LAM_trigger = {
	###
	#log = "var_attack_sub_number_LAM start var_attack_sub_number_LAM = [?var_attack_sub_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	set_variable = { var_attack_sub_number_LAM = 0 }
	#set_variable = { var_attack_sub_number_LAM_loc = 0 }
	set_temp_variable = { temp1_attack_sub_number_LAM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { var_gui_salvo > temp1_attack_sub_number_LAM }
			check_variable = { temp_missile_salvo > temp1_attack_sub_number_LAM }
		}
		add_to_variable = { var_attack_sub_number_LAM = 1 }
		#add_to_variable = { var_attack_sub_number_LAM_loc = 1 }
		set_temp_variable = { temp1_attack_sub_number_LAM = var_attack_sub_number_LAM }
		multiply_temp_variable = { temp1_attack_sub_number_LAM = var_sub_launcher }
	}
	subtract_from_variable = { var_attack_sub_number_LAM = 1 }
	###
	#log = "var_attack_sub_number_LAM stop var_attack_sub_number_LAM = [?var_attack_sub_number_LAM] var_gui_salvo = [?var_gui_salvo] var_sub_launcher = [?var_sub_launcher]"
	###
}

set_bomber_number_ALCM_trigger = {
	set_variable = { var_bomber_number_ALCM = 0 }
	set_temp_variable = { temp1_bomber_number_ALCM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { missile_salvo_array^i > temp1_bomber_number_ALCM }
			check_variable = { temp_missile_salvo > temp1_bomber_number_ALCM }
		}
		add_to_variable = { var_bomber_number_ALCM = 1 }
		set_temp_variable = { temp1_bomber_number_ALCM = var_bomber_number_ALCM }
		multiply_temp_variable = { temp1_bomber_number_ALCM = var_bomber_launcher }
	}
	#set_variable = { var_bomber_number_ALCM_loc = var_bomber_number_ALCM_trigger }
	if = {
		limit = {
			check_variable = { var_bomber_number_ALCM > 0 }
		}
		subtract_from_variable = { var_bomber_number_ALCM = 1 }
	}
}

set_STK_number_ALCM_trigger = {
	set_variable = { var_STK_number_ALCM = 0 }
	set_temp_variable = { temp1_STK_number_ALCM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { missile_salvo_array^i > temp1_STK_number_ALCM }
			check_variable = { temp_missile_salvo > temp1_STK_number_ALCM }
		}
		add_to_variable = { var_STK_number_ALCM = 1 }
		set_temp_variable = { temp1_STK_number_ALCM = var_STK_number_ALCM }
		multiply_temp_variable = { temp1_STK_number_ALCM = var_STK_launcher }
	}
	#set_variable = { var_STK_number_ALCM_loc = var_STK_number_ALCM_trigger }
	if = {
		limit = {
			check_variable = { var_STK_number_ALCM > 0 }
		}
		subtract_from_variable = { var_STK_number_ALCM = 1 }
	}
}

set_MR_number_ALCM_trigger = {
	set_variable = { var_MR_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_number_ALCM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { missile_salvo_array^i > temp1_MR_number_ALCM }
			check_variable = { temp_missile_salvo > temp1_MR_number_ALCM }
		}
		add_to_variable = { var_MR_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_number_ALCM = var_MR_number_ALCM }
		multiply_temp_variable = { temp1_MR_number_ALCM = var_MR_launcher }
	}
	#set_variable = { var_MR_number_ALCM_loc = var_MR_number_ALCM_trigger }
	if = {
		limit = {
			check_variable = { var_MR_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_number_ALCM = 1 }
	}
}

set_MR_CV_number_ALCM_trigger = {
	set_variable = { var_MR_CV_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_CV_number_ALCM = 0 }
	#
	set_temp_variable = { temp_missile_salvo = missile_salvo_array^i }
	while_loop_effect = {
		limit = {
			#check_variable = { missile_salvo_array^i > temp1_MR_CV_number_ALCM }
			check_variable = { temp_missile_salvo > temp1_MR_CV_number_ALCM }
		}
		add_to_variable = { var_MR_CV_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_number_ALCM }
		multiply_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_launcher }
	}
	#set_variable = { var_MR_CV_number_ALCM_loc = var_MR_CV_number_ALCM_trigger }
	if = {
		limit = {
			check_variable = { var_MR_CV_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_CV_number_ALCM = 1 }
	}
}

### for launch gui entry ###

set_launch_trigger_num_gui = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?missile_type_array^i]"
	}
	set_ship_number_LAM_trigger = yes
	set_sub_number_LAM_trigger = yes
	set_attack_sub_number_LAM_trigger = yes
	set_bomber_number_ALCM_trigger = yes
	set_STK_number_ALCM_trigger = yes
	set_MR_number_ALCM_trigger = yes
	set_MR_CV_number_ALCM_trigger = yes

	add_to_array = { array = silo_launcher_array value = var_silo_launcher index = i }
	add_to_array = { array = TEL_launcher_array value = var_TEL_launcher index = i }
	add_to_array = { array = bomber_number_ALCM_array value = var_bomber_number_ALCM index = i }
	add_to_array = { array = STK_number_ALCM_array value = var_STK_number_ALCM index = i }
	add_to_array = { array = MR_number_ALCM_array value = var_MR_number_ALCM index = i }
	add_to_array = { array = MR_CV_number_ALCM_array value = var_MR_CV_number_ALCM index = i }
	add_to_array = { array = ROOT.selected_TAG_sub_number_LAM_array value = var_sub_number_LAM index = i }
	add_to_array = { array = ROOT.selected_TAG_ship_number_LAM_array value = var_ship_number_LAM index = i }
	add_to_array = { array = ROOT.selected_TAG_attack_sub_number_LAM_array value = var_attack_sub_number_LAM index = i }
}

clear_launch_trigger_num_gui_arrays = {
	clear_array = silo_launcher_array
	clear_array = TEL_launcher_array
	clear_array = bomber_number_ALCM_array
	clear_array = STK_number_ALCM_array
	clear_array = MR_number_ALCM_array
	clear_array = MR_CV_number_ALCM_array
	clear_array = ROOT.selected_TAG_sub_number_LAM_array
	clear_array = ROOT.selected_TAG_ship_number_LAM_array
	clear_array = ROOT.selected_TAG_attack_sub_number_LAM_array

	clear_variable = var_ship_number_LAM
	clear_variable = var_sub_number_LAM
	clear_variable = var_attack_sub_number_LAM
	clear_variable = var_bomber_number_ALCM
	clear_variable = var_STK_number_ALCM
	clear_variable = var_MR_number_ALCM
	clear_variable = var_MR_CV_number_ALCM
}

### target selection ###

set_building_display_array = {
	clear_array = building_display_array
	### building ID + 1 = icon frame
	add_to_array = { building_display_array = 1 }
	add_to_array = { building_display_array = 2 }
	add_to_array = { building_display_array = 3 }
	add_to_array = { building_display_array = 4 }
	add_to_array = { building_display_array = 5 }
	add_to_array = { building_display_array = 6 }
	add_to_array = { building_display_array = 7 }
	add_to_array = { building_display_array = 8 }
	add_to_array = { building_display_array = 9 }
	add_to_array = { building_display_array = 10 }
	add_to_array = { building_display_array = 11 }
	add_to_array = { building_display_array = 12 }
	add_to_array = { building_display_array = 13 }
	add_to_array = { building_display_array = 14 }
	add_to_array = { building_display_array = 15 }
	add_to_array = { building_display_array = 16 }
	add_to_array = { building_display_array = 17 }
	add_to_array = { building_display_array = 18 }
	add_to_array = { building_display_array = 19 }
	add_to_array = { building_display_array = 20 }
	add_to_array = { building_display_array = 21 }
	add_to_array = { building_display_array = 22 }
}

clear_conventional_warhead_targets_gui = {
	clear_variable = var_target_selected_1
	clear_variable = var_target_selected_2
	clear_variable = var_target_selected_3
	clear_variable = var_target_selected_4
	clear_variable = var_target_selected_5
	clear_variable = var_target_selected_6
	clear_variable = var_target_selected_7
	clear_variable = var_target_selected_8
	clear_variable = var_target_selected_9
	clear_variable = var_target_selected_10
	clear_variable = var_target_selected_11
	clear_variable = var_target_selected_12
	clear_variable = var_target_selected_13
	clear_variable = var_target_selected_14
	clear_variable = var_target_selected_15
}

set_conventional_warhead_targets_gui = {
#conventional warheads
	clear_conventional_warhead_targets_gui = yes
	if = {
		limit = {
			check_variable = { global.conventional_warhead_industrial_complex_target_array^i = 1 }
		}
		set_variable = { var_target_selected_1 = 1 }
	}
	else = {
		set_variable = { var_target_selected_1 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_arms_factory_target_array^i = 1 }
		}
		set_variable = { var_target_selected_2 = 1 }
	}
	else = {
		set_variable = { var_target_selected_2 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_infrastructure_target_array^i = 1 }
		}
		set_variable = { var_target_selected_3 = 1 }
	}
	else = {
		set_variable = { var_target_selected_3 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_internet_station_target_array^i = 1 }
		}
		set_variable = { var_target_selected_4 = 1 }
	}
	else = {
		set_variable = { var_target_selected_4 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_dockyard_target_array^i = 1 }
		}
		set_variable = { var_target_selected_5 = 1 }
	}
	else = {
		set_variable = { var_target_selected_5 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_air_base_target_array^i = 1 }
		}
		set_variable = { var_target_selected_6 = 1 }
	}
	else = {
		set_variable = { var_target_selected_6 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_radar_station_target_array^i = 1 }
		}
		set_variable = { var_target_selected_7 = 1 }
	}
	else = {
		set_variable = { var_target_selected_7 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_anti_air_building_target_array^i = 1 }
		}
		set_variable = { var_target_selected_8 = 1 }
	}
	else = {
		set_variable = { var_target_selected_8 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_missile_defense_station_target_array^i = 1 }
		}
		set_variable = { var_target_selected_9 = 1 }
	}
	else = {
		set_variable = { var_target_selected_9 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_TEL_base_target_array^i = 1 }
		}
		set_variable = { var_target_selected_10 = 1 }
	}
	else = {
		set_variable = { var_target_selected_10 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_missile_silo_target_array^i = 1 }
		}
		set_variable = { var_target_selected_11 = 1 }
	}
	else = {
		set_variable = { var_target_selected_11 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_nuclear_reactor_target_array^i = 1 }
		}
		set_variable = { var_target_selected_12 = 1 }
	}
	else = {
		set_variable = { var_target_selected_12 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_synthetic_refinery_target_array^i = 1 }
		}
		set_variable = { var_target_selected_13 = 1 }
	}
	else = {
		set_variable = { var_target_selected_13 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_fuel_silo_target_array^i = 1 }
		}
		set_variable = { var_target_selected_14 = 1 }
	}
	else = {
		set_variable = { var_target_selected_14 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_offices_target_array^i = 1 }
		}
		set_variable = { var_target_selected_15 = 1 }
	}
	else = {
		set_variable = { var_target_selected_15 = 0 }
	}
	#
	if = {
		limit = {
			check_variable = { global.conventional_warhead_naval_base_target_array^i = 1 }
		}
		set_variable = { var_target_selected_16 = 1 }
	}
	else = {
		set_variable = { var_target_selected_16 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_bunker_target_array^i = 1 }
		}
		set_variable = { var_target_selected_17 = 1 }
	}
	else = {
		set_variable = { var_target_selected_17 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_coastal_bunker_target_array^i = 1 }
		}
		set_variable = { var_target_selected_18 = 1 }
	}
	else = {
		set_variable = { var_target_selected_18 = 0 }
	}
	if = {
		limit = {
			check_variable = { global.conventional_warhead_supply_node_target_array^i = 1 }
		}
		set_variable = { var_target_selected_19 = 1 }
	}
	else = {
		set_variable = { var_target_selected_19 = 0 }
	}
	if = { limit = { check_variable = { global.conventional_warhead_rail_way_target_array^i = 1 } }
		set_variable = { var_target_selected_20 = 1 }
	}
	else = {
		set_variable = { var_target_selected_20 = 0 }
	}
	if = { limit = { check_variable = { global.conventional_warhead_fossil_powerplant_target_array^i = 1 } }
		set_variable = { var_target_selected_21 = 1 }
	}
	else = {
		set_variable = { var_target_selected_21 = 0 }
	}
	if = { limit = { check_variable = { global.conventional_warhead_renewable_energy_target_array^i = 1 } }
		set_variable = { var_target_selected_22 = 1 }
	}
	else = {
		set_variable = { var_target_selected_22 = 0 }
	}
}

set_conventional_warhead_targets = {
	add_to_array = { array = target_selected_1_array value = var_target_selected_1 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_2_array value = var_target_selected_2 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_3_array value = var_target_selected_3 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_4_array value = var_target_selected_4 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_5_array value = var_target_selected_5 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_6_array value = var_target_selected_6 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_7_array value = var_target_selected_7 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_8_array value = var_target_selected_8 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_9_array value = var_target_selected_9 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_10_array value = var_target_selected_10 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_11_array value = var_target_selected_11 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_12_array value = var_target_selected_12 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_13_array value = var_target_selected_13 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_14_array value = var_target_selected_14 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_15_array value = var_target_selected_15 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_16_array value = var_target_selected_16 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_17_array value = var_target_selected_17 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_18_array value = var_target_selected_18 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_19_array value = var_target_selected_19 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_20_array value = var_target_selected_20 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_21_array value = var_target_selected_21 index = var_missile_trajectory_ID }
	add_to_array = { array = target_selected_22_array value = var_target_selected_22 index = var_missile_trajectory_ID }
	clear_conventional_warhead_targets_gui = yes
}


### missiles_stat_entry ###\
set_building_damage_stat_display_array = {
	resize_array = { building_damage_stat_display_array = 0 }
	clear_array = building_damage_stat_display_array
	### building ID + 1 = icon frame
	add_to_array = { building_damage_stat_display_array = 1 }
	add_to_array = { building_damage_stat_display_array = 2 }
	add_to_array = { building_damage_stat_display_array = 3 }
	add_to_array = { building_damage_stat_display_array = 4 }
	add_to_array = { building_damage_stat_display_array = 5 }
	add_to_array = { building_damage_stat_display_array = 6 }
	add_to_array = { building_damage_stat_display_array = 7 }
	add_to_array = { building_damage_stat_display_array = 8 }
	add_to_array = { building_damage_stat_display_array = 9 }
	add_to_array = { building_damage_stat_display_array = 10 }
	add_to_array = { building_damage_stat_display_array = 11 }
	add_to_array = { building_damage_stat_display_array = 12 }
	add_to_array = { building_damage_stat_display_array = 13 }
	add_to_array = { building_damage_stat_display_array = 14 }
	add_to_array = { building_damage_stat_display_array = 15 }
	add_to_array = { building_damage_stat_display_array = 16 }
	add_to_array = { building_damage_stat_display_array = 17 }
	add_to_array = { building_damage_stat_display_array = 18 }
	add_to_array = { building_damage_stat_display_array = 19 }
	add_to_array = { building_damage_stat_display_array = 20 }
	add_to_array = { building_damage_stat_display_array = 21 }
	add_to_array = { building_damage_stat_display_array = 22 }
}


set_missile_damage_stats = {
	log = "set_missile_damage_stats i = [?i]"
	add_to_array = { array = damage_building_1_stat_array value = var_damage_building_1 index = i }
	add_to_array = { array = damage_building_2_stat_array value = var_damage_building_2 index = i }
	add_to_array = { array = damage_building_3_stat_array value = var_damage_building_3 index = i }
	add_to_array = { array = damage_building_4_stat_array value = var_damage_building_4 index = i }
	add_to_array = { array = damage_building_5_stat_array value = var_damage_building_5 index = i }
	add_to_array = { array = damage_building_6_stat_array value = var_damage_building_6 index = i }
	add_to_array = { array = damage_building_7_stat_array value = var_damage_building_7 index = i }
	add_to_array = { array = damage_building_8_stat_array value = var_damage_building_8 index = i }
	add_to_array = { array = damage_building_9_stat_array value = var_damage_building_9 index = i }
	add_to_array = { array = damage_building_10_stat_array value = var_damage_building_10 index = i }
	add_to_array = { array = damage_building_11_stat_array value = var_damage_building_11 index = i }
	add_to_array = { array = damage_building_12_stat_array value = var_damage_building_12 index = i }
	add_to_array = { array = damage_building_13_stat_array value = var_damage_building_13 index = i }
	add_to_array = { array = damage_building_14_stat_array value = var_damage_building_14 index = i }
	add_to_array = { array = damage_building_15_stat_array value = var_damage_building_15 index = i }
	add_to_array = { array = damage_building_16_stat_array value = var_damage_building_16 index = i }
	add_to_array = { array = damage_building_17_stat_array value = var_damage_building_17 index = i }
	add_to_array = { array = damage_building_18_stat_array value = var_damage_building_18 index = i }
	add_to_array = { array = damage_building_19_stat_array value = var_damage_building_19 index = i }
	add_to_array = { array = damage_building_20_stat_array value = var_damage_building_20 index = i }
	add_to_array = { array = damage_building_21_stat_array value = var_damage_building_21 index = i }
	add_to_array = { array = damage_building_22_stat_array value = var_damage_building_22 index = i }

	add_to_array = { array = total_org_damage_stat_array value = var_total_org_damage index = i }
	add_to_array = { array = total_str_damage_stat_array value = var_total_str_damage index = i }
	add_to_array = { array = unit_org_damage_stat_array value = var_unit_org_damage index = i }
	add_to_array = { array = unit_str_damage_stat_array value = var_unit_str_damage index = i }
}

set_missile_nuke_damage_stats = {
	add_to_array = { array = ROOT.damage_building_1_stat_array value = nuke_temp0_d index = i }
	add_to_array = { array = ROOT.damage_building_2_stat_array value = nuke_temp1_d index = i }
	add_to_array = { array = ROOT.damage_building_3_stat_array value = nuke_temp2_d index = i }
	add_to_array = { array = ROOT.damage_building_4_stat_array value = nuke_temp3_d index = i }
	add_to_array = { array = ROOT.damage_building_5_stat_array value = nuke_temp4_d index = i }
	add_to_array = { array = ROOT.damage_building_6_stat_array value = nuke_temp5_d index = i }
	add_to_array = { array = ROOT.damage_building_7_stat_array value = nuke_temp6_d index = i }
	add_to_array = { array = ROOT.damage_building_8_stat_array value = nuke_temp7_d index = i }
	add_to_array = { array = ROOT.damage_building_9_stat_array value = nuke_temp8_d index = i }
	add_to_array = { array = ROOT.damage_building_10_stat_array value = nuke_temp9_d index = i }
	add_to_array = { array = ROOT.damage_building_11_stat_array value = nuke_temp10_d index = i }
	add_to_array = { array = ROOT.damage_building_12_stat_array value = nuke_temp11_d index = i }
	add_to_array = { array = ROOT.damage_building_13_stat_array value = nuke_temp12_d index = i }
	add_to_array = { array = ROOT.damage_building_14_stat_array value = nuke_temp13_d index = i }
	add_to_array = { array = ROOT.damage_building_15_stat_array value = nuke_temp14_d index = i }
	###to test
	add_to_array = { array = ROOT.damage_building_16_stat_array value = nuke_temp15_d index = i }
	add_to_array = { array = ROOT.damage_building_17_stat_array value = nuke_temp16_d index = i }
	add_to_array = { array = ROOT.damage_building_18_stat_array value = nuke_temp17_d index = i }
	add_to_array = { array = ROOT.damage_building_19_stat_array value = nuke_temp18_d index = i }
	add_to_array = { array = ROOT.damage_building_20_stat_array value = nuke_temp19_d index = i }
	add_to_array = { array = ROOT.damage_building_21_stat_array value = nuke_temp20_d index = i }
	add_to_array = { array = ROOT.damage_building_22_stat_array value = nuke_temp21_d index = i }
}


set_missile_warhead_effects = {
	set_temp_variable = { temp1 = missile_target_hit_stat_array^i } # var_missile_target_hit
	if = {
		limit = {
			check_variable = { missile_nuke_array^i = 2 }
		}

		set_variable = { var_nuke_warhead_ID = missile_nuclear_warhead_array^i }
		set_variable = { var_nuke_damage = global.nuclear_warhead_building_damage_array^var_nuke_warhead_ID }
		log = "[GetDateText]: [Root.GetName]: var_nuke_damage [?ROOT.var_nuke_damage]"
		multiply_variable = { var_nuke_damage = temp1 }
		log = "[GetDateText]: [Root.GetName]: multiply var_nuke_damage [?ROOT.var_nuke_damage]"

		launch_nuclear_warhead = yes
		var:ROOT.missile_target_controller_array^i = {
			ROOT = {
				set_country_flag = { flag = has_dropped_nuke_@PREV days = 90 value = 1 }
			}
		}
		if = {
			limit = {
				var:ROOT.missile_target_point_array^i = {
					is_capital = yes
				}
			}
			var:ROOT.missile_target_controller_array^i = {
				ROOT = {
					set_country_flag = { flag = has_dropped_nuke_on_capital_@PREV days = 90 value = 1 }
				}
			}
		}
		var:ROOT.missile_target_controller_array^i = {
			### change var_RSTK_strike_limit to array?
			#add_to_variable = { var_RSTK_strike_limit_@ROOT = ROOT.missile_target_hit_stat_array^i }
			add_to_array = { retaliatory_strike_target_array = ROOT.id }
			add_to_array = { retaliatory_strike_limit_array = ROOT.missile_target_hit_stat_array^i }
		}
	}
	else = {
		if = {
			limit = {
				check_variable = { ROOT.missile_strike_type_array^i = 4 } # 4 = strategic
			}
			set_conventional_warhead_damage = yes
		}
		else_if = {
			limit = {
				check_variable = { ROOT.missile_strike_type_array^i = 2 } # 2 = tactical
			}
			set_conventional_warhead_unit_damage = yes
		}
	}
}

# The purpose of this is to clear and then set these to 0 to remove CWTools errors.
# It should surpress false positive errors.
nuke_temp_value_clear_set = {
	clear_variable = nuke_temp0
	clear_variable = nuke_temp1
	clear_variable = nuke_temp2
	clear_variable = nuke_temp3
	clear_variable = nuke_temp4
	clear_variable = nuke_temp5
	clear_variable = nuke_temp6
	clear_variable = nuke_temp7
	clear_variable = nuke_temp8
	clear_variable = nuke_temp9
	clear_variable = nuke_temp10
	clear_variable = nuke_temp11
	clear_variable = nuke_temp12
	clear_variable = nuke_temp13
	clear_variable = nuke_temp14

	set_variable = { nuke_temp0 = 0 }
	set_variable = { nuke_temp1 = 0 }
	set_variable = { nuke_temp2 = 0 }
	set_variable = { nuke_temp3 = 0 }
	set_variable = { nuke_temp4 = 0 }
	set_variable = { nuke_temp5 = 0 }
	set_variable = { nuke_temp6 = 0 }
	set_variable = { nuke_temp7 = 0 }
	set_variable = { nuke_temp8 = 0 }
	set_variable = { nuke_temp9 = 0 }
	set_variable = { nuke_temp10 = 0 }
	set_variable = { nuke_temp11 = 0 }
	set_variable = { nuke_temp12 = 0 }
	set_variable = { nuke_temp13 = 0 }
	set_variable = { nuke_temp14 = 0 }
}

## controller
# state scope
launch_nuclear_warhead = {
	nuke_temp_value_clear_set = yes
	meta_effect = {
		text = {
			var:ROOT.missile_target_controller_array^i = {
				set_variable = { nuke_temp0 = [target_point_ID].building_level@industrial_complex }
				set_variable = { nuke_temp1 = [target_point_ID].building_level@arms_factory }
				set_variable = { nuke_temp2 = [target_point_ID].building_level@infrastructure }
				set_variable = { nuke_temp3 = [target_point_ID].building_level@internet_station }
				set_variable = { nuke_temp4 = [target_point_ID].building_level@dockyard }
				set_variable = { nuke_temp5 = [target_point_ID].building_level@air_base }
				set_variable = { nuke_temp6 = [target_point_ID].building_level@radar_station }
				set_variable = { nuke_temp7 = [target_point_ID].building_level@anti_air_building }
				set_variable = { nuke_temp8 = [target_point_ID].building_level@missile_defense_station }
				set_variable = { nuke_temp9 = [target_point_ID].building_level@TEL_base }
				set_variable = { nuke_temp10 = [target_point_ID].building_level@missile_silo }
				set_variable = { nuke_temp11 = [target_point_ID].building_level@nuclear_reactor }
				set_variable = { nuke_temp12 = [target_point_ID].building_level@synthetic_refinery }
				set_variable = { nuke_temp13 = [target_point_ID].building_level@fuel_silo }
				set_variable = { nuke_temp14 = [target_point_ID].building_level@offices }
				# provincial buildings can't be targeted, all province buildings get reduced to 0 HP by vanilla nukes
				#set_variable = { nuke_temp15 = [target_point_ID].building_level@naval_base }
				#set_variable = { nuke_temp16 = [target_point_ID].building_level@bunker }
				#set_variable = { nuke_temp17 = [target_point_ID].building_level@coastal_bunker }

				set_variable = { nuke_temp0_d = [target_point_ID].damaged_building_level@industrial_complex }
				set_variable = { nuke_temp1_d = [target_point_ID].damaged_building_level@arms_factory }
				set_variable = { nuke_temp2_d = [target_point_ID].damaged_building_level@infrastructure }
				set_variable = { nuke_temp3_d = [target_point_ID].damaged_building_level@internet_station }
				set_variable = { nuke_temp4_d = [target_point_ID].damaged_building_level@dockyard }
				set_variable = { nuke_temp5_d = [target_point_ID].damaged_building_level@air_base }
				set_variable = { nuke_temp6_d = [target_point_ID].damaged_building_level@radar_station }
				set_variable = { nuke_temp7_d = [target_point_ID].damaged_building_level@anti_air_building }
				set_variable = { nuke_temp8_d = [target_point_ID].damaged_building_level@missile_defense_station }
				set_variable = { nuke_temp9_d = [target_point_ID].damaged_building_level@TEL_base }
				set_variable = { nuke_temp10_d = [target_point_ID].damaged_building_level@missile_silo }
				set_variable = { nuke_temp11_d = [target_point_ID].damaged_building_level@nuclear_reactor }
				set_variable = { nuke_temp12_d = [target_point_ID].damaged_building_level@synthetic_refinery }
				set_variable = { nuke_temp13_d = [target_point_ID].damaged_building_level@fuel_silo }
				set_variable = { nuke_temp14_d = [target_point_ID].damaged_building_level@offices }
				# provincial buildings can't be targeted, all province buildings get reduced to 0 HP by vanilla nukes
				#set_variable = { nuke_temp15_d = [target_point_ID].damaged_building_level@naval_base }
				#set_variable = { nuke_temp16_d = [target_point_ID].damaged_building_level@bunker }
				#set_variable = { nuke_temp17_d = [target_point_ID].damaged_building_level@coastal_bunker }
			}
			set_temp_variable = { temp2 = temp1 }
			while_loop_effect = {
				limit = {
					check_variable = { temp1 > 0 }
				}
				subtract_from_temp_variable = { temp1 = 1 }
				launch_nuke = {
					state = [target_point_ID]
					controller = [target_TAG]
				}
			}
			set_variable = { global.nuke_drop_salvo_idx = -1 } # was zero, did not work, cause arrays start with zero, not 1
			var:ROOT.missile_target_controller_array^i = {
				log = "ROOT.missile_target_controller_array^i [?ROOT.missile_target_controller_array^i.GetName]"
				add_to_variable = { global.nuke_drop_salvo_idx = 1 } ### for on_nuke_drop
				log = "global.nuke_drop_salvo_idx [?global.nuke_drop_salvo_idx]"
				set_temp_variable = { idx = i } ### for logging

				ROOT = { set_nuclear_warhead_unit_damage = yes }
				set_nuke_damage = yes
			}

			var:ROOT.missile_target_point_array^i = {
				set_variable = { var_nuke_radiation_factor = PREV.global.nuclear_warhead_radiation_factor_array^[warhead_ID] }
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }

					add_to_variable = { var_nuke_local_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_local_non_core_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_non_core_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_recruitable_population = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_recruitable_population_factor = var_nuke_radiation_factor }
				}
				add_dynamic_modifier = {
					modifier = radiation_modifier
				}
				add_province_modifier = {
					static_modifiers = { radiation_[warhead_ID] }
					province = {
						all_provinces = yes
					}
				}
				add_province_modifier = {
					static_modifiers = { radiation_[warhead_ID]_naval_base }
					province = {
						all_provinces = yes
						limit_to_naval_base = yes
					}
				}
			}
			var:ROOT.missile_target_controller_array^i = {
				country_event = {
					id = nukes.1 #file: missiles_events.txt
					hours = 2 # was 1 hour, changed to 2 for testing
				}
			}
		}
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]"
		target_TAG = "[?ROOT.missile_target_controller_array^i.GetID]"
		warhead_ID = "[?ROOT.var_nuke_warhead_ID]"
		#debug = yes
	}

}


# controller = {
set_nuke_damage = {
	### may be, modify damage_unit if loop need more than 1000 iterations
	set_temp_variable = { damage_unit = 1 }
	set_temp_variable = { t0 = 0 }
	set_temp_variable = { t1 = 0 }
	set_temp_variable = { t2 = 0 }
	set_temp_variable = { t3 = 0 }
	set_temp_variable = { t4 = 0 }
	set_temp_variable = { t5 = 0 }
	set_temp_variable = { t6 = 0 }
	set_temp_variable = { t7 = 0 }
	set_temp_variable = { t8 = 0 }
	set_temp_variable = { t9 = 0 }
	set_temp_variable = { t10 = 0 }
	set_temp_variable = { t11 = 0 }
	set_temp_variable = { t12 = 0 }
	set_temp_variable = { t13 = 0 }
	set_temp_variable = { t14 = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { ROOT.var_nuke_damage > 0 }
			NOT = {
				AND = {
					check_variable = { t0 > 0 }
					check_variable = { t1 > 0 }
					check_variable = { t2 > 0 }
					check_variable = { t3 > 0 }
					check_variable = { t4 > 0 }
					check_variable = { t5 > 0 }
					check_variable = { t6 > 0 }
					check_variable = { t7 > 0 }
					check_variable = { t8 > 0 }
					check_variable = { t9 > 0 }
					check_variable = { t10 > 0 }
					check_variable = { t11 > 0 }
					check_variable = { t12 > 0 }
					check_variable = { t13 > 0 }
					check_variable = { t14 > 0 }
				}
			}
		}
		###
		add_to_variable = { global.temp_count = 1 }
		log = "[GetDateText]: [ROOT.GetName]: global.temp_count [?global.temp_count]"
		###
		#0
		if = {
			limit = {
				check_variable = { nuke_temp0 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp0 > nuke_temp0_d }
				}
				add_to_variable = { nuke_temp0_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t0 = 1 }
			}
		}
		else = {
			set_temp_variable = { t0 = 1 }
		}
		#1
		if = {
			limit = {
				check_variable = { nuke_temp1 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp1 > nuke_temp1_d }
				}
				add_to_variable = { nuke_temp1_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t1 = 1 }
			}
		}
		else = {
			set_temp_variable = { t1 = 1 }
		}
		#2
		if = {
			limit = {
				check_variable = { nuke_temp2 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp2 > nuke_temp2_d }
				}
				add_to_variable = { nuke_temp2_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t2 = 1 }
			}
		}
		else = {
			set_temp_variable = { t2 = 1 }
		}
		#3
		if = {
			limit = {
				check_variable = { nuke_temp3 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp3 > nuke_temp3_d }
				}
				add_to_variable = { nuke_temp3_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t3 = 1 }
			}
		}
		else = {
			set_temp_variable = { t3 = 1 }
		}
		#4
		if = {
			limit = {
				check_variable = { nuke_temp4 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp4 > nuke_temp4_d }
				}
				add_to_variable = { nuke_temp4_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t4 = 1 }
			}
		}
		else = {
			set_temp_variable = { t4 = 1 }
		}
		#5
		if = {
			limit = {
				check_variable = { nuke_temp5 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp5 > nuke_temp5_d }
				}
				add_to_variable = { nuke_temp5_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t5 = 1 }
			}
		}
		else = {
			set_temp_variable = { t5 = 1 }
		}
		#6
		if = {
			limit = {
				check_variable = { nuke_temp6 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp6 > nuke_temp6_d }
				}
				add_to_variable = { nuke_temp6_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t6 = 1 }
			}
		}
		else = {
			set_temp_variable = { t6 = 1 }
		}
		#7
		if = {
			limit = {
				check_variable = { nuke_temp7 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp7 > nuke_temp7_d }
				}
				add_to_variable = { nuke_temp7_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t7 = 1 }
			}
		}
		else = {
			set_temp_variable = { t7 = 1 }
		}
		#8
		if = {
			limit = {
				check_variable = { nuke_temp8 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp8 > nuke_temp8_d }
				}
				add_to_variable = { nuke_temp8_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t8 = 1 }
			}
		}
		else = {
			set_temp_variable = { t8 = 1 }
		}
		#9
		if = {
			limit = {
				check_variable = { nuke_temp9 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp9 > nuke_temp9_d }
				}
				add_to_variable = { nuke_temp9_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t9 = 1 }
			}
		}
		else = {
			set_temp_variable = { t9 = 1 }
		}
		#10
		if = {
			limit = {
				check_variable = { nuke_temp10 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp10 > nuke_temp10_d }
				}
				add_to_variable = { nuke_temp10_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t10 = 1 }
			}
		}
		else = {
			set_temp_variable = { t10 = 1 }
		}
		#11
		if = {
			limit = {
				check_variable = { nuke_temp11 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp11 > nuke_temp11_d }
				}
				add_to_variable = { nuke_temp11_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t11 = 1 }
			}
		}
		else = {
			set_temp_variable = { t11 = 1 }
		}
		#12
		if = {
			limit = {
				check_variable = { nuke_temp12 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp12 > nuke_temp12_d }
				}
				add_to_variable = { nuke_temp12_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t12 = 1 }
			}
		}
		else = {
			set_temp_variable = { t12 = 1 }
		}
		#13
		if = {
			limit = {
				check_variable = { nuke_temp13 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp13 > nuke_temp13_d }
				}
				add_to_variable = { nuke_temp13_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t13 = 1 }
			}
		}
		else = {
			set_temp_variable = { t13 = 1 }
		}
		#14
		if = {
			limit = {
				check_variable = { nuke_temp14 > 0 }
			}
			if = {
				limit = {
					check_variable = { nuke_temp14 > nuke_temp14_d }
				}
				add_to_variable = { nuke_temp14_d = damage_unit }
				subtract_from_variable = { ROOT.var_nuke_damage = damage_unit }
			}
			else = {
				set_temp_variable = { t14 = 1 }
			}
		}
		else = {
			set_temp_variable = { t14 = 1 }
		}
	}
	add_to_array = { global.damage_building_1_array = nuke_temp0_d }
	add_to_array = { global.damage_building_2_array = nuke_temp1_d }
	add_to_array = { global.damage_building_3_array = nuke_temp2_d }
	add_to_array = { global.damage_building_4_array = nuke_temp3_d }
	add_to_array = { global.damage_building_5_array = nuke_temp4_d }
	add_to_array = { global.damage_building_6_array = nuke_temp5_d }
	add_to_array = { global.damage_building_7_array = nuke_temp6_d }
	add_to_array = { global.damage_building_8_array = nuke_temp7_d }
	add_to_array = { global.damage_building_9_array = nuke_temp8_d }
	add_to_array = { global.damage_building_10_array = nuke_temp9_d }
	add_to_array = { global.damage_building_11_array = nuke_temp10_d }
	add_to_array = { global.damage_building_12_array = nuke_temp11_d }
	add_to_array = { global.damage_building_13_array = nuke_temp12_d }
	add_to_array = { global.damage_building_14_array = nuke_temp13_d }
	add_to_array = { global.damage_building_15_array = nuke_temp14_d }

	set_missile_nuke_damage_stats = yes

	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_1_array^idx [?global.damage_building_1_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_2_array^idx [?global.damage_building_2_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_3_array^idx [?global.damage_building_3_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_4_array^idx [?global.damage_building_4_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_5_array^idx [?global.damage_building_5_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_6_array^idx [?global.damage_building_6_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_7_array^idx [?global.damage_building_7_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_8_array^idx [?global.damage_building_8_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_9_array^idx [?global.damage_building_9_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_10_array^idx [?global.damage_building_10_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_11_array^idx [?global.damage_building_11_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_12_array^idx [?global.damage_building_12_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_13_array^idx [?global.damage_building_13_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_14_array^idx [?global.damage_building_14_array^idx] idx [?idx]"
	log = "[GetDateText]: [ROOT.GetName]: global.damage_building_15_array^idx [?global.damage_building_15_array^idx] idx [?idx]"
}

clear_nuke_vars = {
	clear_variable = global.nuke_drop_salvo_idx
	THIS = {
		clear_variable = nuke_temp0
		clear_variable = nuke_temp1
		clear_variable = nuke_temp2
		clear_variable = nuke_temp3
		clear_variable = nuke_temp4
		clear_variable = nuke_temp5
		clear_variable = nuke_temp6
		clear_variable = nuke_temp7
		clear_variable = nuke_temp8
		clear_variable = nuke_temp9
		clear_variable = nuke_temp10
		clear_variable = nuke_temp11
		clear_variable = nuke_temp12
		clear_variable = nuke_temp13
		clear_variable = nuke_temp14
		clear_variable = nuke_temp0_d
		clear_variable = nuke_temp1_d
		clear_variable = nuke_temp2_d
		clear_variable = nuke_temp3_d
		clear_variable = nuke_temp4_d
		clear_variable = nuke_temp5_d
		clear_variable = nuke_temp6_d
		clear_variable = nuke_temp7_d
		clear_variable = nuke_temp8_d
		clear_variable = nuke_temp9_d
		clear_variable = nuke_temp10_d
		clear_variable = nuke_temp11_d
		clear_variable = nuke_temp12_d
		clear_variable = nuke_temp13_d
		clear_variable = nuke_temp14_d

		clear_array = global.damage_building_1_array
		clear_array = global.damage_building_2_array
		clear_array = global.damage_building_3_array
		clear_array = global.damage_building_4_array
		clear_array = global.damage_building_5_array
		clear_array = global.damage_building_6_array
		clear_array = global.damage_building_7_array
		clear_array = global.damage_building_8_array
		clear_array = global.damage_building_9_array
		clear_array = global.damage_building_10_array
		clear_array = global.damage_building_11_array
		clear_array = global.damage_building_12_array
		clear_array = global.damage_building_13_array
		clear_array = global.damage_building_14_array
		clear_array = global.damage_building_15_array
	}
}


### conventional warhead effects

####
# NEW NAME
set_conventional_warhead_damage = {
	log = "set_conventional_warhead_damage i = [?i] temp1 = [?temp1]"

	### to test
	set_temp_provincial_building_level = yes
	###
	### bugfixing? already coded in set_missile_warhead_effects
	#set_temp_variable = { temp1 = missile_target_hit_stat_array^i } # var_missile_target_hit
	#
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		subtract_from_temp_variable = { temp1 = 1 }
		set_temp_variable = { temp_warhead_idx = ROOT.missile_conventional_warhead_array^i }
		log = "ROOT.missile_conventional_warhead_array^i = [?ROOT.missile_conventional_warhead_array^i] i = [?i] temp1 = [?temp1]"
		set_temp_variable = { temp2 = global.conventional_warhead_damage_array^temp_warhead_idx }
		log = "temp2 [?temp2] global.conventional_warhead_damage_array^temp_warhead_idx [?global.conventional_warhead_damage_array^temp_warhead_idx] temp_warhead_idx [?temp_warhead_idx]"
		### add new buildings here
		random_list = {
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@industrial_complex > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = industrial_complex
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_1 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_1_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@industrial_complex < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@arms_factory > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = arms_factory
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_2 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_2_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@arms_factory < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@infrastructure > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = infrastructure
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_3 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_3_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@infrastructure < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@internet_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = internet_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_4 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_4_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@internet_station < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@dockyard > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = dockyard
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_5 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_5_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@dockyard < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@air_base > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = air_base
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_6 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_6_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@air_base < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@radar_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = radar_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_7 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_7_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@radar_station < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@anti_air_building > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = anti_air_building
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_8 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_8_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@anti_air_building < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@missile_defense_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = missile_defense_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_9 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_9_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@missile_defense_station < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@TEL_base > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = TEL_base
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_10 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_10_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@TEL_base < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@missile_silo > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = missile_silo
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_11 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_11_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@missile_silo < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@nuclear_reactor > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = nuclear_reactor
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_12 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_12_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@nuclear_reactor < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = synthetic_refinery
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_13 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_13_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@fuel_silo > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = fuel_silo
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_14 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_14_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@fuel_silo < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@offices > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = offices
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_15 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_15_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@offices < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			### provincial buildings
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { temp_level_naval_base > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = naval_base
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_16 = 1 }
								subtract_from_temp_variable = { temp_level_naval_base = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_16_array^i = 1 } }
				}
				modifier = {
					factor = 0
					check_variable = { temp_level_naval_base < 1 }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { temp_level_bunker > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = bunker
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_17 = 1 }
								subtract_from_temp_variable = { temp_level_bunker = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_17_array^i = 1 } }
				}
				modifier = {
					factor = 0
					check_variable = { temp_level_bunker < 1 }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { temp_level_coastal_bunker > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = coastal_bunker
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_18 = 1 }
								subtract_from_temp_variable = { temp_level_coastal_bunker = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_18_array^i = 1 } }
				}
				modifier = {
					factor = 0
					check_variable = { temp_level_coastal_bunker < 1 }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { temp_level_supply_node > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = supply_node
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_19 = 1 }
								subtract_from_temp_variable = { temp_level_supply_node = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_19_array^i = 1 } }
				}
				modifier = {
					factor = 0
					check_variable = { temp_level_supply_node < 1 }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { temp_level_rail_way > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = rail_way
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_20 = 1 }
								subtract_from_temp_variable = { temp_level_rail_way = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_20_array^i = 1 } }
				}
				modifier = {
					factor = 0
					check_variable = { temp_level_rail_way < 1 }
				}
			}
			#
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@fossil_powerplant > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = fossil_powerplant
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_21 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_21_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@fossil_powerplant < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = synthetic_refinery
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_22 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_selected_22_array^i = 1 } }
				}
				modifier = {
					factor = 0
					meta_trigger = {
						text = {
							check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery < 1 }
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
			}
		}
	}
	set_missile_damage_stats = yes
	clear_variable = var_damage_building_1
	clear_variable = var_damage_building_2
	clear_variable = var_damage_building_3
	clear_variable = var_damage_building_4
	clear_variable = var_damage_building_5
	clear_variable = var_damage_building_6
	clear_variable = var_damage_building_7
	clear_variable = var_damage_building_8
	clear_variable = var_damage_building_9
	clear_variable = var_damage_building_10
	clear_variable = var_damage_building_11
	clear_variable = var_damage_building_12
	clear_variable = var_damage_building_13
	clear_variable = var_damage_building_14
	clear_variable = var_damage_building_15

	clear_variable = var_damage_building_16
	clear_variable = var_damage_building_17
	clear_variable = var_damage_building_18
	clear_variable = var_damage_building_19
	clear_variable = var_damage_building_20
	clear_variable = var_damage_building_21
	clear_variable = var_damage_building_22

	clear_variable = var_total_org_damage
	clear_variable = var_total_str_damage
	clear_variable = var_unit_org_damage
	clear_variable = var_unit_str_damage
	clear_variable = var_num_units
}

### provincial building level
set_temp_provincial_building_level = {
	meta_effect = {
		text = {
			### naval_base
			if = {
				limit = {
					[target_point_ID] = { naval_base > 9 }
				}
				set_temp_variable = { temp_level_naval_base = 10 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 9 }
				}
				set_temp_variable = { temp_level_naval_base = 9 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 8 }
				}
				set_temp_variable = { temp_level_naval_base = 8 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 7 }
				}
				set_temp_variable = { temp_level_naval_base = 7 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 6 }
				}
				set_temp_variable = { temp_level_naval_base = 6 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 5 }
				}
				set_temp_variable = { temp_level_naval_base = 5 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 4 }
				}
				set_temp_variable = { temp_level_naval_base = 4 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 3 }
				}
				set_temp_variable = { temp_level_naval_base = 3 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 2 }
				}
				set_temp_variable = { temp_level_naval_base = 2 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { naval_base = 1 }
				}
				set_temp_variable = { temp_level_naval_base = 1 }
			}
			else = {
				set_temp_variable = { temp_level_naval_base = 0 }
			}
			### bunker
			if = {
				limit = {
					[target_point_ID] = { bunker > 9 }
				}
				set_temp_variable = { temp_level_bunker = 10 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 9 }
				}
				set_temp_variable = { temp_level_bunker = 9 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 8 }
				}
				set_temp_variable = { temp_level_bunker = 8 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 7 }
				}
				set_temp_variable = { temp_level_bunker = 7 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 6 }
				}
				set_temp_variable = { temp_level_bunker = 6 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 5 }
				}
				set_temp_variable = { temp_level_bunker = 5 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 4 }
				}
				set_temp_variable = { temp_level_bunker = 4 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 3 }
				}
				set_temp_variable = { temp_level_bunker = 3 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 2 }
				}
				set_temp_variable = { temp_level_bunker = 2 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { bunker = 1 }
				}
				set_temp_variable = { temp_level_bunker = 1 }
			}
			else = {
				set_temp_variable = { temp_level_bunker = 0 }
			}
			### coastal_bunker
			if = {
				limit = {
					[target_point_ID] = { coastal_bunker > 9 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 10 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 9 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 9 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 8 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 8 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 7 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 7 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 6 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 6 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 5 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 5 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 4 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 4 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 3 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 3 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 2 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 2 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { coastal_bunker = 1 }
				}
				set_temp_variable = { temp_level_coastal_bunker = 1 }
			}
			else = {
				set_temp_variable = { temp_level_coastal_bunker = 0 }
			}
			### supply_node
			if = {
				limit = {
					[target_point_ID] = { supply_node > 9 }
				}
				set_temp_variable = { temp_level_supply_node = 10 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 9 }
				}
				set_temp_variable = { temp_level_supply_node = 9 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 8 }
				}
				set_temp_variable = { temp_level_supply_node = 8 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 7 }
				}
				set_temp_variable = { temp_level_supply_node = 7 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 6 }
				}
				set_temp_variable = { temp_level_supply_node = 6 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 5 }
				}
				set_temp_variable = { temp_level_supply_node = 5 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 4 }
				}
				set_temp_variable = { temp_level_supply_node = 4 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 3 }
				}
				set_temp_variable = { temp_level_supply_node = 3 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 2 }
				}
				set_temp_variable = { temp_level_supply_node = 2 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { supply_node = 1 }
				}
				set_temp_variable = { temp_level_supply_node = 1 }
			}
			else = {
				set_temp_variable = { temp_level_supply_node = 0 }
			}
			### rail_way
			if = {
				limit = {
					[target_point_ID] = { rail_way > 9 }
				}
				set_temp_variable = { temp_level_rail_way = 10 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 9 }
				}
				set_temp_variable = { temp_level_rail_way = 9 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 8 }
				}
				set_temp_variable = { temp_level_rail_way = 8 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 7 }
				}
				set_temp_variable = { temp_level_rail_way = 7 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 6 }
				}
				set_temp_variable = { temp_level_rail_way = 6 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 5 }
				}
				set_temp_variable = { temp_level_rail_way = 5 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 4 }
				}
				set_temp_variable = { temp_level_rail_way = 4 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 3 }
				}
				set_temp_variable = { temp_level_rail_way = 3 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 2 }
				}
				set_temp_variable = { temp_level_rail_way = 2 }
			}
			else_if = {
				limit = {
					[target_point_ID] = { rail_way = 1 }
				}
				set_temp_variable = { temp_level_rail_way = 1 }
			}
			else = {
				set_temp_variable = { temp_level_rail_way = 0 }
			}
		}
		target_point_ID = "[?missile_target_point_array^i.GetID]"
	}
}

### unit damage

set_conventional_warhead_unit_damage = {
	meta_effect = {
		text = {
			set_temp_variable = { temp_warhead_idx = ROOT.missile_conventional_warhead_array^i }
			set_temp_variable = { temp_org_damage = global.conventional_warhead_org_damage_array^temp_warhead_idx }
			set_temp_variable = { temp_str_damage = global.conventional_warhead_str_damage_array^temp_warhead_idx }
			set_variable = { ROOT.var_num_units = 0 }
			for_each_scope_loop = {
				array = enemies

				add_to_variable = { ROOT.var_num_units = num_armies_in_state@[target_point_ID] }
			}
			multiply_temp_variable = { temp_org_damage = temp1 }
			multiply_temp_variable = { temp_str_damage = temp1 }
			set_variable = { ROOT.var_total_org_damage = temp_org_damage }
			set_variable = { ROOT.var_total_str_damage = temp_str_damage }
			divide_temp_variable = { temp_org_damage = ROOT.var_num_units }
			divide_temp_variable = { temp_str_damage = ROOT.var_num_units }
			set_variable = { ROOT.var_unit_org_damage = temp_org_damage }
			set_variable = { ROOT.var_unit_str_damage = temp_str_damage }

			damage_units = {
				state = [target_point_ID]
				limit = {
					has_war_with = ROOT
				}
				org_damage = temp_org_damage
				str_damage = temp_str_damage
				ratio = no
				army = yes
			}
		}
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]"
		#debug = yes
	}
	log = "ROOT.var_num_units [?ROOT.var_num_units]"

	set_missile_damage_stats = yes
	clear_variable = var_damage_building_1
	clear_variable = var_damage_building_2
	clear_variable = var_damage_building_3
	clear_variable = var_damage_building_4
	clear_variable = var_damage_building_5
	clear_variable = var_damage_building_6
	clear_variable = var_damage_building_7
	clear_variable = var_damage_building_8
	clear_variable = var_damage_building_9
	clear_variable = var_damage_building_10
	clear_variable = var_damage_building_11
	clear_variable = var_damage_building_12
	clear_variable = var_damage_building_13
	clear_variable = var_damage_building_14
	clear_variable = var_damage_building_15

	clear_variable = var_damage_building_16
	clear_variable = var_damage_building_17
	clear_variable = var_damage_building_18
	clear_variable = var_damage_building_19
	clear_variable = var_damage_building_20
	clear_variable = var_damage_building_21
	clear_variable = var_damage_building_22


	clear_variable = var_total_org_damage
	clear_variable = var_total_str_damage
	clear_variable = var_unit_org_damage
	clear_variable = var_unit_str_damage
	clear_variable = var_num_units
}

set_nuclear_warhead_unit_damage = {
	meta_effect = {
		text = {
			set_temp_variable = { temp_warhead_idx = ROOT.missile_nuclear_warhead_array^i }
			set_temp_variable = { temp_org_damage = global.nuclear_warhead_org_damage_array^temp_warhead_idx }
			set_temp_variable = { temp_str_damage = global.nuclear_warhead_str_damage_array^temp_warhead_idx }
			set_variable = { ROOT.var_num_units = 0 }
			for_each_scope_loop = {
				array = enemies

				add_to_variable = { ROOT.var_num_units = num_armies_in_state@[target_point_ID] }
			}
			multiply_temp_variable = { temp_org_damage = ROOT.missile_target_hit_stat_array^i } # was tmep1
			multiply_temp_variable = { temp_str_damage = ROOT.missile_target_hit_stat_array^i } # was temp1
			set_variable = { ROOT.var_total_org_damage = temp_org_damage }
			set_variable = { ROOT.var_total_str_damage = temp_str_damage }
			divide_temp_variable = { temp_org_damage = ROOT.var_num_units }
			divide_temp_variable = { temp_str_damage = ROOT.var_num_units }
			set_variable = { ROOT.var_unit_org_damage = temp_org_damage }
			set_variable = { ROOT.var_unit_str_damage = temp_str_damage }

			damage_units = {
				state = [target_point_ID]
				limit = {
					has_war_with = ROOT
				}
				org_damage = temp_org_damage
				str_damage = temp_str_damage
				ratio = no
				army = yes
			}
		}
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]"
		#debug = yes
	}
	log = "ROOT.var_num_units [?ROOT.var_num_units]"


	# set_missile_damage_stats = yes
	# clear_variable = var_damage_building_1
	# clear_variable = var_damage_building_2
	# clear_variable = var_damage_building_3
	# clear_variable = var_damage_building_4
	# clear_variable = var_damage_building_5
	# clear_variable = var_damage_building_6
	# clear_variable = var_damage_building_7
	# clear_variable = var_damage_building_8
	# clear_variable = var_damage_building_9
	# clear_variable = var_damage_building_10
	# clear_variable = var_damage_building_11
	# clear_variable = var_damage_building_12
	# clear_variable = var_damage_building_13
	# clear_variable = var_damage_building_14
	# clear_variable = var_damage_building_15

	# clear_variable = var_damage_building_16
	# clear_variable = var_damage_building_17
	# clear_variable = var_damage_building_18
	# clear_variable = var_damage_building_19
	# clear_variable = var_damage_building_20

	add_to_array = { array = total_org_damage_stat_array value = var_total_org_damage index = i }
	add_to_array = { array = total_str_damage_stat_array value = var_total_str_damage index = i }
	add_to_array = { array = unit_org_damage_stat_array value = var_unit_org_damage index = i }
	add_to_array = { array = unit_str_damage_stat_array value = var_unit_str_damage index = i }

	clear_variable = var_total_org_damage
	clear_variable = var_total_str_damage
	clear_variable = var_unit_org_damage
	clear_variable = var_unit_str_damage
	clear_variable = var_num_units
}

#########################
### nuclear terorrism ###
#########################

## controller
# state scope
# set_temp_variable = { temp_stateID = THIS.id }
# set_temp_variable = { temp_controllerID = THIS.id }
# set_variable = { ROOT.var_nuke_warhead_ID = 13 }
launch_nuclear_terrorism = {
	meta_effect = {
		text = {
			var:ROOT.temp_controllerID = {
				set_variable = { nuke_temp0 = [target_point_ID].building_level@industrial_complex }
				set_variable = { nuke_temp1 = [target_point_ID].building_level@arms_factory }
				set_variable = { nuke_temp2 = [target_point_ID].building_level@infrastructure }
				set_variable = { nuke_temp3 = [target_point_ID].building_level@internet_station }
				set_variable = { nuke_temp4 = [target_point_ID].building_level@dockyard }
				set_variable = { nuke_temp5 = [target_point_ID].building_level@air_base }
				set_variable = { nuke_temp6 = [target_point_ID].building_level@radar_station }
				set_variable = { nuke_temp7 = [target_point_ID].building_level@anti_air_building }
				set_variable = { nuke_temp8 = [target_point_ID].building_level@missile_defense_station }
				set_variable = { nuke_temp9 = [target_point_ID].building_level@TEL_base }
				set_variable = { nuke_temp10 = [target_point_ID].building_level@missile_silo }
				set_variable = { nuke_temp11 = [target_point_ID].building_level@nuclear_reactor }
				set_variable = { nuke_temp12 = [target_point_ID].building_level@synthetic_refinery }
				set_variable = { nuke_temp13 = [target_point_ID].building_level@fuel_silo }
				set_variable = { nuke_temp14 = [target_point_ID].building_level@offices }
				# provincial buildings can't be targeted, all province buildings get reduced to 0 HP by vanilla nukes
				#set_variable = { nuke_temp15 = [target_point_ID].building_level@naval_base }
				#set_variable = { nuke_temp16 = [target_point_ID].building_level@bunker }
				#set_variable = { nuke_temp17 = [target_point_ID].building_level@coastal_bunker }

				set_variable = { nuke_temp0_d = [target_point_ID].damaged_building_level@industrial_complex }
				set_variable = { nuke_temp1_d = [target_point_ID].damaged_building_level@arms_factory }
				set_variable = { nuke_temp2_d = [target_point_ID].damaged_building_level@infrastructure }
				set_variable = { nuke_temp3_d = [target_point_ID].damaged_building_level@internet_station }
				set_variable = { nuke_temp4_d = [target_point_ID].damaged_building_level@dockyard }
				set_variable = { nuke_temp5_d = [target_point_ID].damaged_building_level@air_base }
				set_variable = { nuke_temp6_d = [target_point_ID].damaged_building_level@radar_station }
				set_variable = { nuke_temp7_d = [target_point_ID].damaged_building_level@anti_air_building }
				set_variable = { nuke_temp8_d = [target_point_ID].damaged_building_level@missile_defense_station }
				set_variable = { nuke_temp9_d = [target_point_ID].damaged_building_level@TEL_base }
				set_variable = { nuke_temp10_d = [target_point_ID].damaged_building_level@missile_silo }
				set_variable = { nuke_temp11_d = [target_point_ID].damaged_building_level@nuclear_reactor }
				set_variable = { nuke_temp12_d = [target_point_ID].damaged_building_level@synthetic_refinery }
				set_variable = { nuke_temp13_d = [target_point_ID].damaged_building_level@fuel_silo }
				set_variable = { nuke_temp14_d = [target_point_ID].damaged_building_level@offices }
				# provincial buildings can't be targeted, all province buildings get reduced to 0 HP by vanilla nukes
				#set_variable = { nuke_temp15_d = [target_point_ID].damaged_building_level@naval_base }
				#set_variable = { nuke_temp16_d = [target_point_ID].damaged_building_level@bunker }
				#set_variable = { nuke_temp17_d = [target_point_ID].damaged_building_level@coastal_bunker }
			}
			set_temp_variable = { temp2 = 1 }
			# while_loop_effect = {
			# 	limit = {
			# 		check_variable = { temp1 > 0 }
			# 	}
			# 	subtract_from_temp_variable = { temp1 = 1 }
				launch_nuke = {
					state = [target_point_ID]
					controller = [target_TAG]
				}
			# }
			set_variable = { global.nuke_drop_salvo_idx = -1 } # was zero, did not work, cause arrays start with zero, not 1
			var:ROOT.temp_controllerID = {
				log = "ROOT.missile_target_controller_array^i [?ROOT.missile_target_controller_array^i.GetName]"
				add_to_variable = { global.nuke_drop_salvo_idx = 1 } ### for on_nuke_drop
				log = "global.nuke_drop_salvo_idx [?global.nuke_drop_salvo_idx]"
				set_temp_variable = { idx = i } ### for logging
				set_nuke_damage = yes
			}

			var:ROOT.temp_stateID = {
				set_variable = { var_nuke_radiation_factor = PREV.global.nuclear_warhead_radiation_factor_array^[warhead_ID] }
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }

					add_to_variable = { var_nuke_local_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_local_non_core_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_non_core_manpower = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_recruitable_population = var_nuke_radiation_factor }
					add_to_variable = { var_nuke_recruitable_population_factor = var_nuke_radiation_factor }
				}
				add_dynamic_modifier = {
					modifier = radiation_modifier
				}
				add_province_modifier = {
					static_modifiers = { radiation_[warhead_ID] }
					province = {
						all_provinces = yes
					}
				}
				add_province_modifier = {
					static_modifiers = { radiation_[warhead_ID]_naval_base }
					province = {
						all_provinces = yes
						limit_to_naval_base = yes
					}
				}
			}
			var:ROOT.temp_controllerID = {
				country_event = {
					id = nukes.1 #file: missiles_events.txt
					hours = 2 # was 1 hour, changed to 2 for testing
				}
			}
			var:ROOT.temp_controllerID = {
				ROOT = {
					set_country_flag = { flag = has_dropped_nuke_@PREV days = 90 value = 1 }
				}
			}
			if = {
				limit = {
					var:ROOT.temp_stateID = {
						is_capital = yes
					}
				}
				var:ROOT.temp_controllerID = {
					ROOT = {
						set_country_flag = { flag = has_dropped_nuke_on_capital_@PREV days = 90 value = 1 }
					}
				}
			}
			var:ROOT.temp_controllerID = {
				### change var_RSTK_strike_limit to array?
				#add_to_variable = { var_RSTK_strike_limit_@ROOT = ROOT.missile_target_hit_stat_array^i }
				add_to_array = { retaliatory_strike_target_array = ROOT.id }
				add_to_array = { retaliatory_strike_limit_array = ROOT.missile_target_hit_stat_array^i }
			}
		}
		target_point_ID = "[?ROOT.temp_stateID.GetID]"
		target_TAG = "[?ROOT.temp_controllerID.GetID]"
		warhead_ID = "[?ROOT.var_nuke_warhead_ID]"
	}

}



###########################
### kinetic bombardment ###
###########################

set_kinetic_bombardment_damage = {
	set_temp_variable = { temp1 = var_kinetic_bombardment_damage } # var_missile_target_hit
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		#subtract_from_temp_variable = { temp1 = 1 }
		#set_temp_variable = { temp_warhead_idx = missile_conventional_warhead_array^i }
		#set_temp_variable = { temp2 = global.conventional_warhead_damage_array^temp_warhead_idx }
		### add new buildings here
		random_list = {
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@industrial_complex > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = industrial_complex
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_1 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@arms_factory > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = arms_factory
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_2 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@infrastructure > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = infrastructure
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_3 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@internet_station > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = internet_station
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_4 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@dockyard > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = dockyard
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_5 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@air_base > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = air_base
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_6 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@radar_station > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = radar_station
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_7 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@anti_air_building > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = anti_air_building
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_8 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@missile_defense_station > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = missile_defense_station
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_9 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@TEL_base > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = TEL_base
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_10 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@missile_silo > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = missile_silo
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_11 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@nuclear_reactor > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = nuclear_reactor
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_12 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = synthetic_refinery
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_13 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@fuel_silo > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = fuel_silo
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_14 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
			1 = {
				meta_effect = {
					text = {
						if = {
							limit = {
								check_variable = { [target_point_ID].non_damaged_building_level@offices > 0 }
							}
							[target_point_ID] = {
								damage_building = {
									type = offices
									damage = 1
								}
							}
							add_to_variable = { var_damage_building_15 = 1 }
							subtract_from_temp_variable = { temp1 = 1 }
						}
					}
					target_point_ID = "[?ROOT.kinetic_bombardment_target_array^ROOT.var_KB_ID.GetID]"
				}
			}
		}
	}
	set_kinetic_bombardment_damage_stats = yes
	clear_variable = var_damage_building_1
	clear_variable = var_damage_building_2
	clear_variable = var_damage_building_3
	clear_variable = var_damage_building_4
	clear_variable = var_damage_building_5
	clear_variable = var_damage_building_6
	clear_variable = var_damage_building_7
	clear_variable = var_damage_building_8
	clear_variable = var_damage_building_9
	clear_variable = var_damage_building_10
	clear_variable = var_damage_building_11
	clear_variable = var_damage_building_12
	clear_variable = var_damage_building_13
	clear_variable = var_damage_building_14
	clear_variable = var_damage_building_15
}

set_kinetic_bombardment_damage_stats = {
	add_to_array = { array = kinetic_bombardment_damage_1_array value = var_damage_building_1 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_2_array value = var_damage_building_2 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_3_array value = var_damage_building_3 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_4_array value = var_damage_building_4 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_5_array value = var_damage_building_5 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_6_array value = var_damage_building_6 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_7_array value = var_damage_building_7 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_8_array value = var_damage_building_8 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_9_array value = var_damage_building_9 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_10_array value = var_damage_building_10 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_11_array value = var_damage_building_11 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_12_array value = var_damage_building_12 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_13_array value = var_damage_building_13 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_14_array value = var_damage_building_14 index = var_KB_ID }
	add_to_array = { array = kinetic_bombardment_damage_15_array value = var_damage_building_15 index = var_KB_ID }
}

#####################
### fire on alert ###
#####################

fire_on_alert = {
	log = "[GetDateText]: [Root.GetName]: fire_on_alert"
	# temp deactivate?
	set_retaliatory_strike_limit = yes
	for_each_loop = {
		array = missile_target_point_array
		### needs to be tested
		#set_missile_model = yes
		set_launch_trigger_num = yes
		log = "[GetDateText]: [Root.GetName]: fire_on_alert: Missile Target: [?missile_target_point_array^i.GetName] ID = [?missile_target_point_array^i.GetID]"
		#
		if = {
			limit = {
				### war check or ROOT
				var:ROOT.missile_target_controller_array^i = {
					OR = {
						original_tag = ROOT
						has_war_with = ROOT
					}
				}
				check_variable = { missile_duration_array^i > 0 }
				#### 1 = fire; 2 = alert
				check_variable = { missile_alert_array^i = 2 }
				### needs to be tested
				check_launch_point = yes
				#
				# check alert target
				# temp deactivate?
				is_in_array = {
					array = retaliatory_strike_target_array
					value = missile_target_controller_array^i
				}
				# check strike limit
				# temp deactivate?
				OR = {
					#### 1 = conventional; 2 = nuke
					check_variable = { missile_nuke_array^i = 1 }
					AND = {
						check_variable = { missile_nuke_array^i = 2 }
						set_temp_variable = { temp7 = missile_salvo_array^i }
						multiply_temp_variable = { temp7 = missile_MIRV_array^i }
						set_temp_variable = { temp8 = ROOT.var_strike_limit }
						OR = {
							check_variable = { temp8 > temp7 }
							check_variable = { temp8 = temp7 }
						}
					}
				}
				# check missiles and warhead inventory
				set_temp_variable = { temp_check_missile_type = missile_type_array^i }
				OR = {
					check_variable = { missile_inventory_array^temp_check_missile_type > missile_salvo_array^i }
					check_variable = { missile_inventory_array^temp_check_missile_type = missile_salvo_array^i }
				}
				if = {
					limit = {
						check_variable = { missile_nuke_array^i = 2 }
					}
					set_temp_variable = { temp_check_warhead_num = missile_salvo_array^i }
					multiply_temp_variable = { temp_check_warhead_num = missile_MIRV_array^i }
					set_temp_variable = { temp_check_warhead_type = missile_nuclear_warhead_array^i }
					OR = {
						check_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type > temp_check_warhead_num }
						check_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type = temp_check_warhead_num }
					}
				}
			}
			### subtract from strike limit
			if = {
				limit = {
					check_variable = { missile_nuke_array^i = 2 }
				}
				subtract_from_variable = { ROOT.var_strike_limit = temp7 }
			}

			log = "[GetDateText]: [Root.GetName]: fire_on_alert: Missile Target: [?missile_target_point_array^i.GetName] ID = [?missile_target_point_array^i.GetID]"
			set_variable = { var_salvo = missile_salvo_array^i }

			var:ROOT.missile_target_controller_array^i = {
				### sea
				set_variable = { ROOT.var_intercept_capacity_boost_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_sea = 0 }
				### land
				set_variable = { ROOT.var_intercept_capacity_boost_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_land = 0 }

				set_seabased_missile_defense_cap = yes
				set_landbased_missile_defense_cap = yes

				### sea
				set_variable = { ROOT.var_intercept_chance_boost_sea = var_SAM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_midcourse_sea = var_ABM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_terminal_sea = var_SAM_intercept_chance_sea }
				### land
				set_variable = { ROOT.var_intercept_chance_boost_land = var_SAM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_midcourse_land = var_ABM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_terminal_land = var_SAM_intercept_chance_land }
			}
			### moved upwards in the effect, reactivated
			set_missile_model = yes

			#does it work ???
			#set_mod_intercept_chance = yes

			set_temp_variable = { temp_missile_type = missile_type_array^i }
			subtract_from_variable = { missile_inventory_array^temp_missile_type = var_salvo }


			set_variable = { var_MIRV = missile_MIRV_array^i }
			set_variable = { var_decoy = missile_decoy_array^i }

			### subtract warheads
			if = {
				limit = {
					check_variable = { missile_nuke_array^i = 2 }
				}
				set_temp_variable = { temp_check_warhead_num = var_salvo }
				multiply_temp_variable = { temp_check_warhead_num = var_MIRV }
				set_temp_variable = { temp_check_warhead_type = missile_nuclear_warhead_array^i }
				subtract_from_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type = temp_check_warhead_num }
			}

			subtract_from_variable = { missile_duration_array^i = 1 }

			var:ROOT.missile_target_controller_array^i = {
				ROOT = {
					### boost phase vs defense ###
					boost_phase_defense_sea = yes
					boost_phase_defense_land = yes
					### midcourse phase vs defense ###
					if = {
						limit = {
							OR = {
								#ICBM
								AND = {
									check_variable = { missile_type_array^i > 10 }
									check_variable = { missile_type_array^i < 20 }
								}
								#IRBM
								AND = {
									check_variable = { missile_type_array^i > 20 }
									check_variable = { missile_type_array^i < 30 }
								}
								#SLBM
								AND = {
									check_variable = { missile_type_array^i > 30 }
									check_variable = { missile_type_array^i < 40 }
								}
							}
						}
						midcourse_phase_defense_sea = yes
						midcourse_phase_defense_land = yes
					}
					else = {
						midcourse_bypass = yes
					}
					### terminal phase vs defense ###
					terminal_phase_defense_sea = yes
					terminal_phase_defense_land = yes
				}
			}
			add_to_array = { array = SAM_consumption_sea_array value = SAM_consumption_sea index = i }
			add_to_array = { array = SAM_consumption_land_array value = SAM_consumption_land index = i }
			add_to_array = { array = ABM_consumption_sea_array value = ABM_consumption_sea index = i }
			add_to_array = { array = ABM_consumption_land_array value = ABM_consumption_land index = i }

			clear_variable = SAM_consumption_sea
			clear_variable = SAM_consumption_land
			clear_variable = ABM_consumption_sea
			clear_variable = ABM_consumption_land
			clear_defense_vars = yes

			set_missile_warhead_effects = yes

		}
		else = {
			add_to_array = { array = missile_boost_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_boost_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_boost_completed_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_boost_land_stat_array value = 0 index = i }

			add_to_array = { array = missile_midcourse_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_midcourse_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_midcourse_completed_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_midcourse_land_stat_array value = 0 index = i }

			add_to_array = { array = missile_terminal_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_terminal_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_interception_terminal_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_target_miss_stat_array value = 0 index = i }
			add_to_array = { array = missile_target_hit_stat_array value = 0 index = i }

			add_to_array = { array = SAM_consumption_sea_array value = 0 index = i }
			add_to_array = { array = SAM_consumption_land_array value = 0 index = i }
			add_to_array = { array = ABM_consumption_sea_array value = 0 index = i }
			add_to_array = { array = ABM_consumption_land_array value = 0 index = i }

			set_missile_damage_stats = yes ### should be zero for all
		}
		### for launch gui entry ###
		set_launch_trigger_num_gui = yes
	}
}

set_retaliatory_strike_limit = {
	for_each_loop = {
		array = retaliatory_strike_target_array
		var:ROOT.retaliatory_strike_target_array^i = {
			if = {
				limit = {
					ROOT = { use_condition_NFU = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_NFU }
					}
				}
				add_to_variable = { ROOT.var_strike_limit = 100 }
				ROOT = { set_country_flag = { flag = strike_limit_NFU days = 90 value = 1 } }
			}
			if = {
				limit = {
					ROOT = { use_condition_MAD = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_MAD }
					}
				}
				add_to_variable = { ROOT.var_strike_limit = 1000 }
				ROOT = { set_country_flag = { flag = strike_limit_MAD days = 90 value = 1 } }
			}
			if = {
				limit = {
					ROOT = { use_condition_MASSR = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_MASSR }
					}
				}
				add_to_variable = { ROOT.var_strike_limit = 1000 }
				ROOT = { set_country_flag = { flag = strike_limit_MASSR days = 90 value = 1 } }
			}
			if = {
				limit = {
					ROOT = { use_condition_FXRSP = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_FXRSP }
					}
				}
				ROOT = { set_temp_variable = { temp5 = surrender_progress } }
				multiply_temp_variable = { temp5 = 100 }
				add_to_variable = { ROOT.var_strike_limit = temp5 }
				ROOT = { set_country_flag = { flag = strike_limit_FXRSP days = 90 value = 1 } }
			}
			if = {
				limit = {
					ROOT = { use_condition_PRMTR_gui = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_PRMTR }
					}
				}
				add_to_variable = { ROOT.var_strike_limit = 1000 }
				ROOT = { set_country_flag = { flag = strike_limit_PRMTR days = 90 value = 1 } }
			}
			# if = {
			# 	limit = {
			# 		ROOT = { use_condition_NDESC_gui = yes }
			# 		NOT = {
			# 			ROOT = { has_country_flag = strike_limit_NDESC }
			# 		}
			# 	}
			# 	add_to_variable = { ROOT.var_strike_limit = 5 }
			# 	ROOT = { set_country_flag = { flag = strike_limit_NDESC days = 90 value = 1 } }
			# }
			# if = {
			# 	limit = {
			# 		ROOT = { use_condition_FSTK = yes }
			# 		NOT = {
			# 			ROOT = { has_country_flag = strike_limit_FSTK }
			# 		}
			# 	}
			# 	add_to_variable = { ROOT.var_strike_limit = 1000 }
			# 	ROOT = { set_country_flag = { flag = strike_limit_FSTK days = 90 value = 1 } }
			# }
			if = {
				limit = {
					ROOT = { use_condition_RSTK = yes }
					NOT = {
						ROOT = { has_country_flag = strike_limit_RSTK_@PREV }
					}
				}
				add_to_variable = { ROOT.var_strike_limit = ROOT.retaliatory_strike_limit_array^i }
				ROOT = { set_country_flag = { flag = strike_limit_RSTK_@PREV days = 90 value = 1 } }
			}
		}
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.var_strike_limit [?ROOT.var_strike_limit]"
}

###########################
### missile defense gui ###
###########################

calculate_NSAM_AD_gui_vars = {
	if = {
		limit = {
			check_variable = { var_NSAM_AD_deployed < 0 }
		}
		set_variable = { var_NSAM_AD_deployed = 0 }
	}
	set_variable = { var_NSAM_AD_deploy_ratio = 0 }
	### add all aa ships
	set_variable = { var_AD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_variable = { var_AD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_variable = { var_AD_ships = num_ships_with_type@cruiser }
	add_to_variable = { var_AD_ships = num_ships_with_type@destroyer }
	add_to_variable = { var_AD_ships = num_ships_with_type@frigate }
	add_to_variable = { var_AD_ships = num_ships_with_type@heavy_frigate }

	##
	#set_variable = { var_ship_SAM_launcher_tech = 4 }
	##
	#set_variable = { var_NSAM_AD_launchers = var_ship_SAM_launcher_tech }
	set_variable = { var_NSAM_AD_launchers = 4 }
	multiply_variable = { var_NSAM_AD_launchers = var_AD_ships }
	set_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_deployed }
	divide_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_launchers }
	set_variable = { var_fleet_air_defense_system = -0.5 }
	add_to_variable = { var_fleet_air_defense_system = var_NSAM_AD_deploy_ratio }
	#set_variable = { var_NSAM_AD_damage = 2 }
	#-0.5
	### costs
	set_variable = { var_NSAM_AD_costs_total = var_NSAM_AD_costs_unit }
	multiply_variable = { var_NSAM_AD_costs_total = var_NSAM_AD_deployed }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_NSAM_AD_costs_total = 4 }
	}
}

calculate_SAM_AD_gui_vars = {
	if = {
		limit = {
			check_variable = { var_SAM_AD_deployed < 0 }
		}
		set_variable = { var_SAM_AD_deployed = 0 }
	}
	set_variable = { var_SAM_AD_deploy_ratio = 0 }
	set_variable = { var_AD_batteries = 0 }
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_variable = { ROOT.var_AD_batteries = building_level@anti_air_building }
	}
	##
	#set_variable = { var_SAM_launcher_tech = 4 }
	##
	set_variable = { var_SAM_AD_launcher_total = var_SAM_AD_launcher_tech }
	multiply_variable = { var_SAM_AD_launcher_total = var_AD_batteries }
	set_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_deployed }
	divide_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_launcher_total }
	if = {
		limit = {
			check_variable = { var_SAM_AD_deploy_ratio < 0 }
		}
		set_variable = { var_SAM_AD_deploy_ratio = 0 }
	}
	set_variable = { var_SAM_AD_damage = var_SAM_AD_damage_gui }
	multiply_variable = { var_SAM_AD_damage = var_SAM_AD_deploy_ratio }
	set_variable = { var_SAM_AD_intercept_chance_total = var_SAM_AD_intercept_chance_total_gui }
	multiply_variable = { var_SAM_AD_intercept_chance_total = var_SAM_AD_deploy_ratio }
	### costs
	set_variable = { var_SAM_AD_costs_total = var_SAM_AD_costs_unit }
	multiply_variable = { var_SAM_AD_costs_total = var_SAM_AD_deployed }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_SAM_AD_costs_total = 4 }
	}
}

calculate_SAM_MD_sea_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_sea < 0 }
		}
		set_variable = { var_deployed_SAM_MD_sea = 0 }
	}
	### costs
	set_variable = { var_NSAM_MD_costs_total = var_NSAM_MD_costs_unit }
	multiply_variable = { var_NSAM_MD_costs_total = var_deployed_SAM_MD_sea }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_NSAM_MD_costs_total = 4 }
	}
	### check for max deployed
	### add all aa ships
	set_temp_variable = { temp_MD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_MD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@heavy_frigate }

	### multiply launchers
	set_temp_variable = { temp_NSAM_MD_launcher_total = var_ship_SAM_launcher_tech }
	multiply_temp_variable = { temp_NSAM_MD_launcher_total = temp_MD_ships }
	set_variable = { var_max_deployed_SAM_MD_sea = temp_NSAM_MD_launcher_total }
}

calculate_SAM_MD_land_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_land < 0 }
		}
		set_variable = { var_deployed_SAM_MD_land = 0 }
	}
	### costs
	set_variable = { var_SAM_MD_costs_total = var_SAM_MD_costs_unit }
	multiply_variable = { var_SAM_MD_costs_total = var_deployed_SAM_MD_land }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_SAM_MD_costs_total = 4 }
	}
	### check for max deployed
	set_temp_variable = { temp_MD_batteries = 0 }
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_temp_variable = { temp_MD_batteries = non_damaged_building_level@anti_air_building }
	}
	set_temp_variable = { temp_SAM_MD_launcher_total = var_SAM_launcher_tech }
	multiply_temp_variable = { temp_SAM_MD_launcher_total = temp_MD_batteries }
	set_variable = { var_max_deployed_SAM_MD_land = temp_SAM_MD_launcher_total }
}

calculate_ABM_sea_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_ABM_sea < 0 }
		}
		set_variable = { var_deployed_ABM_sea = 0 }
	}
	### costs
	set_variable = { var_NABM_costs_total = var_NABM_costs_unit }
	multiply_variable = { var_NABM_costs_total = var_deployed_ABM_sea }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_NABM_costs_total = 4 }
	}
	### check for max deployed
	### add all aa ships
	set_temp_variable = { temp_MD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_MD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@heavy_frigate }

	### multiply launchers
	set_temp_variable = { temp_NABM_launcher_total = var_ship_ABM_launcher_tech }
	multiply_temp_variable = { temp_NABM_launcher_total = temp_MD_ships }
	set_variable = { var_max_deployed_ABM_sea = temp_NABM_launcher_total }
}

calculate_ABM_land_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_ABM_land < 0 }
		}
		set_variable = { var_deployed_ABM_land = 0 }
	}
	### costs
	set_variable = { var_ABM_costs_total = var_ABM_costs_unit }
	multiply_variable = { var_ABM_costs_total = var_deployed_ABM_land }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_ABM_costs_total = 4 }
	}
	### check for max deployed
	set_temp_variable = { temp_ABM_batteries = 0 }
	every_controlled_state = {
		limit = {
			missile_defense_station > 0
		}
		add_to_temp_variable = { temp_ABM_batteries = non_damaged_building_level@missile_defense_station }
	}
	set_temp_variable = { temp_ABM_launcher_total = var_ABM_launcher_tech }
	multiply_temp_variable = { temp_ABM_launcher_total = temp_ABM_batteries }
	set_variable = { var_max_deployed_ABM_land = temp_ABM_launcher_total }
}


### temp for testing, connect to inventory or tech array
set_SAM_display_array = {
	resize_array = { SAM_display_array = 0 }
	resize_array = { ABM_display_array = 0 }
	### SAM0
	add_to_array = { SAM_display_array = 80 }
	### SAM1
	add_to_array = { SAM_display_array = 81 }
	### SAM2
	add_to_array = { SAM_display_array = 82 }
	### SAM3
	add_to_array = { SAM_display_array = 83 }
	### SAM4
	add_to_array = { SAM_display_array = 84 }
	### SAM5
	add_to_array = { SAM_display_array = 85 }
	### SAM6
	add_to_array = { SAM_display_array = 86 }
	### SAM7
	add_to_array = { SAM_display_array = 87 }
}
set_ABM_display_array = {
	resize_array = { SAM_display_array = 0 }
	resize_array = { ABM_display_array = 0 }
	### ABM0
	add_to_array = { ABM_display_array = 90 }
	### ABM1
	add_to_array = { ABM_display_array = 91 }
	### ABM2
	add_to_array = { ABM_display_array = 92 }
	### ABM3
	add_to_array = { ABM_display_array = 93 }
	### ABM4
	add_to_array = { ABM_display_array = 94 }
	### ABM5
	add_to_array = { ABM_display_array = 95 }
	### ABM6
	add_to_array = { ABM_display_array = 96 }
	### ABM7
	add_to_array = { ABM_display_array = 97 }
}

######################################
### air & missile defense on daily ###
######################################

update_deployed_air_missile_defense = {
	update_NSAM_AD_deployed = yes
	update_SAM_AD_deployed = yes
	### needs to be tested
	update_deployed_SAM_MD_sea = yes
	update_deployed_SAM_MD_land = yes
	update_deployed_ABM_sea = yes
	update_deployed_ABM_land = yes

	set_variable = { var_NSAM_AD_lost_loc = var_NSAM_AD_lost }
	set_variable = { var_SAM_AD_lost_loc = var_SAM_AD_lost }
	set_variable = { var_NSAM_MD_lost_loc = var_NSAM_MD_lost }
	set_variable = { var_SAM_MD_lost_loc = var_SAM_MD_lost }
	set_variable = { var_NABM_lost_loc = var_NABM_lost }
	set_variable = { var_ABM_lost_loc = var_ABM_lost }

	add_to_variable = { var_NSAM_AD_lost_monthly = var_NSAM_AD_lost }
	add_to_variable = { var_SAM_AD_lost_monthly = var_SAM_AD_lost }
	add_to_variable = { var_NSAM_MD_lost_monthly = var_NSAM_MD_lost }
	add_to_variable = { var_SAM_MD_lost_monthly = var_SAM_MD_lost }
	add_to_variable = { var_NABM_lost_monthly = var_NABM_lost }
	add_to_variable = { var_ABM_lost_monthly = var_ABM_lost }

	add_to_variable = { var_NSAM_AD_lost_total = var_NSAM_AD_lost }
	add_to_variable = { var_SAM_AD_lost_total = var_SAM_AD_lost }
	add_to_variable = { var_NSAM_MD_lost_total = var_NSAM_MD_lost }
	add_to_variable = { var_SAM_MD_lost_total = var_SAM_MD_lost }
	add_to_variable = { var_NABM_lost_total = var_NABM_lost }
	add_to_variable = { var_ABM_lost_total = var_ABM_lost }

	clear_variable = var_NSAM_AD_lost
	clear_variable = var_SAM_AD_lost
	clear_variable = var_NSAM_MD_lost
	clear_variable = var_SAM_MD_lost
	clear_variable = var_NABM_lost
	clear_variable = var_ABM_lost
}

update_NSAM_AD_deployed = {
	### add all aa ships
	set_variable = { var_AD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_variable = { var_AD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_variable = { var_AD_ships = num_ships_with_type@cruiser }
	add_to_variable = { var_AD_ships = num_ships_with_type@destroyer }
	add_to_variable = { var_AD_ships = num_ships_with_type@frigate }
	add_to_variable = { var_AD_ships = num_ships_with_type@heavy_frigate }

	### multiply launchers
	set_variable = { var_NSAM_AD_launchers = 4 }
	multiply_variable = { var_NSAM_AD_launchers = var_AD_ships }
	### subtract destroyed NSAM
	if = {
		limit = {
			check_variable = { var_NSAM_AD_deployed > var_NSAM_AD_launchers }
		}
		set_temp_variable = { temp_NSAM_lost = var_NSAM_AD_deployed }
		subtract_from_temp_variable = { temp_NSAM_lost = var_NSAM_AD_launchers }
		set_variable = { var_NSAM_AD_lost = temp_NSAM_lost }
		subtract_from_variable = { var_NSAM_AD_deployed = temp_NSAM_lost }
	}

	### auto redeploy
	else_if = {
		limit = {
			check_variable = { var_NSAM_AD_launchers > var_NSAM_AD_deployed }
			check_variable = { var_NSAM_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_NSAM_add = var_NSAM_AD_launchers }
		subtract_from_temp_variable = { temp_NSAM_add = var_NSAM_AD_deployed }
		while_loop_effect = {
			limit = {
				check_variable = { temp_NSAM_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_NSAM_type > temp_NSAM_add }
				# 	check_variable = { missile_inventory_array^var_NSAM_type = temp_NSAM_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_NSAM_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_type > 100 }
						check_variable = { missile_inventory_array^var_NSAM_type = 100 }
					}
				}
				add_to_variable = { var_NSAM_AD_deployed = 100 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_type = 100 }
				subtract_from_temp_variable = { temp_NSAM_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_NSAM_add > 100 }
					check_variable = { temp_NSAM_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_type > 10 }
						check_variable = { missile_inventory_array^var_NSAM_type = 10 }
					}
				}
				add_to_variable = { var_NSAM_AD_deployed = 10 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_type = 10 }
				subtract_from_temp_variable = { temp_NSAM_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_type > 1 }
						check_variable = { missile_inventory_array^var_NSAM_type = 1 }
					}
				}
				add_to_variable = { var_NSAM_AD_deployed = 1 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_type = 1 }
				subtract_from_temp_variable = { temp_NSAM_add = 1 }
			}
			else = {
				set_temp_variable = { temp_NSAM_add = 0 }
			}
		}
	}
	### ratio
	set_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_deployed }
	divide_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_launchers }
	set_variable = { var_fleet_air_defense_system = -0.5 }
	add_to_variable = { var_fleet_air_defense_system = var_NSAM_AD_deploy_ratio }
	### costs
	set_variable = { var_NSAM_AD_costs_total = var_NSAM_AD_costs_unit }
	multiply_variable = { var_NSAM_AD_costs_total = var_NSAM_AD_deployed }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_NSAM_AD_costs_total = 4 }
	}
	calculate_NSAM_AD_gui_vars = yes
}

update_SAM_AD_deployed = {
	### non-damaged batteries
	set_variable = { var_AD_batteries = 0 }
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_variable = { ROOT.var_AD_batteries = non_damaged_building_level@anti_air_building }
	}
	set_variable = { var_SAM_AD_launcher_total = var_SAM_AD_launcher_tech }
	multiply_variable = { var_SAM_AD_launcher_total = var_AD_batteries }
	### subtract destroyed SAM AD
	if = {
		limit = {
			check_variable = { var_SAM_AD_deployed > var_SAM_AD_launcher_total }
		}
		set_temp_variable = { temp_SAM_lost = var_SAM_AD_deployed }
		subtract_from_temp_variable = { temp_SAM_lost = var_SAM_AD_launcher_total }
		set_variable = { var_SAM_AD_lost = temp_SAM_lost }
		subtract_from_variable = { var_SAM_AD_deployed = temp_SAM_lost }
	}
	### auto redeploy
	else_if = {
		limit = {
			check_variable = { var_SAM_AD_launcher_total > var_SAM_AD_deployed }
			check_variable = { var_SAM_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_SAM_add = var_SAM_AD_launcher_total }
		subtract_from_temp_variable = { temp_SAM_add = var_SAM_AD_deployed }
		while_loop_effect = {
			limit = {
				check_variable = { temp_SAM_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_SAM_type > temp_SAM_add }
				# 	check_variable = { missile_inventory_array^var_SAM_type = temp_SAM_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_SAM_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_SAM_type > 100 }
						check_variable = { missile_inventory_array^var_SAM_type = 100 }
					}
				}
				add_to_variable = { var_SAM_AD_deployed = 100 }
				subtract_from_variable = { missile_inventory_array^var_SAM_type = 100 }
				subtract_from_temp_variable = { temp_SAM_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_SAM_add > 100 }
					check_variable = { temp_SAM_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_SAM_type > 10 }
						check_variable = { missile_inventory_array^var_SAM_type = 10 }
					}
				}
				add_to_variable = { var_SAM_AD_deployed = 10 }
				subtract_from_variable = { missile_inventory_array^var_SAM_type = 10 }
				subtract_from_temp_variable = { temp_SAM_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_SAM_type > 1 }
						check_variable = { missile_inventory_array^var_SAM_type = 1 }
					}
				}
				add_to_variable = { var_SAM_AD_deployed = 1 }
				subtract_from_variable = { missile_inventory_array^var_SAM_type = 1 }
				subtract_from_temp_variable = { temp_SAM_add = 1 }
			}
			else = {
				set_temp_variable = { temp_SAM_add = 0 }
			}
		}
	}
	## ratio
	set_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_deployed }
	divide_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_launcher_total }
	multiply_variable = { var_SAM_AD_damage = var_SAM_AD_deploy_ratio }
	multiply_variable = { var_SAM_AD_intercept_chance_total = var_SAM_AD_deploy_ratio }
	### costs
	set_variable = { var_SAM_AD_costs_total = var_SAM_AD_costs_unit }
	multiply_variable = { var_SAM_AD_costs_total = var_SAM_AD_deployed }
	if = {
		limit = {
			has_war = yes
		}
		multiply_variable = { var_SAM_AD_costs_total = 4 }
	}
	calculate_SAM_AD_gui_vars = yes
}

update_deployed_SAM_MD_sea = {
	### add all aa ships
	set_temp_variable = { temp_MD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_MD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@heavy_frigate }

	### multiply launchers
	set_temp_variable = { temp_NSAM_MD_launcher_total = var_ship_SAM_launcher_tech }
	multiply_temp_variable = { temp_NSAM_MD_launcher_total = temp_MD_ships }
	### subtract destroyed NSAM
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_sea > temp_NSAM_MD_launcher_total }
		}
		set_temp_variable = { temp_NSAM_MD_lost = var_deployed_SAM_MD_sea }
		subtract_from_temp_variable = { temp_NSAM_MD_lost = temp_NSAM_MD_launcher_total }
		set_variable = { var_NSAM_MD_lost = temp_NSAM_MD_lost }
		subtract_from_variable = { var_deployed_SAM_MD_sea = temp_NSAM_MD_lost }
	}
	### auto redeploy
	else_if = {
		limit = {
			check_variable = { temp_NSAM_MD_launcher_total > var_deployed_SAM_MD_sea }
			check_variable = { var_NSAM_MD_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_NSAM_MD_add = temp_NSAM_MD_launcher_total }
		subtract_from_temp_variable = { temp_NSAM_MD_add = var_deployed_SAM_MD_sea }
		while_loop_effect = {
			limit = {
				check_variable = { temp_NSAM_MD_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_NSAM_MD_type > temp_NSAM_MD_add }
				# 	check_variable = { missile_inventory_array^var_NSAM_MD_type = temp_NSAM_MD_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_NSAM_MD_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_MD_type > 100 }
						check_variable = { missile_inventory_array^var_NSAM_MD_type = 100 }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_sea = 100 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_MD_type = 100 }
				subtract_from_temp_variable = { temp_SAM_MD_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_NSAM_MD_add > 100 }
					check_variable = { temp_NSAM_MD_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_MD_type > 10 }
						check_variable = { missile_inventory_array^var_NSAM_MD_type = 10 }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_sea = 10 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_MD_type = 10 }
				subtract_from_temp_variable = { temp_NSAM_MD_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_NSAM_MD_type > temp_NSAM_MD_add }
						check_variable = { missile_inventory_array^var_NSAM_MD_type = temp_NSAM_MD_add }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_sea = 1 }
				subtract_from_variable = { missile_inventory_array^var_NSAM_MD_type = 1 }
				subtract_from_temp_variable = { temp_NSAM_MD_add = 1 }
			}
			else = {
				set_temp_variable = { temp_NSAM_MD_add = 0 }
			}
		}
	}
	calculate_SAM_MD_sea_gui_vars = yes
}

update_deployed_SAM_MD_land = {
	### check total launcher
	set_temp_variable = { temp_MD_batteries = 0 }
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_temp_variable = { temp_MD_batteries = non_damaged_building_level@anti_air_building }
	}
	set_temp_variable = { temp_SAM_MD_launcher_total = var_SAM_launcher_tech }
	multiply_temp_variable = { temp_SAM_MD_launcher_total = temp_MD_batteries }
	### subtract destroyed SAM MD
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_land > temp_SAM_MD_launcher_total }
		}
		set_temp_variable = { temp_SAM_MD_lost = var_deployed_SAM_MD_land }
		subtract_from_temp_variable = { temp_SAM_MD_lost = temp_SAM_MD_launcher_total }
		set_variable = { var_SAM_MD_lost = temp_SAM_MD_lost }
		subtract_from_variable = { var_deployed_SAM_MD_land = temp_SAM_MD_lost }
	}
	### auto redeploy
	if = {
		limit = {
			check_variable = { temp_SAM_MD_launcher_total > var_deployed_SAM_MD_land }
			check_variable = { var_SAM_MD_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_SAM_MD_add = temp_SAM_MD_launcher_total }
		subtract_from_temp_variable = { temp_SAM_MD_add = var_deployed_SAM_MD_land }
		while_loop_effect = {
			limit = {
				check_variable = { temp_SAM_MD_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_SAM_MD_type > temp_SAM_MD_add }
				# 	check_variable = { missile_inventory_array^var_SAM_MD_type = temp_SAM_MD_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_SAM_MD_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_SAM_MD_type > 100 }
						check_variable = { missile_inventory_array^var_SAM_MD_type = 100 }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_land = 100 }
				subtract_from_variable = { missile_inventory_array^var_SAM_MD_type = 100 }
				subtract_from_temp_variable = { temp_SAM_MD_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_SAM_MD_add > 100 }
					check_variable = { temp_SAM_MD_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_SAM_MD_type > 10 }
						check_variable = { missile_inventory_array^var_SAM_MD_type = 10 }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_land = 10 }
				subtract_from_variable = { missile_inventory_array^var_SAM_MD_type = 10 }
				subtract_from_temp_variable = { temp_SAM_MD_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_SAM_MD_type > 1 }
						check_variable = { missile_inventory_array^var_SAM_MD_type = 1 }
					}
				}
				add_to_variable = { var_deployed_SAM_MD_land = 1 }
				subtract_from_variable = { missile_inventory_array^var_SAM_MD_type = 1 }
				subtract_from_temp_variable = { temp_SAM_MD_add = 1 }
			}
			else = {
				set_temp_variable = { temp_SAM_MD_add = 0 }
			}
		}
	}
	calculate_SAM_MD_land_gui_vars = yes
}

update_deployed_ABM_sea = {
	### add all aa ships
	set_temp_variable = { temp_MD_ships = 0 }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_MD_ships = num_ships_with_type@stealth_destroyer }
	}
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_MD_ships = num_ships_with_type@heavy_frigate }

	### multiply launchers
	set_temp_variable = { temp_NABM_launcher_total = var_ship_ABM_launcher_tech }
	multiply_temp_variable = { temp_NABM_launcher_total = temp_MD_ships }
	### subtract destroyed NABM
	if = {
		limit = {
			check_variable = { var_deployed_ABM_sea > temp_NABM_launcher_total }
		}
		set_temp_variable = { temp_NABM_lost = var_deployed_ABM_sea }
		subtract_from_temp_variable = { temp_NABM_lost = temp_NABM_launcher_total }
		set_variable = { var_NABM_lost = temp_NABM_lost }
		subtract_from_variable = { var_deployed_ABM_sea = temp_NABM_lost }
	}
	### auto redeploy
	else_if = {
		limit = {
			check_variable = { temp_NABM_launcher_total > var_deployed_ABM_sea }
			check_variable = { var_NABM_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_NABM_add = temp_NABM_launcher_total }
		subtract_from_temp_variable = { temp_NABM_add = var_deployed_ABM_sea }
		while_loop_effect = {
			limit = {
				check_variable = { temp_NABM_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_NABM_type > temp_NABM_add }
				# 	check_variable = { missile_inventory_array^var_NABM_type = temp_NABM_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_NABM_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_NABM_type > 100 }
						check_variable = { missile_inventory_array^var_NABM_type = 100 }
					}
				}
				add_to_variable = { var_deployed_ABM_sea = 100 }
				subtract_from_variable = { missile_inventory_array^var_NABM_type = 100 }
				subtract_from_temp_variable = { temp_NABM_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_NABM_add > 100 }
					check_variable = { temp_NABM_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_NABM_type > 10 }
						check_variable = { missile_inventory_array^var_NABM_type = 10 }
					}
				}
				add_to_variable = { var_deployed_ABM_sea = 10 }
				subtract_from_variable = { missile_inventory_array^var_NABM_type = 10 }
				subtract_from_temp_variable = { temp_NABM_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_NABM_type > 1 }
						check_variable = { missile_inventory_array^var_NABM_type = 1 }
					}
				}
				add_to_variable = { var_deployed_ABM_sea = 1 }
				subtract_from_variable = { missile_inventory_array^var_NABM_type = 1 }
				subtract_from_temp_variable = { temp_NABM_add = 1 }
			}
			else = {
				set_temp_variable = { temp_NABM_add = 0 }
			}
		}
	}
	calculate_ABM_sea_gui_vars = yes
}

update_deployed_ABM_land = {
	### check total launcher
	set_temp_variable = { temp_ABM_batteries = 0 }
	every_controlled_state = {
		limit = {
			missile_defense_station > 0
		}
		add_to_temp_variable = { temp_ABM_batteries = non_damaged_building_level@missile_defense_station }
	}
	set_temp_variable = { temp_ABM_launcher_total = var_ABM_launcher_tech }
	multiply_temp_variable = { temp_ABM_launcher_total = temp_ABM_batteries }
	### subtract destroyed ABM
	if = {
		limit = {
			check_variable = { var_deployed_ABM_land > temp_ABM_launcher_total }
		}
		set_temp_variable = { temp_ABM_lost = var_deployed_ABM_land }
		subtract_from_temp_variable = { temp_ABM_lost = temp_ABM_launcher_total }
		set_variable = { var_ABM_lost = temp_ABM_lost }
		subtract_from_variable = { var_deployed_ABM_land = temp_ABM_lost }
	}
	### auto redeploy
	if = {
		limit = {
			check_variable = { temp_ABM_launcher_total > var_deployed_ABM_land }
			check_variable = { var_ABM_auto_redeploy = 2 }
		}
		set_temp_variable = { temp_ABM_add = temp_ABM_launcher_total }
		subtract_from_temp_variable = { temp_ABM_add = var_deployed_ABM_land }
		while_loop_effect = {
			limit = {
				check_variable = { temp_ABM_add > 0 }
				# OR = {
				# 	check_variable = { missile_inventory_array^var_ABM_type > temp_ABM_add }
				# 	check_variable = { missile_inventory_array^var_ABM_type = temp_ABM_add }
				# }
			}
			if = {
				limit = {
					check_variable = { temp_ABM_add > 1000 }
					OR = {
						check_variable = { missile_inventory_array^var_ABM_type > 100 }
						check_variable = { missile_inventory_array^var_ABM_type = 100 }
					}
				}
				add_to_variable = { var_deployed_ABM_land = 100 }
				subtract_from_variable = { missile_inventory_array^var_ABM_type = 100 }
				subtract_from_temp_variable = { temp_ABM_add = 100 }
			}
			else_if = {
				limit = {
					check_variable = { temp_ABM_add > 100 }
					check_variable = { temp_ABM_add < 1001 }
					OR = {
						check_variable = { missile_inventory_array^var_ABM_type > 10 }
						check_variable = { missile_inventory_array^var_ABM_type = 10 }
					}
				}
				add_to_variable = { var_deployed_ABM_land = 10 }
				subtract_from_variable = { missile_inventory_array^var_ABM_type = 10 }
				subtract_from_temp_variable = { temp_ABM_add = 10 }
			}
			else_if = {
				limit = {
					OR = {
						check_variable = { missile_inventory_array^var_ABM_type > 1 }
						check_variable = { missile_inventory_array^var_ABM_type = 1 }
					}
				}
				add_to_variable = { var_deployed_ABM_land = 1 }
				subtract_from_variable = { missile_inventory_array^var_ABM_type = 1 }
				subtract_from_temp_variable = { temp_ABM_add = 1 }
			}
			else = {
				set_temp_variable = { temp_ABM_add = 0 }
			}
		}
	}
	calculate_ABM_land_gui_vars = yes
}

######################
### satellites gui ###
######################

set_satellites_gui = {
	set_GNSS_satellites = yes
	set_COM_satellites = yes
	set_SPY_satellites = yes
	set_KILL_satellites = yes
	set_RODS_satellites = yes
}

set_GNSS_satellites = {
	set_variable = { var_GNSS_sat_total = 0 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^0 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^1 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^2 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^3 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^4 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^5 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^6 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^7 }
}

set_COM_satellites = {
	set_variable = { var_COM_sat_total = 0 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^0 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^1 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^2 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^3 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^4 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^5 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^6 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^7 }
}

set_SPY_satellites = {
	set_variable = { var_SPY_sat_total = 0 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^0 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^1 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^2 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^3 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^4 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^5 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^6 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^7 }
}

set_KILL_satellites = {
	set_variable = { var_KILL_sat_total = 0 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^0 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^1 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^2 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^3 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^4 }
	add_to_variable = { var_KILL_sat_total = KILL_satellite_array^5 }
}

set_RODS_satellites = {
	set_variable = { var_RODS_sat_total = 0 }
	add_to_variable = { var_RODS_sat_total = RODS_satellite_array^0 }
	add_to_variable = { var_RODS_sat_total = RODS_satellite_array^1 }
	add_to_variable = { var_RODS_sat_total = RODS_satellite_array^2 }
}

### satellite systems

set_GNSS_mil_systems = {
	clear_array = GNSS_mil_systems_array
	add_to_array = { GNSS_mil_systems_array = 0 }
	add_to_array = { GNSS_mil_systems_array = 1 }
	add_to_array = { GNSS_mil_systems_array = 2 }
	add_to_array = { GNSS_mil_systems_array = 3 }
	add_to_array = { GNSS_mil_systems_array = 4 }
	add_to_array = { GNSS_mil_systems_array = 5 }
	add_to_array = { GNSS_mil_systems_array = 6 }
	add_to_array = { GNSS_mil_systems_array = 7 }
}
set_GNSS_civ_systems = {
	clear_array = GNSS_civ_systems_array
	add_to_array = { GNSS_civ_systems_array = 0 }
	add_to_array = { GNSS_civ_systems_array = 1 }
	add_to_array = { GNSS_civ_systems_array = 2 }
	add_to_array = { GNSS_civ_systems_array = 3 }
	add_to_array = { GNSS_civ_systems_array = 4 }
	add_to_array = { GNSS_civ_systems_array = 5 }
	add_to_array = { GNSS_civ_systems_array = 6 }
	add_to_array = { GNSS_civ_systems_array = 7 }
}
set_COM_mil_systems = {
	clear_array = COM_mil_systems_array
	add_to_array = { COM_mil_systems_array = 0 }
	add_to_array = { COM_mil_systems_array = 1 }
	add_to_array = { COM_mil_systems_array = 2 }
	add_to_array = { COM_mil_systems_array = 3 }
	add_to_array = { COM_mil_systems_array = 4 }
	add_to_array = { COM_mil_systems_array = 5 }
	add_to_array = { COM_mil_systems_array = 6 }
	add_to_array = { COM_mil_systems_array = 7 }
}
set_COM_civ_systems = {
	clear_array = COM_civ_systems_array
	add_to_array = { COM_civ_systems_array = 0 }
	add_to_array = { COM_civ_systems_array = 1 }
	add_to_array = { COM_civ_systems_array = 2 }
	add_to_array = { COM_civ_systems_array = 3 }
	add_to_array = { COM_civ_systems_array = 4 }
	add_to_array = { COM_civ_systems_array = 5 }
	add_to_array = { COM_civ_systems_array = 6 }
	add_to_array = { COM_civ_systems_array = 7 }
}
set_SPY_mil_systems = {
	clear_array = SPY_mil_systems_array
	add_to_array = { SPY_mil_systems_array = 0 }
	add_to_array = { SPY_mil_systems_array = 1 }
	add_to_array = { SPY_mil_systems_array = 2 }
	add_to_array = { SPY_mil_systems_array = 3 }
	add_to_array = { SPY_mil_systems_array = 4 }
	add_to_array = { SPY_mil_systems_array = 5 }
	add_to_array = { SPY_mil_systems_array = 6 }
	add_to_array = { SPY_mil_systems_array = 7 }
}
set_SPY_civ_systems = {
	clear_array = SPY_civ_systems_array
	add_to_array = { SPY_civ_systems_array = 0 }
	add_to_array = { SPY_civ_systems_array = 1 }
	add_to_array = { SPY_civ_systems_array = 2 }
	add_to_array = { SPY_civ_systems_array = 3 }
	add_to_array = { SPY_civ_systems_array = 4 }
	add_to_array = { SPY_civ_systems_array = 5 }
	add_to_array = { SPY_civ_systems_array = 6 }
	add_to_array = { SPY_civ_systems_array = 7 }
}

set_COM_sat_receiver_tech_array = {
	add_to_array = { COM_sat_receiver_tech_array = 10 }
	add_to_array = { COM_sat_receiver_tech_array = 20 }
	add_to_array = { COM_sat_receiver_tech_array = 30 }
	add_to_array = { COM_sat_receiver_tech_array = 40 }
	add_to_array = { COM_sat_receiver_tech_array = 50 }
	add_to_array = { COM_sat_receiver_tech_array = 60 }
	add_to_array = { COM_sat_receiver_tech_array = 70 }
	add_to_array = { COM_sat_receiver_tech_array = 80 }
}

update_sat_systems_stats = {
	check_sat_systems_min_sat_num = yes
	set_satellites_gui = yes
	update_GNSS_system_stats = yes
	update_COM_system_stats = yes
	update_SPY_system_stats = yes
	calculate_GNSS_mil_gui_vars = yes
	calculate_GNSS_civ_gui_vars = yes
	calculate_COM_mil_gui_vars = yes
	calculate_COM_civ_gui_vars = yes
	calculate_SPY_mil_gui_vars = yes
	calculate_SPY_civ_gui_vars = yes
	add_access_GNSS_mil_vars = yes
	add_access_GNSS_civ_vars = yes
	add_access_COM_mil_vars = yes
	add_access_COM_civ_vars = yes
	add_access_SPY_mil_vars = yes
	add_access_SPY_civ_vars = yes
	force_update_dynamic_modifier = yes
}

check_sat_systems_min_sat_num = {
	# meta_effect = {
	# 	text = {
			#GNSS
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^var_GNSS_mil_system_idx < global.GNSS_sat_system_min_array^var_GNSS_mil_system_idx
					}
					check_variable = {
						var_GNSS_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_GNSS_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.2 } }
			}
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^var_GNSS_civ_system_idx < global.GNSS_sat_system_min_array^var_GNSS_civ_system_idx
					}
					check_variable = {
						var_GNSS_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_GNSS_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.3 } }
			}
			#COM
			if = {
				limit = {
					check_variable = {
						COM_satellite_array^var_COM_mil_system_idx < global.COM_sat_system_min_array^var_COM_mil_system_idx
					}
					check_variable = {
						var_COM_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_COM_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.4 } }
			}
			if = {
				limit = {
					check_variable = {
						COM_satellite_array^var_COM_civ_system_idx < global.COM_sat_system_min_array^var_COM_civ_system_idx
					}
					check_variable = {
						var_COM_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_COM_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.5 } }
			}
			#SPY
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^var_SPY_mil_system_idx < global.SPY_sat_system_min_array^var_SPY_mil_system_idx
					}
					check_variable = {
						var_SPY_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_SPY_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.6 } }
			}
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^var_SPY_civ_system_idx < global.SPY_sat_system_min_array^var_SPY_civ_system_idx
					}
					check_variable = {
						var_SPY_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_SPY_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.7 } }
			}
	# 	}
	# 	GNSS_mil_system_ID = "[?var_GNSS_mil_system_idx]"
	# 	GNSS_civ_system_ID = "[?var_GNSS_civ_system_idx]"
	# 	COM_mil_system_ID = "[?var_COM_mil_system_idx]"
	# 	COM_civ_system_ID = "[?var_COM_civ_system_idx]"
	# 	SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
	# 	SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	# }
}

update_GNSS_system_stats = {
	# meta_effect = {
	# 	text = {
			### GNSS mil system
			set_variable = { var_GNSS_mil_sat_system_num = GNSS_satellite_array^var_GNSS_mil_system_idx }
			# if = {
			# 	limit = {
			# 		check_variable = {
			# 			GNSS_satellite_array^[GNSS_mil_system_ID] = GNSS_satellite_array^[GNSS_civ_system_ID]
			# 		}
			# 	}
			# 	multiply_variable = { var_GNSS_mil_sat_system_num = 0.5 }
			# 	subtract_from_variable = { var_GNSS_mil_sat_system_num = 0.5 }
			# 	round_variable = var_GNSS_mil_sat_system_num
			# 	if = {
			# 		limit = {
			# 			check_variable = {
			# 				var_GNSS_mil_sat_system_num < 0
			# 			}
			# 		}
			# 		set_variable = { var_GNSS_mil_sat_system_num = 0 }
			# 	}
			# }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_sat_system_num > var_GNSS_mil_sat_system_max
					}
				}
				set_variable = { var_GNSS_mil_sat_system_num = var_GNSS_mil_sat_system_max }
				set_variable = { var_GNSS_mil_coverage = 1.0 }
				set_variable = { var_GNSS_mil_SBAS_num = 0 }
				set_variable = { var_GNSS_mil_SBAS_bonus = 0 }
			}
			else = {
				set_variable = { var_GNSS_mil_coverage = var_GNSS_mil_sat_system_num }
				divide_variable = { var_GNSS_mil_coverage = var_GNSS_mil_sat_system_max }
				update_GNSS_SBAS = yes
			}
			set_variable = { var_GNSS_mil_sat_system_bonus = var_GNSS_mil_coverage }
			add_to_variable = { var_GNSS_mil_sat_system_bonus = var_GNSS_mil_SBAS_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_sat_system_bonus < 0
					}
				}
				set_variable = { var_GNSS_mil_sat_system_bonus = 0 }
			}
			### GNSS civ system
			set_variable = { var_GNSS_civ_sat_system_num = GNSS_satellite_array^var_GNSS_civ_system_idx }
			# if = {
			# 	limit = {
			# 		check_variable = {
			# 			GNSS_satellite_array^[GNSS_mil_system_ID] = GNSS_satellite_array^[GNSS_civ_system_ID]
			# 		}
			# 	}
			# 	multiply_variable = { var_GNSS_civ_sat_system_num = 0.5 }
			# 	subtract_from_variable = { var_GNSS_civ_sat_system_num = 0.5 }
			# 	round_variable = var_GNSS_civ_sat_system_num
			# 	if = {
			# 		limit = {
			# 			check_variable = {
			# 				var_GNSS_civ_sat_system_num < 0
			# 			}
			# 		}
			# 		set_variable = { var_GNSS_civ_sat_system_num = 0 }
			# 	}
			# }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_sat_system_num > var_GNSS_civ_sat_system_max
					}
				}
				set_variable = { var_GNSS_civ_sat_system_num = var_GNSS_civ_sat_system_max }
				set_variable = { var_GNSS_civ_coverage = 1.0 }
				set_variable = { var_GNSS_civ_SBAS_num = 0 }
				set_variable = { var_GNSS_civ_SBAS_bonus = 0 }
			}
			else = {
				set_variable = { var_GNSS_civ_coverage = var_GNSS_civ_sat_system_num }
				divide_variable = { var_GNSS_civ_coverage = var_GNSS_civ_sat_system_max }
				update_GNSS_SBAS = yes
			}
			set_variable = { var_GNSS_civ_sat_system_bonus = var_GNSS_civ_coverage }
			add_to_variable = { var_GNSS_civ_sat_system_bonus = var_GNSS_civ_SBAS_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_sat_system_bonus < 0
					}
				}
				set_variable = { var_GNSS_civ_sat_system_bonus = 0 }
			}
	# 	}
	# 	GNSS_mil_system_ID = "[?var_GNSS_mil_system_idx]"
	# 	GNSS_civ_system_ID = "[?var_GNSS_civ_system_idx]"
	# }
}

update_GNSS_SBAS = {
	### GNSS mil
	set_variable = { var_GNSS_mil_SBAS_num = var_GNSS_sat_total }
	subtract_from_variable = { var_GNSS_mil_SBAS_num = var_GNSS_mil_sat_system_num }
	#subtract_from_variable = { var_GNSS_mil_SBAS_num = var_GNSS_civ_sat_system_num }
	set_variable = { var_GNSS_mil_SBAS_bonus = var_GNSS_mil_SBAS_num }
	divide_variable = { var_GNSS_mil_SBAS_bonus = 100 }
	set_temp_variable = { temp1 = var_GNSS_mil_coverage }
	set_temp_variable = { temp2 = 1 }
	subtract_from_temp_variable = { temp2 = temp1 }
	if = {
		limit = {
			check_variable = {
				temp2 < var_GNSS_mil_SBAS_bonus
			}
		}
		set_variable = { var_GNSS_mil_SBAS_bonus = temp2 }
	}
	###GNSS civ
	set_variable = { var_GNSS_civ_SBAS_num = var_GNSS_sat_total }
	subtract_from_variable = { var_GNSS_civ_SBAS_num = var_GNSS_civ_sat_system_num }
	#subtract_from_variable = { var_GNSS_civ_SBAS_num = var_GNSS_mil_sat_system_num }
	set_variable = { var_GNSS_civ_SBAS_bonus = var_GNSS_civ_SBAS_num }
	divide_variable = { var_GNSS_civ_SBAS_bonus = 100 }
	set_temp_variable = { temp1 = var_GNSS_civ_coverage }
	set_temp_variable = { temp2 = 1 }
	subtract_from_temp_variable = { temp2 = temp1 }
	if = {
		limit = {
			check_variable = {
				temp2 < var_GNSS_civ_SBAS_bonus
			}
		}
		set_variable = { var_GNSS_civ_SBAS_bonus = temp2 }
	}
}

update_COM_system_stats = {
	# meta_effect = {
	# 	text = {
			set_variable = { var_COM_mil_sat_system_num = 0 }
			set_variable = { var_COM_mil_receiver_cap = 0 }
			set_variable = { var_COM_civ_sat_system_num = 0 }
			set_variable = { var_COM_civ_receiver_cap = 0 }
			for_each_loop = {
				array = COM_satellite_array
				### COM mil system
				if = {
					limit = {
						OR = {
							check_variable = { i = var_COM_mil_system_idx }
							check_variable = { i > var_COM_mil_system_idx }
						}
					}
				# 	if = {
				# 		limit = {
				# 			OR = {
				# 				check_variable = { i = [COM_civ_system_ID] }
				# 				check_variable = { i > [COM_civ_system_ID] }
				# 			}
				# 		}
				# 		set_temp_variable = { temp1 = COM_satellite_array^i }
				# 		multiply_temp_variable = { temp1 = 0.5 }
				# 		subtract_from_temp_variable = { temp1 = 0.5 }
				# 		round_temp_variable = temp1
				# 		add_to_variable = { var_COM_mil_sat_system_num = temp1 }
				# 		#
				# 		multiply_temp_variable = { temp1 = COM_sat_receiver_tech_array^i }
				# 		add_to_variable = { var_COM_mil_receiver_cap = temp1 }
				# 	}
				# 	else = {
						add_to_variable = { var_COM_mil_sat_system_num = COM_satellite_array^i }
						set_temp_variable = { temp1 = COM_satellite_array^i }
						multiply_temp_variable = { temp1 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_mil_receiver_cap = temp1 }
				# 	}
				}
				### COM civ system
				if = {
					limit = {
						OR = {
							check_variable = { i = var_COM_civ_system_idx }
							check_variable = { i > var_COM_civ_system_idx }
						}
					}
				# 	if = {
				# 		limit = {
				# 			OR = {
				# 				check_variable = { i = [COM_mil_system_ID] }
				# 				check_variable = { i > [COM_mil_system_ID] }
				# 			}
				# 		}
				# 		set_temp_variable = { temp2 = COM_satellite_array^i }
				# 		multiply_temp_variable = { temp2 = 0.5 }
				# 		subtract_from_temp_variable = { temp2 = 0.5 }
				# 		round_temp_variable = temp2
				# 		add_to_variable = { var_COM_civ_sat_system_num = temp1 }
				# 		#
				# 		multiply_temp_variable = { temp2 = COM_sat_receiver_tech_array^i }
				# 		add_to_variable = { var_COM_civ_receiver_cap = temp2 }
				# 	}
				# 	else = {
						add_to_variable = { var_COM_civ_sat_system_num = COM_satellite_array^i }
						set_temp_variable = { temp2 = COM_satellite_array^i }
						multiply_temp_variable = { temp2 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_civ_receiver_cap = temp2 }
				# 	}
				}
			}
			if = {
				limit = {
					check_variable = {
						var_COM_mil_sat_system_num > var_COM_mil_sat_system_max
					}
				}
				#set_variable = { var_COM_mil_sat_system_num = var_COM_mil_sat_system_max }
				set_variable = { var_COM_mil_coverage = 1.0 }
			}
			else = {
				set_variable = { var_COM_mil_coverage = var_COM_mil_sat_system_num }
				divide_variable = { var_COM_mil_coverage = var_COM_mil_sat_system_max }
			}
			set_variable = { var_COM_mil_receiver_num = num_battalions }
			add_to_variable = { var_COM_mil_receiver_num = num_ships }
			add_to_variable = { var_COM_mil_receiver_num = num_deployed_planes }
			add_treaty_COM_mil_receiver_num = yes
			set_variable = { var_sat_network_traffic_mil = var_COM_mil_receiver_num }
			divide_variable = { var_sat_network_traffic_mil = var_COM_mil_receiver_cap }
			set_variable = { var_COM_mil_sat_system_bonus = var_COM_mil_coverage }
			if = {
				limit = {
					check_variable = {
						var_sat_network_traffic_mil > 1
					}
				}
				set_temp_variable = { temp3 = var_sat_network_traffic_mil }
				subtract_from_temp_variable = { temp3 = 1 }
				subtract_from_variable = { var_COM_mil_sat_system_bonus = temp3 }
				if = {
					limit = {
						check_variable = {
							var_COM_mil_sat_system_bonus < 0
						}
					}
					set_variable = { var_COM_mil_sat_system_bonus = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_COM_civ_sat_system_num > var_COM_civ_sat_system_max
					}
				}
				#set_variable = { var_COM_civ_sat_system_num = var_COM_civ_sat_system_max }
				set_variable = { var_COM_civ_coverage = 1.0 }
			}
			else = {
				set_variable = { var_COM_civ_coverage = var_COM_civ_sat_system_num }
				divide_variable = { var_COM_civ_coverage = var_COM_civ_sat_system_max }
			}
			set_variable = { var_COM_civ_receiver_num = num_controlled_states }
			multiply_variable = { var_COM_civ_receiver_num = 100 }
			add_treaty_COM_civ_receiver_num = yes
			set_variable = { var_sat_network_traffic_civ = var_COM_civ_receiver_num }
			divide_variable = { var_sat_network_traffic_civ = var_COM_civ_receiver_cap }
			set_variable = { var_COM_civ_sat_system_bonus = var_COM_civ_coverage }
			if = {
				limit = {
					check_variable = {
						var_sat_network_traffic_civ > 1
					}
				}
				set_temp_variable = { temp4 = var_sat_network_traffic_civ }
				subtract_from_temp_variable = { temp4 = 1 }
				subtract_from_variable = { var_COM_civ_sat_system_bonus = temp4 }
				if = {
					limit = {
						check_variable = {
							var_COM_civ_sat_system_bonus < 0
						}
					}
					set_variable = { var_COM_civ_sat_system_bonus = 0 }
				}
			}
	# 	}
	# 	COM_mil_system_ID = "[?var_COM_mil_system_idx]"
	# 	COM_civ_system_ID = "[?var_COM_civ_system_idx]"
	# }
}

### receiver from treaties (access granted)
add_treaty_COM_mil_receiver_num = {
	set_variable = { var_treaty_COM_mil_receiver_num = 0 }
	for_each_scope_loop = {
	#for_each_loop = {
		array = COM_mil_treaty_array
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_battalions }
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_ships }
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_deployed_planes }
	}
	add_to_variable = { var_COM_mil_receiver_num = var_treaty_COM_mil_receiver_num }
}
add_treaty_COM_civ_receiver_num = {
	set_variable = { var_treaty_COM_civ_receiver_num = 0 }
	for_each_scope_loop = {
	#for_each_loop = {
		array = COM_civ_treaty_array
		set_variable = { PREV.var_treaty_COM_civ_receiver_num = THIS.num_controlled_states }
		multiply_variable = { PREV.var_treaty_COM_civ_receiver_num = 100 }
	}
	add_to_variable = { var_COM_civ_receiver_num = var_treaty_COM_civ_receiver_num }
}
###

update_SPY_system_stats = {
	# meta_effect = {
	# 	text = {
			### SPY mil system
			set_variable = { var_SPY_mil_sat_system_num = SPY_satellite_array^var_SPY_mil_system_idx }
			# if = {
			# 	limit = {
			# 		check_variable = {
			# 			SPY_satellite_array^[SPY_mil_system_ID] = SPY_satellite_array^[SPY_civ_system_ID]
			# 		}
			# 	}
			# 	multiply_variable = { var_SPY_mil_sat_system_num = 0.5 }
			# 	subtract_from_variable = { var_SPY_mil_sat_system_num = 0.5 }
			# 	round_variable = var_SPY_mil_sat_system_num
			# 	if = {
			# 		limit = {
			# 			check_variable = {
			# 				var_SPY_mil_sat_system_num < 0
			# 			}
			# 		}
			# 		set_variable = { var_SPY_mil_sat_system_num = 0 }
			# 	}
			# }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_sat_system_num > var_SPY_mil_sat_system_max
					}
				}
				set_variable = { var_SPY_mil_sat_system_num = var_SPY_mil_sat_system_max }
				set_variable = { var_SPY_mil_coverage = 1.0 }
			}
			else = {
				set_variable = { var_SPY_mil_coverage = var_SPY_mil_sat_system_num }
				divide_variable = { var_SPY_mil_coverage = var_SPY_mil_sat_system_max }
			}
			set_variable = { var_SPY_mil_sat_system_bonus = var_SPY_mil_coverage }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_sat_system_bonus < 0
					}
				}
				set_variable = { var_SPY_mil_sat_system_bonus = 0 }
			}
			update_SPY_mission_num = yes
			### SPY civ system
			set_variable = { var_SPY_civ_sat_system_num = SPY_satellite_array^var_SPY_civ_system_idx }
			# if = {
			# 	limit = {
			# 		check_variable = {
			# 			SPY_satellite_array^[SPY_mil_system_ID] = SPY_satellite_array^[SPY_civ_system_ID]
			# 		}
			# 	}
			# 	multiply_variable = { var_SPY_civ_sat_system_num = 0.5 }
			# 	subtract_from_variable = { var_SPY_civ_sat_system_num = 0.5 }
			# 	round_variable = var_SPY_civ_sat_system_num
			# 	if = {
			# 		limit = {
			# 			check_variable = {
			# 				var_SPY_civ_sat_system_num < 0
			# 			}
			# 		}
			# 		set_variable = { var_SPY_civ_sat_system_num = 0 }
			# 	}
			# }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_sat_system_num > var_SPY_civ_sat_system_max
					}
				}
				set_variable = { var_SPY_civ_sat_system_num = var_SPY_civ_sat_system_max }
				set_variable = { var_SPY_civ_coverage = 1.0 }
			}
			else = {
				set_variable = { var_SPY_civ_coverage = var_SPY_civ_sat_system_num }
				divide_variable = { var_SPY_civ_coverage = var_SPY_civ_sat_system_max }
			}
			set_variable = { var_SPY_civ_sat_system_bonus = var_SPY_civ_coverage }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_sat_system_bonus < 0
					}
				}
				set_variable = { var_SPY_civ_sat_system_bonus = 0 }
			}
			update_SPY_mission_num = yes
	# 	}
	# 	SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
	# 	SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	# }
}

update_SPY_mission_num = {
	# var:orbit_selected_TAG = {
	# 	set_variable = { ROOT.var_SPY_mission_num_gui = num_controlled_states }
	# }
	#set_variable = { var_SPY_mission_num_gui = temp_spy_mission_num_states }
	set_variable = { var_SPY_mission_active_sat = 0 }
	for_each_loop = {
		array = ROOT.spy_mission_sat_num_array
		add_to_variable = { var_SPY_mission_active_sat = v }
	}
	set_variable = { var_SPY_mission_num_total = var_SPY_sat_total }
	subtract_from_variable = { var_SPY_mission_num_total = var_SPY_mil_sat_system_num }
	if = {
		limit = {
			NOT = { check_variable = { var_SPY_mil_system_idx = var_SPY_civ_system_idx } }
		}
		subtract_from_variable = { var_SPY_mission_num_total = var_SPY_civ_sat_system_num }
	}
	#subtract_from_variable = { var_SPY_mission_num_total = var_SPY_civ_sat_system_num }
	set_variable = { var_SPY_mission_num_available = var_SPY_mission_num_total }
	subtract_from_variable = { var_SPY_mission_num_available = var_SPY_mission_active_sat }
	update_SPY_mission_start_button = yes
}

update_SPY_mission_start_button = {
	set_variable = { ROOT.var_SPY_mission_intel_ratio = ROOT.var_SPY_mission_num_gui }
	var:orbit_selected_TAG = {
		#set_variable = { ROOT.var_SPY_mission_num_gui = num_controlled_states }
		divide_variable = { ROOT.var_SPY_mission_intel_ratio = ROOT.var_SPY_mission_num_gui }
	}
	set_variable = { ROOT.var_SPY_mission_intel_add = ROOT.var_SPY_mission_intel_ratio }
	multiply_variable = { ROOT.var_SPY_mission_intel_add = 30 }
}

update_SPY_mission_plus_minus_button = {
	#set_variable = { ROOT.var_SPY_mission_intel_ratio = ROOT.var_SPY_mission_num_gui }
	var:orbit_selected_TAG = {
		set_variable = { ROOT.var_SPY_mission_intel_ratio = ROOT.var_SPY_mission_num_gui }
		divide_variable = { ROOT.var_SPY_mission_intel_ratio = num_controlled_states }
	}
	set_variable = { ROOT.var_SPY_mission_intel_add = ROOT.var_SPY_mission_intel_ratio }
	multiply_variable = { ROOT.var_SPY_mission_intel_add = 30 }
}

calculate_GNSS_mil_gui_vars = {

	set_variable = { var_GNSS_mil_army_speed_factor_base = global.GNSS_mil_army_speed_factor_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_army_speed_factor_min = global.GNSS_mil_army_speed_factor_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_army_speed_factor_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_army_speed_factor_base < var_GNSS_mil_army_speed_factor_min
			}
		}
		set_variable = { var_GNSS_mil_army_speed_factor_base = var_GNSS_mil_army_speed_factor_min }
	}
	#air_cas_efficiency
	set_variable = { var_GNSS_mil_air_cas_efficiency_base = global.GNSS_mil_air_cas_efficiency_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_air_cas_efficiency_min = global.GNSS_mil_air_cas_efficiency_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_air_cas_efficiency_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_air_cas_efficiency_base < var_GNSS_mil_air_cas_efficiency_min
			}
		}
		set_variable = { var_GNSS_mil_air_cas_efficiency_base = var_GNSS_mil_air_cas_efficiency_min }
	}
	#air_nav_efficiency
	set_variable = { var_GNSS_mil_air_nav_efficiency_base = global.GNSS_mil_air_nav_efficiency_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_air_nav_efficiency_min = global.GNSS_mil_air_nav_efficiency_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_air_nav_efficiency_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_air_nav_efficiency_base  < var_GNSS_mil_air_nav_efficiency_min
			}
		}
		set_variable = { var_GNSS_mil_air_nav_efficiency_base = var_GNSS_mil_air_nav_efficiency_min }
	}
	#air_strategic_bomber_bombing_factor
	set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = global.GNSS_mil_air_strategic_bomber_bombing_factor_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_min = global.GNSS_mil_air_strategic_bomber_bombing_factor_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_air_strategic_bomber_bombing_factor_base < var_GNSS_mil_air_strategic_bomber_bombing_factor_min
			}
		}
		set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = var_GNSS_mil_air_strategic_bomber_bombing_factor_min }
	}
	#positioning
	set_variable = { var_GNSS_mil_positioning_base = global.GNSS_mil_positioning_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_positioning_min = global.GNSS_mil_positioning_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_positioning_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_positioning_base < var_GNSS_mil_positioning_min
			}
		}
		set_variable = { var_GNSS_mil_positioning_base = var_GNSS_mil_positioning_min }
	}
	#naval_hit_chance
	set_variable = { var_GNSS_mil_naval_hit_chance_base = global.GNSS_mil_naval_hit_chance_max_array^var_GNSS_mil_system_idx }
	set_variable = { var_GNSS_mil_naval_hit_chance_min = global.GNSS_mil_naval_hit_chance_min_array^var_GNSS_mil_system_idx }
	multiply_variable = { var_GNSS_mil_naval_hit_chance_base = var_GNSS_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_mil_naval_hit_chance_base < var_GNSS_mil_naval_hit_chance_min
			}
		}
		set_variable = { var_GNSS_mil_naval_hit_chance_base = var_GNSS_mil_naval_hit_chance_min }
	}
}
calculate_GNSS_civ_gui_vars = {
	set_variable = { var_GNSS_civ_production_speed_buildings_factor_base = global.GNSS_civ_production_speed_buildings_factor_max_array^var_GNSS_civ_system_idx }
	set_variable = { var_GNSS_civ_production_speed_buildings_factor_min = global.GNSS_civ_production_speed_buildings_factor_min_array^var_GNSS_civ_system_idx }
	multiply_variable = { var_GNSS_civ_production_speed_buildings_factor_base = var_GNSS_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_civ_production_speed_buildings_factor_base < var_GNSS_civ_production_speed_buildings_factor_min
			}
		}
		set_variable = { var_GNSS_civ_production_speed_buildings_factor_base = var_GNSS_civ_production_speed_buildings_factor_min }
	}
	#production_speed_infrastructure_factor
	set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = global.GNSS_civ_production_speed_infrastructure_factor_max_array^var_GNSS_civ_system_idx }
	set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_min = global.GNSS_civ_production_speed_infrastructure_factor_min_array^var_GNSS_civ_system_idx }
	multiply_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = var_GNSS_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_civ_production_speed_infrastructure_factor_base < var_GNSS_civ_production_speed_infrastructure_factor_min
			}
		}
		set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = var_GNSS_civ_production_speed_infrastructure_factor_min }
	}
	#local_resources_factor
	set_variable = { var_GNSS_civ_local_resources_factor_base = global.GNSS_civ_local_resources_factor_max_array^var_GNSS_civ_system_idx }
	set_variable = { var_GNSS_civ_local_resources_factor_min = global.GNSS_civ_local_resources_factor_min_array^var_GNSS_civ_system_idx }
	multiply_variable = { var_GNSS_civ_local_resources_factor_base = var_GNSS_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_GNSS_civ_local_resources_factor_base < var_GNSS_civ_local_resources_factor_min
			}
		}
		set_variable = { var_GNSS_civ_local_resources_factor_base = var_GNSS_civ_local_resources_factor_min }
	}
}
calculate_COM_mil_gui_vars = {
	# Command Power
	set_variable = { var_COM_mil_max_command_power_base = global.COM_mil_max_command_power_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_max_command_power_min = global.COM_mil_max_command_power_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_max_command_power_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_max_command_power_base < var_COM_mil_max_command_power_min
			}
		}
		set_variable = { var_COM_mil_max_command_power_base = var_COM_mil_max_command_power_min }
	}
	#army_org_factor
	set_variable = { var_COM_mil_army_org_factor_base = global.COM_mil_army_org_factor_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_army_org_factor_min = global.COM_mil_army_org_factor_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_army_org_factor_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_army_org_factor_base < var_COM_mil_army_org_factor_min
			}
		}
		set_variable = { var_COM_mil_army_org_factor_base = var_COM_mil_army_org_factor_min }
	}
	#planning_speed
	set_variable = { var_COM_mil_planning_speed_base = global.COM_mil_planning_speed_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_planning_speed_min = global.COM_mil_planning_speed_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_planning_speed_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_planning_speed_base < var_COM_mil_planning_speed_min
			}
		}
		set_variable = { var_COM_mil_planning_speed_base = var_COM_mil_planning_speed_min }
	}
	#air_escort_efficiency
	set_variable = { var_COM_mil_air_escort_efficiency_base = global.COM_mil_air_escort_efficiency_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_air_escort_efficiency_min = global.COM_mil_air_escort_efficiency_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_air_escort_efficiency_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_air_escort_efficiency_base < var_COM_mil_air_escort_efficiency_min
			}
		}
		set_variable = { var_COM_mil_air_escort_efficiency_base = var_COM_mil_air_escort_efficiency_min }
	}
	#air_intercept_efficiency
	set_variable = { var_COM_mil_air_intercept_efficiency_base = global.COM_mil_air_intercept_efficiency_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_air_intercept_efficiency_min = global.COM_mil_air_intercept_efficiency_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_air_intercept_efficiency_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_air_intercept_efficiency_base < var_COM_mil_air_intercept_efficiency_min
			}
		}
		set_variable = { var_COM_mil_air_intercept_efficiency_base = var_COM_mil_air_intercept_efficiency_min }
	}
	#naval_coordination
	set_variable = { var_COM_mil_naval_coordination_base = global.COM_mil_naval_coordination_max_array^var_COM_mil_system_idx }
	set_variable = { var_COM_mil_naval_coordination_min = global.COM_mil_naval_coordination_min_array^var_COM_mil_system_idx }
	multiply_variable = { var_COM_mil_naval_coordination_base = var_COM_mil_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_mil_naval_coordination_base < var_COM_mil_naval_coordination_min
			}
		}
		set_variable = { var_COM_mil_naval_coordination_base = var_COM_mil_naval_coordination_min }
	}
}
calculate_COM_civ_gui_vars = {
	#political_power_factor
	set_variable = { var_COM_civ_political_power_factor_base = global.COM_civ_political_power_factor_max_array^var_COM_civ_system_idx }
	set_variable = { var_COM_civ_political_power_factor_min = global.COM_civ_political_power_factor_min_array^var_COM_civ_system_idx }
	multiply_variable = { var_COM_civ_political_power_factor_base = var_COM_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_civ_political_power_factor_base < var_COM_civ_political_power_factor_min
			}
		}
		set_variable = { var_COM_civ_political_power_factor_base = var_COM_civ_political_power_factor_min }
	}
	#decryption_factor
	set_variable = { var_COM_civ_decryption_factor_base = global.COM_civ_decryption_factor_max_array^var_COM_civ_system_idx }
	set_variable = { var_COM_civ_decryption_factor_min = global.COM_civ_decryption_factor_min_array^var_COM_civ_system_idx }
	multiply_variable = { var_COM_civ_decryption_factor_base = var_COM_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_civ_decryption_factor_base< var_COM_civ_decryption_factor_min
			}
		}
		set_variable = { var_COM_civ_decryption_factor_base = var_COM_civ_decryption_factor_min }
	}
	#encryption_factor
	set_variable = { var_COM_civ_encryption_factor_base = global.COM_civ_encryption_factor_max_array^var_COM_civ_system_idx }
	set_variable = { var_COM_civ_encryption_factor_min = global.COM_civ_encryption_factor_min_array^var_COM_civ_system_idx }
	multiply_variable = { var_COM_civ_encryption_factor_base = var_COM_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_civ_encryption_factor_base < var_COM_civ_encryption_factor_min
			}
		}
		set_variable = { var_COM_civ_encryption_factor_base = var_COM_civ_encryption_factor_min }
	}
	#intel_network_gain_factor
	set_variable = { var_COM_civ_intel_network_gain_factor_base = global.COM_civ_intel_network_gain_factor_max_array^var_COM_civ_system_idx }
	set_variable = { var_COM_civ_intel_network_gain_factor_min = global.COM_civ_intel_network_gain_factor_min_array^var_COM_civ_system_idx }
	multiply_variable = { var_COM_civ_intel_network_gain_factor_base = var_COM_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_civ_intel_network_gain_factor_base < var_COM_civ_intel_network_gain_factor_min
			}
		}
		set_variable = { var_COM_civ_intel_network_gain_factor_base = var_COM_civ_intel_network_gain_factor_min }
	}
	#operation_outcome
	set_variable = { var_COM_civ_operation_outcome_base = global.COM_civ_operation_outcome_max_array^var_COM_civ_system_idx }
	set_variable = { var_COM_civ_operation_outcome_min = global.COM_civ_operation_outcome_min_array^var_COM_civ_system_idx }
	multiply_variable = { var_COM_civ_operation_outcome_base = var_COM_civ_sat_system_bonus }
	if = {
		limit = {
			check_variable = {
				var_COM_civ_operation_outcome_base < var_COM_civ_operation_outcome_min
			}
		}
		set_variable = { var_COM_civ_operation_outcome_base = var_COM_civ_operation_outcome_min }
	}
}
calculate_SPY_mil_gui_vars = {
	# meta_effect = {
	# 	text = {
			### SPY mil
			#max_planning_factor
			set_variable = { var_SPY_mil_max_planning_factor_base = global.SPY_mil_max_planning_factor_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_max_planning_factor_min = global.SPY_mil_max_planning_factor_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_max_planning_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_max_planning_factor_base < var_SPY_mil_max_planning_factor_min
					}
				}
				set_variable = { var_SPY_mil_max_planning_factor_base = var_SPY_mil_max_planning_factor_min }
			}
			#recon_factor
			set_variable = { var_SPY_mil_recon_factor_base = global.SPY_mil_recon_factor_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_recon_factor_min = global.SPY_mil_recon_factor_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_recon_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_recon_factor_base < var_SPY_mil_recon_factor_min
					}
				}
				set_variable = { var_SPY_mil_recon_factor_base = var_SPY_mil_recon_factor_min }
			}
			#air_weather_penalty
			set_variable = { var_SPY_mil_air_weather_penalty_base = global.SPY_mil_air_weather_penalty_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_air_weather_penalty_min = global.SPY_mil_air_weather_penalty_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_air_weather_penalty_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_air_weather_penalty_base < var_SPY_mil_air_weather_penalty_min
					}
				}
				set_variable = { var_SPY_mil_air_weather_penalty_base = var_SPY_mil_air_weather_penalty_min }
			}
			#spotting_chance
			set_variable = { var_SPY_mil_spotting_chance_base = global.SPY_mil_spotting_chance_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_spotting_chance_min = global.SPY_mil_spotting_chance_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_spotting_chance_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_spotting_chance_base < var_SPY_mil_spotting_chance_min
					}
				}
				set_variable = { var_SPY_mil_spotting_chance_base = var_SPY_mil_spotting_chance_min }
			}
			#convoy_raiding_efficiency_factor
			set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = global.SPY_mil_convoy_raiding_efficiency_factor_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_min = global.SPY_mil_convoy_raiding_efficiency_factor_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_convoy_raiding_efficiency_factor_base < var_SPY_mil_convoy_raiding_efficiency_factor_min
					}
				}
				set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = var_SPY_mil_convoy_raiding_efficiency_factor_min }
			}
			#convoy_escort_efficiency
			set_variable = { var_SPY_mil_convoy_escort_efficiency_base = global.SPY_mil_convoy_escort_efficiency_max_array^var_SPY_mil_system_idx }
			set_variable = { var_SPY_mil_convoy_escort_efficiency_min = global.SPY_mil_convoy_escort_efficiency_min_array^var_SPY_mil_system_idx }
			multiply_variable = { var_SPY_mil_convoy_escort_efficiency_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_convoy_escort_efficiency_base < var_SPY_mil_convoy_escort_efficiency_min
					}
				}
				set_variable = { var_SPY_mil_convoy_escort_efficiency_base = var_SPY_mil_convoy_escort_efficiency_min }
			}
			###
			#force_update_dynamic_modifier = yes
	# 	}
	# 	SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
	# }
}
calculate_SPY_civ_gui_vars = {
	# meta_effect = {
	# 	text = {
			### SPY civ
			#research_speed_factor
			set_variable = { var_SPY_civ_research_speed_factor_base = global.SPY_civ_research_speed_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_research_speed_factor_min = global.SPY_civ_research_speed_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_research_speed_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_research_speed_factor_base < var_SPY_civ_research_speed_factor_min
					}
				}
				set_variable = { var_SPY_civ_research_speed_factor_base = var_SPY_civ_research_speed_factor_min }
			}
			#civilian_intel_factor
			set_variable = { var_SPY_civ_civilian_intel_factor_base = global.SPY_civ_civilian_intel_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_civilian_intel_factor_min = global.SPY_civ_civilian_intel_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_civilian_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_civilian_intel_factor_base < var_SPY_civ_civilian_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_civilian_intel_factor_base = var_SPY_civ_civilian_intel_factor_min }
			}
			#army_intel_factor
			set_variable = { var_SPY_civ_army_intel_factor_base = global.SPY_civ_army_intel_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_army_intel_factor_min = global.SPY_civ_army_intel_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_army_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_army_intel_factor_base < var_SPY_civ_army_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_army_intel_factor_base = var_SPY_civ_army_intel_factor_min }
			}
			#navy_intel_factor
			set_variable = { var_SPY_civ_navy_intel_factor_base = global.SPY_civ_navy_intel_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_navy_intel_factor_min = global.SPY_civ_navy_intel_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_navy_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_navy_intel_factor_base < var_SPY_civ_navy_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_navy_intel_factor_base = var_SPY_civ_navy_intel_factor_min }
			}
			#airforce_intel_factor
			set_variable = { var_SPY_civ_airforce_intel_factor_base = global.SPY_civ_airforce_intel_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_airforce_intel_factor_min = global.SPY_civ_airforce_intel_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_airforce_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_airforce_intel_factor_base < var_SPY_civ_airforce_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_airforce_intel_factor_base = var_SPY_civ_airforce_intel_factor_min }
			}
			#root_out_resistance_effectiveness_factor
			set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = global.SPY_civ_root_out_resistance_effectiveness_factor_max_array^var_SPY_civ_system_idx }
			set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_min = global.SPY_civ_root_out_resistance_effectiveness_factor_min_array^var_SPY_civ_system_idx }
			multiply_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_root_out_resistance_effectiveness_factor_base < var_SPY_civ_root_out_resistance_effectiveness_factor_min
					}
				}
				set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = var_SPY_civ_root_out_resistance_effectiveness_factor_min }
			}
			###
			#force_update_dynamic_modifier = yes
	# 	}
	# 	SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	# }
}

add_access_GNSS_mil_vars = {
	set_variable = { temp_GNSS_mil_access_system_highest_idx = 0 }
	set_variable = { var_GNSS_mil_army_speed_factor = var_GNSS_mil_army_speed_factor_base }
	set_variable = { var_GNSS_mil_air_cas_efficiency = var_GNSS_mil_air_cas_efficiency_base }
	set_variable = { var_GNSS_mil_air_nav_efficiency = var_GNSS_mil_air_nav_efficiency_base }
	set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor = var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
	set_variable = { var_GNSS_mil_positioning = var_GNSS_mil_positioning_base }
	set_variable = { var_GNSS_mil_naval_hit_chance = var_GNSS_mil_naval_hit_chance_base }
	for_each_loop = {
		array = GNSS_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					GNSS_mil_access_system_idx_array^i > temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_GNSS_mil_access_system_highest_idx = GNSS_mil_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_GNSS_mil_system_idx < temp_GNSS_mil_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_GNSS_mil_system_idx = temp_GNSS_mil_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = GNSS_mil_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_GNSS_mil_system_idx < THIS.var_GNSS_mil_system_idx
						}
						check_variable = {
							ROOT.var_GNSS_mil_system_idx = THIS.var_GNSS_mil_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_GNSS_mil_army_speed_factor = THIS.var_GNSS_mil_army_speed_factor_base }
				add_to_variable = { ROOT.var_GNSS_mil_air_cas_efficiency = THIS.var_GNSS_mil_air_cas_efficiency_base }
				add_to_variable = { ROOT.var_GNSS_mil_air_nav_efficiency = THIS.var_GNSS_mil_air_nav_efficiency_base }
				add_to_variable = { ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor = THIS.var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
				add_to_variable = { ROOT.var_GNSS_mil_positioning = THIS.var_GNSS_mil_positioning_base }
				add_to_variable = { ROOT.var_GNSS_mil_naval_hit_chance = THIS.var_GNSS_mil_naval_hit_chance_base }
			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.GNSS_mil_access_array^num > 0
				}
			}
			#army_speed_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_army_speed_factor > global.GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_army_speed_factor = global.GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
			#air_cas_efficiency
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_air_cas_efficiency > global.GNSS_mil_air_cas_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_air_cas_efficiency = global.GNSS_mil_air_cas_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
			#air_nav_efficiency
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_air_nav_efficiency > global.GNSS_mil_air_nav_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_air_nav_efficiency = global.GNSS_mil_air_nav_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
			#air_strategic_bomber_bombing_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor > global.GNSS_mil_air_strategic_bomber_bombing_factor_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor = global.GNSS_mil_air_strategic_bomber_bombing_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
			#positioning
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_positioning > global.GNSS_mil_positioning_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_positioning = global.GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
			#naval_hit_chance
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_mil_naval_hit_chance > global.GNSS_mil_naval_hit_chance_max_array^temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_mil_naval_hit_chance = global.GNSS_mil_naval_hit_chance_max_array^temp_GNSS_mil_access_system_highest_idx }
			}
		}
	}
}

add_access_GNSS_civ_vars = {
	set_variable = { temp_GNSS_civ_access_system_highest_idx = 0 }
	set_variable = { var_GNSS_civ_production_speed_buildings_factor = var_GNSS_civ_production_speed_buildings_factor_base }
	set_variable = { var_GNSS_civ_production_speed_infrastructure_factor = var_GNSS_civ_production_speed_infrastructure_factor_base }
	set_variable = { var_GNSS_civ_local_resources_factor = var_GNSS_civ_local_resources_factor_base }
	for_each_loop = {
		array = GNSS_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					GNSS_civ_access_system_idx_array^i > temp_GNSS_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_GNSS_civ_access_system_highest_idx = GNSS_civ_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_GNSS_civ_system_idx < temp_GNSS_civ_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_GNSS_civ_system_idx = temp_GNSS_civ_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = GNSS_civ_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_GNSS_civ_system_idx < THIS.var_GNSS_civ_system_idx
						}
						check_variable = {
							ROOT.var_GNSS_civ_system_idx = THIS.var_GNSS_civ_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_GNSS_civ_production_speed_buildings_factor = THIS.var_GNSS_civ_production_speed_buildings_factor_base }
				add_to_variable = { ROOT.var_GNSS_civ_production_speed_infrastructure_factor = THIS.var_GNSS_civ_production_speed_infrastructure_factor_base }
				add_to_variable = { ROOT.var_GNSS_civ_local_resources_factor = THIS.var_GNSS_civ_local_resources_factor_base }

			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.GNSS_civ_access_array^num > 0
				}
			}
			#production_speed_buildings_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_civ_production_speed_buildings_factor > global.GNSS_civ_production_speed_buildings_factor_max_array^temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_civ_production_speed_buildings_factor = global.GNSS_civ_production_speed_buildings_factor_max_array^temp_GNSS_civ_access_system_highest_idx }
			}
			#production_speed_infrastructure_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_civ_production_speed_infrastructure_factor > global.GNSS_civ_production_speed_infrastructure_factor_max_array^temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_civ_production_speed_infrastructure_factor = global.GNSS_civ_production_speed_infrastructure_factor_max_array^temp_GNSS_civ_access_system_highest_idx }
			}
			#local_resources_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_GNSS_civ_local_resources_factor > global.GNSS_civ_local_resources_factor_max_array^temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_GNSS_civ_local_resources_factor = global.GNSS_civ_local_resources_factor_max_array^temp_GNSS_civ_access_system_highest_idx }
			}
		}
	}
}
add_access_COM_mil_vars = {
	set_variable = { temp_COM_mil_access_system_highest_idx = 0 }
	set_variable = { var_COM_mil_max_command_power = var_COM_mil_max_command_power_base }
	set_variable = { var_COM_mil_army_org_factor = var_COM_mil_army_org_factor_base }
	set_variable = { var_COM_mil_planning_speed = var_COM_mil_planning_speed_base }
	set_variable = { var_COM_mil_air_escort_efficiency = var_COM_mil_air_escort_efficiency_base }
	set_variable = { var_COM_mil_air_intercept_efficiency = var_COM_mil_air_intercept_efficiency_base }
	set_variable = { var_COM_mil_naval_coordination = var_COM_mil_naval_coordination_base }
	for_each_loop = {
		array = COM_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					COM_mil_access_system_idx_array^i > temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_COM_mil_access_system_highest_idx = COM_mil_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_COM_mil_system_idx < temp_COM_mil_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_COM_mil_system_idx = temp_COM_mil_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = COM_mil_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_COM_mil_system_idx < THIS.var_COM_mil_system_idx
						}
						check_variable = {
							ROOT.var_COM_mil_system_idx = THIS.var_COM_mil_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_COM_mil_max_command_power = THIS.var_COM_mil_max_command_power_base }
				add_to_variable = { ROOT.var_COM_mil_army_org_factor = THIS.var_COM_mil_army_org_factor_base }
				add_to_variable = { ROOT.var_COM_mil_planning_speed = THIS.var_COM_mil_planning_speed_base }
				add_to_variable = { ROOT.var_COM_mil_air_escort_efficiency = THIS.var_COM_mil_air_escort_efficiency_base }
				add_to_variable = { ROOT.var_COM_mil_air_intercept_efficiency = THIS.var_COM_mil_air_intercept_efficiency_base }
				add_to_variable = { ROOT.var_COM_mil_naval_coordination = THIS.var_COM_mil_naval_coordination_base }
			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.COM_mil_access_array^num > 0
				}
			}
			#max_command_power
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_max_command_power > global.COM_mil_max_command_power_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_max_command_power = global.COM_mil_max_command_power_max_array^temp_COM_mil_access_system_highest_idx }
			}
			#army_org_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_army_org_factor > global.COM_mil_army_org_factor_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_army_org_factor = global.COM_mil_army_org_factor_max_array^temp_COM_mil_access_system_highest_idx }
			}
			#planning_speed
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_planning_speed > global.COM_mil_planning_speed_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_planning_speed = global.COM_mil_planning_speed_max_array^temp_COM_mil_access_system_highest_idx }
			}
			#air_escort_efficiency
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_air_escort_efficiency > global.COM_mil_air_escort_efficiency_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_air_escort_efficiency = global.COM_mil_air_escort_efficiency_max_array^temp_COM_mil_access_system_highest_idx }
			}
			#air_intercept_efficiency
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_air_intercept_efficiency > global.COM_mil_air_intercept_efficiency_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_air_intercept_efficiency = global.COM_mil_air_intercept_efficiency_max_array^temp_COM_mil_access_system_highest_idx }
			}
			#naval_coordination
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_mil_naval_coordination > global.COM_mil_naval_coordination_max_array^temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_mil_naval_coordination = global.COM_mil_naval_coordination_max_array^temp_COM_mil_access_system_highest_idx }
			}
		}
	}
}
add_access_COM_civ_vars = {
	set_variable = { temp_COM_civ_access_system_highest_idx = 0 }
	set_variable = { var_COM_civ_political_power_factor = var_COM_civ_political_power_factor_base }
	set_variable = { var_COM_civ_decryption_factor = var_COM_civ_decryption_factor_base }
	set_variable = { var_COM_civ_encryption_factor = var_COM_civ_encryption_factor_base }
	set_variable = { var_COM_civ_intel_network_gain_factor = var_COM_civ_intel_network_gain_factor_base }
	set_variable = { var_COM_civ_operation_outcome = var_COM_civ_operation_outcome_base }
	for_each_loop = {
		array = COM_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					COM_civ_access_system_idx_array^i > temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_COM_civ_access_system_highest_idx = COM_civ_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_COM_civ_system_idx < temp_COM_civ_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_COM_civ_system_idx = temp_COM_civ_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = COM_civ_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_COM_civ_system_idx < THIS.var_COM_civ_system_idx
						}
						check_variable = {
							ROOT.var_COM_civ_system_idx = THIS.var_COM_civ_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_COM_civ_political_power_factor = THIS.var_COM_civ_political_power_factor_base }
				add_to_variable = { ROOT.var_COM_civ_decryption_factor = THIS.var_COM_civ_decryption_factor_base }
				add_to_variable = { ROOT.var_COM_civ_encryption_factor = THIS.var_COM_civ_encryption_factor_base }
				add_to_variable = { ROOT.var_COM_civ_intel_network_gain_factor = THIS.var_COM_civ_intel_network_gain_factor_base }
				add_to_variable = { ROOT.var_COM_civ_operation_outcome = THIS.var_COM_civ_operation_outcome_base }
			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.COM_civ_access_array^num > 0
				}
			}
			#political_power_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_civ_political_power_factor > global.COM_civ_political_power_factor_max_array^temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_civ_political_power_factor = global.COM_civ_political_power_factor_max_array^temp_COM_civ_access_system_highest_idx }
			}
			#decryption_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_civ_decryption_factor > global.COM_civ_decryption_factor_max_array^temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_civ_decryption_factor = global.COM_civ_decryption_factor_max_array^temp_COM_civ_access_system_highest_idx }
			}
			#encryption_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_civ_encryption_factor > global.COM_civ_encryption_factor_max_array^temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_civ_encryption_factor = global.COM_civ_encryption_factor_max_array^temp_COM_civ_access_system_highest_idx }
			}
			#intel_network_gain_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_civ_intel_network_gain_factor > global.COM_civ_intel_network_gain_factor_max_array^temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_civ_intel_network_gain_factor = global.COM_civ_intel_network_gain_factor_max_array^temp_COM_civ_access_system_highest_idx }
			}
			#operation_outcome
			if = {
				limit = {
					check_variable = {
						ROOT.var_COM_civ_operation_outcome > global.COM_civ_operation_outcome_max_array^temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_COM_civ_operation_outcome = global.COM_civ_operation_outcome_max_array^temp_COM_civ_access_system_highest_idx }
			}
		}
	}
}
add_access_SPY_mil_vars = {
	set_variable = { temp_SPY_mil_access_system_highest_idx = 0 }
	set_variable = { var_SPY_mil_max_planning_factor = var_SPY_mil_max_planning_factor_base }
	set_variable = { var_SPY_mil_recon_factor = var_SPY_mil_recon_factor_base }
	set_variable = { var_SPY_mil_air_weather_penalty = var_SPY_mil_air_weather_penalty_base }
	set_variable = { var_SPY_mil_spotting_chance = var_SPY_mil_spotting_chance_base }
	set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor = var_SPY_mil_convoy_raiding_efficiency_factor_base }
	set_variable = { var_SPY_mil_convoy_escort_efficiency = var_SPY_mil_convoy_escort_efficiency_base }
	for_each_loop = {
		array = SPY_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					SPY_mil_access_system_idx_array^i > temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_SPY_mil_access_system_highest_idx = SPY_mil_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_SPY_mil_system_idx < temp_SPY_mil_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_SPY_mil_system_idx = temp_SPY_mil_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = SPY_mil_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_SPY_mil_system_idx < THIS.var_SPY_mil_system_idx
						}
						check_variable = {
							ROOT.var_SPY_mil_system_idx = THIS.var_SPY_mil_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_SPY_mil_max_planning_factor = THIS.var_SPY_mil_max_planning_factor_base }
				add_to_variable = { ROOT.var_SPY_mil_recon_factor = THIS.var_SPY_mil_recon_factor_base }
				add_to_variable = { ROOT.var_SPY_mil_air_weather_penalty = THIS.var_SPY_mil_air_weather_penalty_base }
				add_to_variable = { ROOT.var_SPY_mil_spotting_chance = THIS.var_SPY_mil_spotting_chance_base }
				add_to_variable = { ROOT.var_SPY_mil_convoy_raiding_efficiency_factor = THIS.var_SPY_mil_convoy_raiding_efficiency_factor_base }
				add_to_variable = { ROOT.var_SPY_mil_convoy_escort_efficiency = THIS.var_SPY_mil_convoy_escort_efficiency_base }
			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.SPY_mil_access_array^num > 0
				}
			}
			#max_planning_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_max_planning_factor > global.SPY_mil_max_planning_factor_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_max_planning_factor = global.SPY_mil_max_planning_factor_max_array^temp_SPY_mil_access_system_highest_idx }
			}
			#recon_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_recon_factor > global.SPY_mil_recon_factor_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_recon_factor = global.SPY_mil_recon_factor_max_array^temp_SPY_mil_access_system_highest_idx }
			}
			#air_weather_penalty
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_air_weather_penalty > global.SPY_mil_air_weather_penalty_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_air_weather_penalty = global.SPY_mil_air_weather_penalty_max_array^temp_SPY_mil_access_system_highest_idx }
			}
			#spotting_chance
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_spotting_chance > global.SPY_mil_spotting_chance_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_spotting_chance = global.SPY_mil_spotting_chance_max_array^temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_raiding_efficiency_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_convoy_raiding_efficiency_factor > global.SPY_mil_convoy_raiding_efficiency_factor_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_convoy_raiding_efficiency_factor = global.SPY_mil_convoy_raiding_efficiency_factor_max_array^temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_escort_efficiency
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_mil_convoy_escort_efficiency > global.SPY_mil_convoy_escort_efficiency_max_array^temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_mil_convoy_escort_efficiency = global.SPY_mil_convoy_escort_efficiency_max_array^temp_SPY_mil_access_system_highest_idx }
			}
		}
	}
}
add_access_SPY_civ_vars = {
	set_variable = { temp_SPY_civ_access_system_highest_idx = 0 }
	set_variable = { var_SPY_civ_research_speed_factor = var_SPY_civ_research_speed_factor_base }
	set_variable = { var_SPY_civ_civilian_intel_factor = var_SPY_civ_civilian_intel_factor_base }
	set_variable = { var_SPY_civ_army_intel_factor = var_SPY_civ_army_intel_factor_base }
	set_variable = { var_SPY_civ_navy_intel_factor = var_SPY_civ_navy_intel_factor_base }
	set_variable = { var_SPY_civ_airforce_intel_factor = var_SPY_civ_airforce_intel_factor_base }
	set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor = var_SPY_civ_root_out_resistance_effectiveness_factor_base }
	for_each_loop = {
		array = SPY_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					SPY_civ_access_system_idx_array^i > temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_SPY_civ_access_system_highest_idx = SPY_civ_access_system_idx_array^i }
		}
	}
	if = {
		limit = {
			OR = {
				check_variable = {
					ROOT.var_SPY_civ_system_idx < temp_SPY_civ_access_system_highest_idx
				}
				check_variable = {
					ROOT.var_SPY_civ_system_idx = temp_SPY_civ_access_system_highest_idx
				}
			}
		}
		for_each_scope_loop = {
			array = SPY_civ_access_array
			if = {
				limit = {
					OR = {
						check_variable = {
							ROOT.var_SPY_civ_system_idx < THIS.var_SPY_civ_system_idx
						}
						check_variable = {
							ROOT.var_SPY_civ_system_idx = THIS.var_SPY_civ_system_idx
						}
					}
				}
				add_to_variable = { ROOT.var_SPY_civ_research_speed_factor = THIS.var_SPY_civ_research_speed_factor_base }
				add_to_variable = { ROOT.var_SPY_civ_civilian_intel_factor = THIS.var_SPY_civ_civilian_intel_factor_base }
				add_to_variable = { ROOT.var_SPY_civ_army_intel_factor = THIS.var_SPY_civ_army_intel_factor_base }
				add_to_variable = { ROOT.var_SPY_civ_navy_intel_factor = THIS.var_SPY_civ_navy_intel_factor_base }
				add_to_variable = { ROOT.var_SPY_civ_airforce_intel_factor = THIS.var_SPY_civ_airforce_intel_factor_base }
				add_to_variable = { ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor = THIS.var_SPY_civ_root_out_resistance_effectiveness_factor_base }
			}
		}
		if = {
			limit = {
				check_variable = {
					ROOT.SPY_civ_access_array^num > 0
				}
			}
			#research_speed_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_research_speed_factor > global.SPY_civ_research_speed_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_research_speed_factor = global.SPY_civ_research_speed_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
			#civilian_intel_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_civilian_intel_factor > global.SPY_civ_civilian_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_civilian_intel_factor = global.SPY_civ_civilian_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
			#army_intel_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_army_intel_factor > global.SPY_civ_army_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_army_intel_factor = global.SPY_civ_army_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
			#navy_intel_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_navy_intel_factor > global.SPY_civ_navy_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_navy_intel_factor = global.SPY_civ_navy_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
			#airforce_intel_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_airforce_intel_factor > global.SPY_civ_airforce_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_airforce_intel_factor = global.SPY_civ_airforce_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
			#root_out_resistance_effectiveness_factor
			if = {
				limit = {
					check_variable = {
						ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor > global.SPY_civ_root_out_resistance_effectiveness_factor_max_array^temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor = global.SPY_civ_root_out_resistance_effectiveness_factor_max_array^temp_SPY_civ_access_system_highest_idx }
			}
		}
	}
}

#### scripted effects for offer
# default = PREV = target / bonus TAG
# ROOT = sending TAG / access TAG
### does it work correctly? adding highest checks like for add_access_ effects?

add_offer_access_GNSS_mil_vars = {
	PREV = {
		set_variable = { temp_GNSS_mil_access_system_highest_idx = 0 }
		set_variable = { var_GNSS_mil_army_speed_factor = var_GNSS_mil_army_speed_factor_base }
		set_variable = { var_GNSS_mil_air_cas_efficiency = var_GNSS_mil_air_cas_efficiency_base }
		set_variable = { var_GNSS_mil_air_nav_efficiency = var_GNSS_mil_air_nav_efficiency_base }
		set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor = var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
		set_variable = { var_GNSS_mil_positioning = var_GNSS_mil_positioning_base }
		set_variable = { var_GNSS_mil_naval_hit_chance = var_GNSS_mil_naval_hit_chance_base }
		for_each_loop = {
			array = GNSS_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						GNSS_mil_access_system_idx_array^i > temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_GNSS_mil_access_system_highest_idx = GNSS_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = GNSS_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_GNSS_mil_system_idx > THIS.var_GNSS_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_GNSS_mil_army_speed_factor = THIS.var_GNSS_mil_army_speed_factor_base }
				add_to_variable = { PREV.var_GNSS_mil_air_cas_efficiency = THIS.var_GNSS_mil_air_cas_efficiency_base }
				add_to_variable = { PREV.var_GNSS_mil_air_nav_efficiency = THIS.var_GNSS_mil_air_nav_efficiency_base }
				add_to_variable = { PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor = THIS.var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
				add_to_variable = { PREV.var_GNSS_mil_positioning = THIS.var_GNSS_mil_positioning_base }
				add_to_variable = { PREV.var_GNSS_mil_naval_hit_chance = THIS.var_GNSS_mil_naval_hit_chance_base }
			}
			#army_speed_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_army_speed_factor > global.GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_army_speed_factor = global.GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_cas_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_cas_efficiency > global.GNSS_mil_air_cas_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_cas_efficiency = global.GNSS_mil_air_cas_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_nav_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_nav_efficiency > global.GNSS_mil_air_nav_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_nav_efficiency = global.GNSS_mil_air_nav_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_strategic_bomber_bombing_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor > global.GNSS_mil_air_strategic_bomber_bombing_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor = global.GNSS_mil_air_strategic_bomber_bombing_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#positioning
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_positioning > global.GNSS_mil_positioning_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_positioning = global.GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#naval_hit_chance
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_naval_hit_chance > global.GNSS_mil_naval_hit_chance_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_naval_hit_chance = global.GNSS_mil_naval_hit_chance_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_GNSS_civ_vars = {
	PREV = {
		set_variable = { temp_GNSS_civ_access_system_highest_idx = 0 }
		set_variable = { var_GNSS_civ_production_speed_buildings_factor = var_GNSS_civ_production_speed_buildings_factor_base }
		set_variable = { var_GNSS_civ_production_speed_infrastructure_factor = var_GNSS_civ_production_speed_infrastructure_factor_base }
		set_variable = { var_GNSS_civ_local_resources_factor = var_GNSS_civ_local_resources_factor_base }
		for_each_loop = {
			array = GNSS_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						GNSS_civ_access_system_idx_array^i > temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_GNSS_civ_access_system_highest_idx = GNSS_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = GNSS_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_GNSS_civ_system_idx > THIS.var_GNSS_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_GNSS_civ_production_speed_buildings_factor = THIS.var_GNSS_civ_production_speed_buildings_factor_base }
				add_to_variable = { PREV.var_GNSS_civ_production_speed_infrastructure_factor = THIS.var_GNSS_civ_production_speed_infrastructure_factor_base }
				add_to_variable = { PREV.var_GNSS_civ_local_resources_factor = THIS.var_GNSS_civ_local_resources_factor_base }

			}
			#production_speed_buildings_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_production_speed_buildings_factor > global.GNSS_civ_production_speed_buildings_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_production_speed_buildings_factor = global.GNSS_civ_production_speed_buildings_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
			#production_speed_infrastructure_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_production_speed_infrastructure_factor > global.GNSS_civ_production_speed_infrastructure_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_production_speed_infrastructure_factor = global.GNSS_civ_production_speed_infrastructure_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
			#local_resources_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_local_resources_factor > global.GNSS_civ_local_resources_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_local_resources_factor = global.GNSS_civ_local_resources_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_COM_mil_vars = {
	PREV = {
		set_variable = { temp_COM_mil_access_system_highest_idx = 0 }
		set_variable = { var_COM_mil_max_command_power = var_COM_mil_max_command_power_base }
		set_variable = { var_COM_mil_army_org_factor = var_COM_mil_army_org_factor_base }
		set_variable = { var_COM_mil_planning_speed = var_COM_mil_planning_speed_base }
		set_variable = { var_COM_mil_air_escort_efficiency = var_COM_mil_air_escort_efficiency_base }
		set_variable = { var_COM_mil_air_intercept_efficiency = var_COM_mil_air_intercept_efficiency_base }
		set_variable = { var_COM_mil_naval_coordination = var_COM_mil_naval_coordination_base }
		for_each_loop = {
			array = COM_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						COM_mil_access_system_idx_array^i > temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_COM_mil_access_system_highest_idx = COM_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = COM_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_COM_mil_system_idx > THIS.var_COM_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_COM_mil_max_command_power = THIS.var_COM_mil_max_command_power_base }
				add_to_variable = { PREV.var_COM_mil_army_org_factor = THIS.var_COM_mil_army_org_factor_base }
				add_to_variable = { PREV.var_COM_mil_planning_speed = THIS.var_COM_mil_planning_speed_base }
				add_to_variable = { PREV.var_COM_mil_air_escort_efficiency = THIS.var_COM_mil_air_escort_efficiency_base }
				add_to_variable = { PREV.var_COM_mil_air_intercept_efficiency = THIS.var_COM_mil_air_intercept_efficiency_base }
				add_to_variable = { PREV.var_COM_mil_naval_coordination = THIS.var_COM_mil_naval_coordination_base }
			}
			#max_command_power
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_max_command_power > global.COM_mil_max_command_power_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_max_command_power = global.COM_mil_max_command_power_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#army_org_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_army_org_factor > global.COM_mil_army_org_factor_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_army_org_factor = global.COM_mil_army_org_factor_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#planning_speed
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_planning_speed > global.COM_mil_planning_speed_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_planning_speed = global.COM_mil_planning_speed_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#air_escort_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_air_escort_efficiency > global.COM_mil_air_escort_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_air_escort_efficiency = global.COM_mil_air_escort_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#air_intercept_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_air_intercept_efficiency > global.COM_mil_air_intercept_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_air_intercept_efficiency = global.COM_mil_air_intercept_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#naval_coordination
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_naval_coordination > global.COM_mil_naval_coordination_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_naval_coordination = global.COM_mil_naval_coordination_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_COM_civ_vars = {
	PREV = {
		set_variable = { temp_COM_civ_access_system_highest_idx = 0 }
		set_variable = { var_COM_civ_political_power_factor = var_COM_civ_political_power_factor_base }
		set_variable = { var_COM_civ_decryption_factor = var_COM_civ_decryption_factor_base }
		set_variable = { var_COM_civ_encryption_factor = var_COM_civ_encryption_factor_base }
		set_variable = { var_COM_civ_intel_network_gain_factor = var_COM_civ_intel_network_gain_factor_base }
		set_variable = { var_COM_civ_operation_outcome = var_COM_civ_operation_outcome_base }
		for_each_loop = {
			array = COM_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						COM_civ_access_system_idx_array^i > temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_COM_civ_access_system_highest_idx = COM_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = COM_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_COM_civ_system_idx > THIS.var_COM_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_COM_civ_political_power_factor = THIS.var_COM_civ_political_power_factor_base }
				add_to_variable = { PREV.var_COM_civ_decryption_factor = THIS.var_COM_civ_decryption_factor_base }
				add_to_variable = { PREV.var_COM_civ_encryption_factor = THIS.var_COM_civ_encryption_factor_base }
				add_to_variable = { PREV.var_COM_civ_intel_network_gain_factor = THIS.var_COM_civ_intel_network_gain_factor_base }
				add_to_variable = { PREV.var_COM_civ_operation_outcome = THIS.var_COM_civ_operation_outcome_base }
			}
			#political_power_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_political_power_factor > global.COM_civ_political_power_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_political_power_factor = global.COM_civ_political_power_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#decryption_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_decryption_factor > global.COM_civ_decryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_decryption_factor = global.COM_civ_decryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#encryption_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_encryption_factor > global.COM_civ_encryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_encryption_factor = global.COM_civ_encryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#intel_network_gain_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_intel_network_gain_factor > global.COM_civ_intel_network_gain_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_intel_network_gain_factor = global.COM_civ_intel_network_gain_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#operation_outcome
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_operation_outcome > global.COM_civ_operation_outcome_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_operation_outcome = global.COM_civ_operation_outcome_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_SPY_mil_vars = {
	PREV = {
		set_variable = { temp_SPY_mil_access_system_highest_idx = 0 }
		set_variable = { var_SPY_mil_max_planning_factor = var_SPY_mil_max_planning_factor_base }
		set_variable = { var_SPY_mil_recon_factor = var_SPY_mil_recon_factor_base }
		set_variable = { var_SPY_mil_air_weather_penalty = var_SPY_mil_air_weather_penalty_base }
		set_variable = { var_SPY_mil_spotting_chance = var_SPY_mil_spotting_chance_base }
		set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor = var_SPY_mil_convoy_raiding_efficiency_factor_base }
		set_variable = { var_SPY_mil_convoy_escort_efficiency = var_SPY_mil_convoy_escort_efficiency_base }
		for_each_loop = {
			array = SPY_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						SPY_mil_access_system_idx_array^i > temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_SPY_mil_access_system_highest_idx = SPY_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = SPY_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_SPY_mil_system_idx > THIS.var_SPY_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_SPY_mil_max_planning_factor = THIS.var_SPY_mil_max_planning_factor_base }
				add_to_variable = { PREV.var_SPY_mil_recon_factor = THIS.var_SPY_mil_recon_factor_base }
				add_to_variable = { PREV.var_SPY_mil_air_weather_penalty = THIS.var_SPY_mil_air_weather_penalty_base }
				add_to_variable = { PREV.var_SPY_mil_spotting_chance = THIS.var_SPY_mil_spotting_chance_base }
				add_to_variable = { PREV.var_SPY_mil_convoy_raiding_efficiency_factor = THIS.var_SPY_mil_convoy_raiding_efficiency_factor_base }
				add_to_variable = { PREV.var_SPY_mil_convoy_escort_efficiency = THIS.var_SPY_mil_convoy_escort_efficiency_base }
			}
			#max_planning_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_max_planning_factor > global.SPY_mil_max_planning_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_max_planning_factor = global.SPY_mil_max_planning_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#recon_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_recon_factor > global.SPY_mil_recon_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_recon_factor = global.SPY_mil_recon_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#air_weather_penalty
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_air_weather_penalty > global.SPY_mil_air_weather_penalty_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_air_weather_penalty = global.SPY_mil_air_weather_penalty_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#spotting_chance
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_spotting_chance > global.SPY_mil_spotting_chance_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_spotting_chance = global.SPY_mil_spotting_chance_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_raiding_efficiency_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_convoy_raiding_efficiency_factor > global.SPY_mil_convoy_raiding_efficiency_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_convoy_raiding_efficiency_factor = global.SPY_mil_convoy_raiding_efficiency_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_escort_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_convoy_escort_efficiency > global.SPY_mil_convoy_escort_efficiency_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_convoy_escort_efficiency = global.SPY_mil_convoy_escort_efficiency_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_SPY_civ_vars = {
	PREV = {
		set_variable = { temp_SPY_civ_access_system_highest_idx = 0 }
		set_variable = { var_SPY_civ_research_speed_factor = var_SPY_civ_research_speed_factor_base }
		set_variable = { var_SPY_civ_civilian_intel_factor = var_SPY_civ_civilian_intel_factor_base }
		set_variable = { var_SPY_civ_army_intel_factor = var_SPY_civ_army_intel_factor_base }
		set_variable = { var_SPY_civ_navy_intel_factor = var_SPY_civ_navy_intel_factor_base }
		set_variable = { var_SPY_civ_airforce_intel_factor = var_SPY_civ_airforce_intel_factor_base }
		set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor = var_SPY_civ_root_out_resistance_effectiveness_factor_base }
		for_each_loop = {
			array = SPY_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						SPY_civ_access_system_idx_array^i > temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_SPY_civ_access_system_highest_idx = SPY_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = SPY_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_SPY_civ_system_idx > THIS.var_SPY_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_SPY_civ_research_speed_factor = THIS.var_SPY_civ_research_speed_factor_base }
				add_to_variable = { PREV.var_SPY_civ_civilian_intel_factor = THIS.var_SPY_civ_civilian_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_army_intel_factor = THIS.var_SPY_civ_army_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_navy_intel_factor = THIS.var_SPY_civ_navy_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_airforce_intel_factor = THIS.var_SPY_civ_airforce_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_root_out_resistance_effectiveness_factor = THIS.var_SPY_civ_root_out_resistance_effectiveness_factor_base }
			}
			#research_speed_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_research_speed_factor > global.SPY_civ_research_speed_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_research_speed_factor = global.SPY_civ_research_speed_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#civilian_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_civilian_intel_factor > global.SPY_civ_civilian_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_civilian_intel_factor = global.SPY_civ_civilian_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#army_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_army_intel_factor > global.SPY_civ_army_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_army_intel_factor = global.SPY_civ_army_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#navy_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_navy_intel_factor > global.SPY_civ_navy_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_navy_intel_factor = global.SPY_civ_navy_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#airforce_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_airforce_intel_factor > global.SPY_civ_airforce_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_airforce_intel_factor = global.SPY_civ_airforce_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#root_out_resistance_effectiveness_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_root_out_resistance_effectiveness_factor > global.SPY_civ_root_out_resistance_effectiveness_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_root_out_resistance_effectiveness_factor = global.SPY_civ_root_out_resistance_effectiveness_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
		}
	}
}

########################
### spy sat missions ### ROOT.spy_mission_array^num
########################

clear_spy_sat_mission_arrays = {
	for_each_loop = {
		array = ROOT.spy_mission_array
		var:ROOT.spy_mission_array^i = {
			if = {
				limit = {
					NOT = { has_country_flag = spy_sat_mission_from_@ROOT }
				}
				remove_from_array = {
					array = ROOT.spy_mission_array
					index = i
				}
				remove_from_array = {
					array = ROOT.spy_mission_sat_num_array
					index = i
				}
			}
		}
	}
}



#####################
### space launch ###
####################

set_OLV_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### OLV1
	add_to_array = { OLV_display_array = 101 }
	### OLV2
	add_to_array = { OLV_display_array = 102 }
	### OLV3
	add_to_array = { OLV_display_array = 103 }
	### OLV4
	add_to_array = { OLV_display_array = 104 }
	### OLV5
	add_to_array = { OLV_display_array = 105 }
	### OLV6
	add_to_array = { OLV_display_array = 106 }
	### OLV7
	add_to_array = { OLV_display_array = 107 }
	### OLV8
	add_to_array = { OLV_display_array = 108 }
}

set_sat_payload_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### GNSS1
	add_to_array = { sat_payload_display_array = 111 }
	### GNSS2
	add_to_array = { sat_payload_display_array = 112 }
	### GNSS3
	add_to_array = { sat_payload_display_array = 113 }
	### GNSS4
	add_to_array = { sat_payload_display_array = 114 }
	### GNSS5
	add_to_array = { sat_payload_display_array = 115 }
	### GNSS6
	add_to_array = { sat_payload_display_array = 116 }
	### GNSS7
	add_to_array = { sat_payload_display_array = 117 }
	### GNSS8
	add_to_array = { sat_payload_display_array = 118 }
	### COMSAT1
	add_to_array = { sat_payload_display_array = 121 }
	### COMSAT2
	add_to_array = { sat_payload_display_array = 122 }
	### COMSAT3
	add_to_array = { sat_payload_display_array = 123 }
	### COMSAT4
	add_to_array = { sat_payload_display_array = 124 }
	### COMSAT5
	add_to_array = { sat_payload_display_array = 125 }
	### COMSAT6
	add_to_array = { sat_payload_display_array = 126 }
	### COMSAT7
	add_to_array = { sat_payload_display_array = 127 }
	### COMSAT8
	add_to_array = { sat_payload_display_array = 128 }
	### SPYSAT1
	add_to_array = { sat_payload_display_array = 131 }
	### SPYSAT2
	add_to_array = { sat_payload_display_array = 132 }
	### SPYSAT3
	add_to_array = { sat_payload_display_array = 133 }
	### SPYSAT4
	add_to_array = { sat_payload_display_array = 134 }
	### SPYSAT5
	add_to_array = { sat_payload_display_array = 135 }
	### SPYSAT6
	add_to_array = { sat_payload_display_array = 136 }
	### SPYSAT7
	add_to_array = { sat_payload_display_array = 137 }
	### SPYSAT8
	add_to_array = { sat_payload_display_array = 138 }
	### KILLSAT1
	add_to_array = { sat_payload_display_array = 141 }
	### KILLSAT2
	add_to_array = { sat_payload_display_array = 142 }
	### KILLSAT3
	add_to_array = { sat_payload_display_array = 143 }
	### KILLSAT4
	add_to_array = { sat_payload_display_array = 144 }
	### KILLSAT5
	add_to_array = { sat_payload_display_array = 145 }
	### KILLSAT6
	add_to_array = { sat_payload_display_array = 146 }
	### RODS1
	add_to_array = { sat_payload_display_array = 151 }
	### RODS2
	add_to_array = { sat_payload_display_array = 152 }
	### RODS3
	add_to_array = { sat_payload_display_array = 153 }
}

set_spp_payload_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### SPP0
	add_to_array = { spp_payload_display_array = 1000 }
	### SPP1
	add_to_array = { spp_payload_display_array = 1001 }
	### SPP2
	add_to_array = { spp_payload_display_array = 1002 }
}

set_ASAT_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### ABM0
	if = {
		limit = {
			has_tech = ABM0_ASAT
		}
		add_to_array = { ASAT_display_array = 90 }
	}
	### ABM1
	if = {
		limit = {
			has_tech = ABM1_ASAT
		}
		add_to_array = { ASAT_display_array = 91 }
	}
	### ABM2
	if = {
		limit = {
			has_tech = ABM2_ASAT
		}
		add_to_array = { ASAT_display_array = 92 }
	}
	### ABM3
	if = {
		limit = {
			has_tech = ABM3_ASAT
		}
		add_to_array = { ASAT_display_array = 93 }
	}
	### ABM4
	if = {
		limit = {
			has_tech = ABM4_ASAT
		}
		add_to_array = { ASAT_display_array = 94 }
	}
	### ABM5
	if = {
		limit = {
			has_tech = ABM5_ASAT
		}
		add_to_array = { ASAT_display_array = 95 }
	}
	### ABM6
	if = {
		limit = {
			has_tech = ABM6_ASAT
		}
		add_to_array = { ASAT_display_array = 96 }
	}
	### ABM7
	if = {
		limit = {
			has_tech = ABM7_ASAT
		}
		add_to_array = { ASAT_display_array = 97 }
	}
}

set_KILLSAT_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### KILLSAT1
	add_to_array = { KILLSAT_display_array = 141 }
	### KILLSAT2
	add_to_array = { KILLSAT_display_array = 142 }
	### KILLSAT3
	add_to_array = { KILLSAT_display_array = 143 }
	### KILLSAT4
	add_to_array = { KILLSAT_display_array = 144 }
	### KILLSAT5
	add_to_array = { KILLSAT_display_array = 145 }
	### KILLSAT6
	add_to_array = { KILLSAT_display_array = 146 }
}

set_RODS_display_array = {
	resize_array = { OLV_display_array = 0 }
	resize_array = { sat_payload_display_array = 0 }
	resize_array = { spp_payload_display_array = 0 }
	resize_array = { ASAT_display_array = 0 }
	resize_array = { KILLSAT_display_array = 0 }
	resize_array = { RODS_display_array = 0 }
	### RODS1
	add_to_array = { RODS_display_array = 151 }
	### RODS2
	add_to_array = { RODS_display_array = 152 }
	### RODS3
	add_to_array = { RODS_display_array = 153 }
}

clear_payload_types = {
	ROOT = {
		clear_variable = var_launch_mass
		clear_array = payload_types_array
		add_to_array = { payload_types_array = 1 }
		add_to_array = { payload_types_array = 1 }
		add_to_array = { payload_types_array = 1 }
		add_to_array = { payload_types_array = 1 }
	}
}

##################
### OLV launch ###
##################

launch_OLV = {
	clear_array = payload_array
	subtract_from_variable = { missile_inventory_array^var_OLV_type = ROOT.var_OLV_flights }
	while_loop_effect = {
		limit = {
			check_variable = { var_OLV_flights > 0 }
			check_variable = { var_OLV_inventory > 0 }
		}
		subtract_from_variable = { ROOT.var_OLV_flights = 1 }
		subtract_from_variable = { ROOT.var_OLV_inventory = 1 }
		add_to_variable = { var_orbital_launch_total = 1 }
		randomize_variable = { # Pap has put his Doner in this code and I have no idea what this does
			var = var_OLV_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		if = {
			limit = {
				OR = {
					check_variable = { ROOT.var_OLV_reliability > ROOT.var_OLV_trajectory }
					check_variable = { ROOT.var_OLV_reliability = ROOT.var_OLV_trajectory }
				}
			}
			add_to_variable = { ROOT.var_orbital_launch_success = 1 }
			for_each_loop = {
				array = payload_types_array
				if = {
					limit = {
						check_variable = { payload_types_array^i > 999 }
					}
					if = {
						limit = {
							check_variable = { spp_inventory_array^i > 0 }
						}
						subtract_from_variable = { spp_inventory_array^i = 1 }
						add_to_variable = { ROOT.var_spp_payload_delivered = 1 }
						set_temp_variable = { temp_sppID = payload_types_array^i }
						subtract_from_temp_variable = { temp_sppID = 1000 }
						add_to_variable = { ROOT.spp_orbit_array^temp_sppID = 1 }
					}
				}
				else_if = {
					limit = {
						NOT = { check_variable = { payload_types_array^i = 1 } }
					}
					if = {
						limit = {
							set_temp_variable = { temp1 = payload_types_array^i }
							check_variable = { missile_inventory_array^temp1 > 0 }
						}
						subtract_from_variable = { missile_inventory_array^temp1 = 1 }
						add_to_array = { payload_array = temp1 }
						add_to_variable = { ROOT.var_sat_payload_delivered = 1 }
					}
				}
			}
		}
		else = {
			add_to_variable = { ROOT.var_orbital_launch_fail = 1 }
			for_each_loop = {
				array = payload_types_array
				if = {
					limit = {
						check_variable = { payload_types_array^i > 999 }
					}
					if = {
						limit = {
							check_variable = { spp_inventory_array^i > 0 }
						}
						subtract_from_variable = { spp_inventory_array^i = 1 }
						add_to_variable = { ROOT.var_spp_payload_lost = 1 }
					}
				}
				else_if = {
					limit = {
						NOT = { check_variable = { payload_types_array^i = 1 } }
					}
					if = {
						limit = {
							set_temp_variable = { temp1 = payload_types_array^i }
							check_variable = { missile_inventory_array^temp1 > 0 }
						}
						subtract_from_variable = { missile_inventory_array^payload_types_array^i = 1 }
						add_to_variable = { ROOT.var_sat_payload_lost = 1 }
					}
				}
			}
		}
	}
	resize_array = { payload_array = ROOT.var_sat_payload_delivered }
	add_satellite_from_payload = yes
	clear_payload_types = yes
}


########################
### satellite launch ###
########################

# GNSS_satellite_array
# COM_satellite_array
# SPY_satellite_array
# KILL_satellite_array
# RODS_satellite_array

# payload_array

######################################################################################
### bugfixing necessary ##############################################################
######################################################################################

### missile_production_gui.xlsx # sheet 'add_satellite_from_payload'
add_satellite_from_payload = {
	resize_array = { GNSS_satellite_array = 8 }
	resize_array = { COM_satellite_array = 8 }
	resize_array = { SPY_satellite_array = 8 }
	resize_array = { KILL_satellite_array = 6 }
	resize_array = { RODS_satellite_array = 3 }

	for_each_loop = {
		array = payload_array
		if = {
			limit = {
				check_variable = { payload_array^i = 111 }
			}
			add_to_variable = { GNSS_satellite_array^0 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 112 }
			}
			add_to_variable = { GNSS_satellite_array^1 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 113 }
			}
			add_to_variable = { GNSS_satellite_array^2 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 114 }
			}
			add_to_variable = { GNSS_satellite_array^3 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 115 }
			}
			add_to_variable = { GNSS_satellite_array^4 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 116 }
			}
			add_to_variable = { GNSS_satellite_array^5 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 117 }
			}
			add_to_variable = { GNSS_satellite_array^6 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 118 }
			}
			add_to_variable = { GNSS_satellite_array^7 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 121 }
			}
			add_to_variable = { COM_satellite_array^0 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 122 }
			}
			add_to_variable = { COM_satellite_array^1 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 123 }
			}
			add_to_variable = { COM_satellite_array^2 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 124 }
			}
			add_to_variable = { COM_satellite_array^3 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 125 }
			}
			add_to_variable = { COM_satellite_array^4 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 126 }
			}
			add_to_variable = { COM_satellite_array^5 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 127 }
			}
			add_to_variable = { COM_satellite_array^6 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 128 }
			}
			add_to_variable = { COM_satellite_array^7 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 131 }
			}
			add_to_variable = { SPY_satellite_array^0 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 132 }
			}
			add_to_variable = { SPY_satellite_array^1 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 133 }
			}
			add_to_variable = { SPY_satellite_array^2 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 134 }
			}
			add_to_variable = { SPY_satellite_array^3 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 135 }
			}
			add_to_variable = { SPY_satellite_array^4 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 136 }
			}
			add_to_variable = { SPY_satellite_array^5 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 137 }
			}
			add_to_variable = { SPY_satellite_array^6 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 138 }
			}
			add_to_variable = { SPY_satellite_array^7 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 141 }
			}
			add_to_variable = { KILL_satellite_array^0 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 142 }
			}
			add_to_variable = { KILL_satellite_array^1 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 143 }
			}
			add_to_variable = { KILL_satellite_array^2 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 144 }
			}
			add_to_variable = { KILL_satellite_array^3 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 145 }
			}
			add_to_variable = { KILL_satellite_array^4 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 146 }
			}
			add_to_variable = { KILL_satellite_array^5 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 151 }
			}
			add_to_variable = { RODS_satellite_array^0 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 152 }
			}
			add_to_variable = { RODS_satellite_array^1 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
		if = {
			limit = {
				check_variable = { payload_array^i = 153 }
			}
			add_to_variable = { RODS_satellite_array^2 = 1 }
			add_to_array = { orbit_array = payload_array^i }
			set_variable = { var_orbit_display_ID = orbit_array^num }
			subtract_from_variable = { var_orbit_display_ID = 1 }
			add_new_satellite_to_orbit = yes
		}
	}
	#
	clear_array = payload_array
}

###################################
### MD_satellite_orbit_view_gui ###
###################################

set_sat_orbit_startup = {
	set_variable = { add_plus_X = 0 }
	set_variable = { add_minus_X = 0 }
	set_temp_variable = { temp1 = 0 }
	while_loop_effect = {
		limit = { check_variable = { temp1 < 180 } }
		add_to_array = { sat_1_array = -1 }
		add_to_temp_variable = { temp1 = 1 }
	}
	set_temp_variable = { temp2 = 0 }
	while_loop_effect = {
		limit = { check_variable = { temp2 < 400 } }
		add_to_array = { sat_2_array = -1 }
		add_to_temp_variable = { temp2 = 1 }
	}
	set_temp_variable = { temp3 = 0 }
	while_loop_effect = {
		limit = { check_variable = { temp3 < 336 } }
		add_to_array = { sat_3_array = -1 }
		add_to_temp_variable = { temp3 = 1 }
	}
	set_temp_variable = { temp4 = 0 }
	while_loop_effect = {
		limit = { check_variable = { temp4 < 400 } }
		add_to_array = { sat_4_array = -1 }
		add_to_temp_variable = { temp4 = 1 }
	}
	set_temp_variable = { temp5 = 0 }
	while_loop_effect = {
		limit = { check_variable = { temp5 < 180 } }
		add_to_array = { sat_5_array = -1 }
		add_to_temp_variable = { temp5 = 1 }
	}
}


add_new_satellite_to_orbit = {
	if = {
		limit = {
			OR = {
				check_variable = { var_orbit = 3 }
				check_variable = { var_orbit = 0 }
			}
		}
		if = {
			limit = {
				any_of = {
					array = sat_3_array
					check_variable = { v = -1 }
				}
				check_variable = { sat_3_array^num > 335 }
				check_variable = { sat_6_array^num > 0 }
			}
			set_variable = { sat_3_array^i = var_orbit_display_ID } #set_variable = { sat_3_array^i = 1 }
			log = "any_of sat_3_array^i [?sat_3_array^i] var_orbit_display_ID [?var_orbit_display_ID] sat_3_array^num [?sat_3_array^num]"
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_3_array
					check_variable = { v > -1 }
				}
				check_variable = { sat_3_array^num > 335 }
			}
			log = "all_of sat_3_array^i [?sat_3_array^i] var_orbit_display_ID [?var_orbit_display_ID] sat_3_array^num [?sat_3_array^num]"
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_3 = yes
			add_to_variable = { var_sat_block_3 = 1 }
		}
		set_variable = { var_orbit = 2 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 2 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_2_array
					check_variable = { v = -1 }
				}
				check_variable = { sat_2_array^num > 399 }
				check_variable = { sat_6_array^num > 0 }
			}
			set_variable = { sat_2_array^i = var_orbit_display_ID } #set_variable = { sat_2_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_2_array
					check_variable = { v > -1 }
				}
				check_variable = { sat_2_array^num > 399 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_2 = yes
			add_to_variable = { var_sat_block_2 = 1 }
		}
		set_variable = { var_orbit = 4 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 4 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_4_array
					check_variable = { v = -1 }
				}
				check_variable = { sat_4_array^num > 399 }
				check_variable = { sat_6_array^num > 0 }
			}
			set_variable = { sat_4_array^i = var_orbit_display_ID } #set_variable = { sat_4_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_4_array
					check_variable = { v > -1 }
				}
				check_variable = { sat_4_array^num > 399 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_4 = yes
			add_to_variable = { var_sat_block_4 = 1 }
		}
		set_variable = { var_orbit = 1 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 1 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_1_array
					check_variable = { v = -1 }
				}
				check_variable = { sat_1_array^num > 179 }
				check_variable = { sat_6_array^num > 0 }
			}
			set_variable = { sat_1_array^i = var_orbit_display_ID } #set_variable = { sat_1_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_1_array
					check_variable = { v > -1 }
				}
				check_variable = { sat_1_array^num > 179 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_1 = yes
			add_to_variable = { var_sat_block_1 = 1 }
		}
		set_variable = { var_orbit = 5 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 5 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_5_array
					check_variable = { v = -1 }
				}
				check_variable = { sat_5_array^num > 179 }
				check_variable = { sat_6_array^num > 0 }
			}
			set_variable = { sat_5_array^i = var_orbit_display_ID } #set_variable = { sat_5_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_5_array
					check_variable = { v > -1 }
				}
				check_variable = { sat_5_array^num > 179 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_5 = yes
			add_to_variable = { var_sat_block_5 = 1 }
		}
		set_variable = { var_orbit = 3 }
	}
}

add_new_satellite_to_orbit_1 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X1 < add_plus_X1
			}
		}
		add_to_variable = { add_minus_X1 = 1 }
		set_temp_variable = { temp1 = 90 }
		subtract_from_temp_variable = { temp1 = add_minus_X1 }
	}
	else = {
		set_temp_variable = { temp1 = 90 }
		add_to_temp_variable = { temp1 = add_plus_X1 }
		add_to_variable = { add_plus_X1 = 1 }
	}
	set_variable = { sat_1_array^temp1 = var_orbit_display_ID } #set_variable = { sat_1_array^temp1 = 1 }
}
add_new_satellite_to_orbit_2 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X2 < add_plus_X2
			}
		}
		add_to_variable = { add_minus_X2 = 1 }
		set_temp_variable = { temp2 = 180 }
		subtract_from_temp_variable = { temp2 = add_minus_X2 }
	}
	else = {
		set_temp_variable = { temp2 = 180 }
		add_to_temp_variable = { temp2 = add_plus_X2 }
		add_to_variable = { add_plus_X2 = 1 }
	}
	set_variable = { sat_2_array^temp2 = var_orbit_display_ID } #set_variable = { sat_2_array^temp2 = 1 }
}
add_new_satellite_to_orbit_3 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X3 < add_plus_X3
			}
		}
		add_to_variable = { add_minus_X3 = 1 }
		set_temp_variable = { temp3 = 147 }
		subtract_from_temp_variable = { temp3 = add_minus_X3 }
	}
	else = {
		set_temp_variable = { temp3 = 147 }
		add_to_temp_variable = { temp3 = add_plus_X3 }
		add_to_variable = { add_plus_X3 = 1 }
	}
	set_variable = { sat_3_array^temp3 = var_orbit_display_ID } #set_variable = { sat_3_array^temp3 = 1 }
	log = "sat_3_array^temp3 [?sat_3_array^temp3] var_orbit_display_ID [?var_orbit_display_ID] orbit_array^num [?orbit_array^num]"
}
add_new_satellite_to_orbit_4 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X4 < add_plus_X4
			}
		}
		add_to_variable = { add_minus_X4 = 1 }
		set_temp_variable = { temp4 = 180 }
		subtract_from_temp_variable = { temp4 = add_minus_X4 }
	}
	else = {
		set_temp_variable = { temp4 = 180 }
		add_to_temp_variable = { temp4 = add_plus_X4 }
		add_to_variable = { add_plus_X4 = 1 }
	}
	set_variable = { sat_4_array^temp4 = var_orbit_display_ID } #set_variable = { sat_4_array^temp4 = 1 }
}
add_new_satellite_to_orbit_5 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X5 < add_plus_X5
			}
		}
		add_to_variable = { add_minus_X5 = 1 }
		set_temp_variable = { temp5 = 90 }
		subtract_from_temp_variable = { temp5 = add_minus_X5 }
	}
	else = {
		set_temp_variable = { temp5 = 90 }
		add_to_temp_variable = { temp5 = add_plus_X5 }
		add_to_variable = { add_plus_X5 = 1 }
	}
	set_variable = { sat_5_array^temp5 = var_orbit_display_ID } #set_variable = { sat_5_array^temp5 = 1 }
}

add_new_satellite_to_orbit_6 = {
	if = {
		limit = {
			all_of = {
				array = sat_6_array
				check_variable = { v > 0 }
			}
			check_variable = { sat_6_array^num > 1503 }
		}
		ROOT = { news_event = { id = satellites.8 } }
	}
	else = {
		add_to_variable = { var_sat_in_orbit = 1 }
		add_to_array = { sat_6_array = var_orbit_display_ID } #add_to_array = { sat_6_array = 1 }
	}
}

########################
### retire satellite ###
########################

### not used in gui atm
retire_selected_sat = {
	for_each_loop = {
		array = sat_1_array
		if = {
			limit = {
				check_variable = { sat_1_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_1_array^i = -1 }
		}
	}
	for_each_loop = {
		array = sat_2_array
		if = {
			limit = {
				check_variable = { sat_2_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_2_array^i = -1 }
		}
	}
	for_each_loop = {
		array = sat_3_array
		if = {
			limit = {
				check_variable = { sat_3_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_3_array^i = -1 }
		}
	}
	for_each_loop = {
		array = sat_4_array
		if = {
			limit = {
				check_variable = { sat_4_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_4_array^i = -1 }
		}
	}
	for_each_loop = {
		array = sat_5_array
		if = {
			limit = {
				check_variable = { sat_5_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_5_array^i = -1 }
		}
	}
	for_each_loop = {
		array = sat_6_array
		if = {
			limit = {
				check_variable = { sat_6_array^i = var_selected_sat }
			}
			set_variable = { orbit_array^var_selected_sat = 0 }
			set_variable = { sat_6_array^i = -1 }
		}
	}
}

##############################
### anti satellite weapons ###
##############################

remove_satellite_from_orbit = {
	for_each_loop = {
		array = THIS.sat_1_array
		if = {
			limit = {
				check_variable = { sat_1_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_1_array^i = -1 }
		}
	}
	for_each_loop = {
		array = THIS.sat_2_array
		if = {
			limit = {
				check_variable = { sat_2_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_2_array^i = -1 }
		}
	}
	for_each_loop = {
		array = THIS.sat_3_array
		if = {
			limit = {
				check_variable = { sat_3_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_3_array^i = -1 }
		}
	}
	for_each_loop = {
		array = THIS.sat_4_array
		if = {
			limit = {
				check_variable = { sat_4_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_4_array^i = -1 }
		}
	}
	for_each_loop = {
		array = THIS.sat_5_array
		if = {
			limit = {
				check_variable = { sat_5_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_5_array^i = -1 }
		}
	}
	for_each_loop = {
		array = THIS.sat_6_array
		if = {
			limit = {
				check_variable = { sat_6_array^i = var_sat_ID }
			}
			set_variable = { orbit_array^var_sat_ID = 0 }
			set_variable = { sat_6_array^i = -1 }
		}
	}
}

remove_satellite_from_system = {
	var:tempTAG = {
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 111 }
			}
			subtract_from_variable = { GNSS_satellite_array^0 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 112 }
			}
			subtract_from_variable = { GNSS_satellite_array^1 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 113 }
			}
			subtract_from_variable = { GNSS_satellite_array^2 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 114 }
			}
			subtract_from_variable = { GNSS_satellite_array^3 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 115 }
			}
			subtract_from_variable = { GNSS_satellite_array^4 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 116 }
			}
			subtract_from_variable = { GNSS_satellite_array^5 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 117 }
			}
			subtract_from_variable = { GNSS_satellite_array^6 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 118 }
			}
			subtract_from_variable = { GNSS_satellite_array^7 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 121 }
			}
			subtract_from_variable = { COM_satellite_array^0 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 122 }
			}
			subtract_from_variable = { COM_satellite_array^1 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 123 }
			}
			subtract_from_variable = { COM_satellite_array^2 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 124 }
			}
			subtract_from_variable = { COM_satellite_array^3 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 125 }
			}
			subtract_from_variable = { COM_satellite_array^4 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 126 }
			}
			subtract_from_variable = { COM_satellite_array^5 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 127 }
			}
			subtract_from_variable = { COM_satellite_array^6 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 128 }
			}
			subtract_from_variable = { COM_satellite_array^7 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 131 }
			}
			subtract_from_variable = { SPY_satellite_array^0 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 132 }
			}
			subtract_from_variable = { SPY_satellite_array^1 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 133 }
			}
			subtract_from_variable = { SPY_satellite_array^2 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 134 }
			}
			subtract_from_variable = { SPY_satellite_array^3 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 135 }
			}
			subtract_from_variable = { SPY_satellite_array^4 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 136 }
			}
			subtract_from_variable = { SPY_satellite_array^5 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 137 }
			}
			subtract_from_variable = { SPY_satellite_array^6 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 138 }
			}
			subtract_from_variable = { SPY_satellite_array^7 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 141 }
			}
			subtract_from_variable = { KILL_satellite_array^0 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 142 }
			}
			subtract_from_variable = { KILL_satellite_array^1 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 143 }
			}
			subtract_from_variable = { KILL_satellite_array^2 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 144 }
			}
			subtract_from_variable = { KILL_satellite_array^3 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 145 }
			}
			subtract_from_variable = { KILL_satellite_array^4 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 146 }
			}
			subtract_from_variable = { KILL_satellite_array^5 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 151 }
			}
			subtract_from_variable = { RODS_satellite_array^0 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 152 }
			}
			subtract_from_variable = { RODS_satellite_array^1 = 1 }
		}
		if = {
			limit = {
				check_variable = { orbit_array^var_sat_ID = 153 }
			}
			subtract_from_variable = { RODS_satellite_array^2 = 1 }
		}
	}
}


anti_satellite_weapon_use = {
	#set_variable = { ROOT.var_anti_sat_accuracy = 0 }
	#set_variable = { ROOT.var_anti_satellite_weapon_num = 0 }
	#set_temp_variable = { temp1 = ROOT.var_anti_satellite_weapon_num }
	for_each_loop = {
		array = sat_target_array
		set_variable = { ROOT.var_sat_orbit = 0 }
		set_variable = { tempTAG = ROOT.sat_target_TAG_array^i }
		log = "anti_satellite_weapon_use [?tempTAG.GetTag]"
		while_loop_effect = {
			limit = {
				check_variable = { ROOT.var_anti_satellite_weapon_num > 0 }
				check_variable = { ROOT.sat_target_array^i > 0 }
			}
			randomize_variable = {
				var = ROOT.var_sat_orbit
				distribution = uniform
				min = 0
				max = 1
			}
			#subtract_from_temp_variable = { temp1 = 1 }
			subtract_from_variable = { ROOT.var_anti_satellite_weapon_num = 1 }
			if = {
				limit = {
					OR = {
						check_variable = { ROOT.var_anti_sat_accuracy > ROOT.var_sat_orbit }
						check_variable = { ROOT.var_anti_sat_accuracy = ROOT.var_sat_orbit }
					}
				}
				add_to_variable = { ROOT.var_sat_hit = 1 }
				var:tempTAG = {
					set_variable = { var_sat_ID = ROOT.sat_target_array^i }
					remove_satellite_from_system = yes
					remove_satellite_from_orbit = yes
					set_variable = { ROOT.sat_target_array^i = 0 }
					add_to_variable = { var_sat_lost = 1 }
				}
			}
			else = {
				add_to_variable = { ROOT.var_sat_miss = 1 }
			}
		}
		var:tempTAG = {
			update_sat_systems_stats = yes
		}
	}
	#set_variable = { ROOT.var_anti_satellite_weapon_num = 0 }
	clear_array = ROOT.sat_target_array
	clear_array = ROOT.sat_target_TAG_array
	if = {
		limit = {
			check_variable = { ROOT.var_anti_satellite_weapon_num > 0 }
		}
		add_to_variable = { ROOT.var_sat_miss = ROOT.var_anti_satellite_weapon_num }
		set_variable = { ROOT.var_anti_satellite_weapon_num = 0 }
	}
}

#remove used killer satellites
remove_killsat_used = {
	while_loop_effect = {
		limit = {
			check_variable = { ROOT.var_KILLSAT_salvo > 0 }
		}
		for_each_loop = {
			array = orbit_array
			if = {
				limit = {
					check_variable = { ROOT.orbit_array^i = ROOT.var_KILLSAT_type }
				}
				set_variable = { ROOT.var_killsat_fired = i }
			}
		}
		set_variable = { tempTAG = ROOT.id }
		ROOT = {
			set_variable = { var_sat_ID = ROOT.var_killsat_fired }
			remove_satellite_from_system = yes
			remove_satellite_from_orbit = yes
		}
		subtract_from_variable = { ROOT.var_KILLSAT_salvo = 1 }
	}
	set_satellites_gui = yes
	set_variable = { var_KILLSAT_orbit = KILL_satellite_array^var_KILLSAT_type }
}

#remove used rods
remove_rods_used = {
	# while_loop_effect = {
	# 	limit = {
	# 		check_variable = { ROOT.var_KILLSAT_salvo > 0 }
	# 	}
		for_each_loop = {
			array = orbit_array
			if = {
				limit = {
					check_variable = { ROOT.orbit_array^i = ROOT.var_RODS_type }
				}
				set_variable = { ROOT.var_rods_fired = i }
			}
		}
		set_variable = { tempTAG = ROOT.id }
		ROOT = {
			set_variable = { var_sat_ID = ROOT.var_rods_fired }
			remove_satellite_from_system = yes
			remove_satellite_from_orbit = yes
		}
		#subtract_from_variable = { ROOT.var_KILLSAT_salvo = 1 }
	# }
	set_satellites_gui = yes
	#set_variable = { var_KILLSAT_orbit = KILL_satellite_array^var_KILLSAT_type }
}

### right container # sat access arrays

set_sat_access_arrays_selected_TAG = {
	clear_array = selected_TAG_GNSS_mil_access_array
	clear_array = selected_TAG_GNSS_civ_access_array
	clear_array = selected_TAG_COM_mil_access_array
	clear_array = selected_TAG_COM_civ_access_array
	clear_array = selected_TAG_SPY_mil_access_array
	clear_array = selected_TAG_SPY_civ_access_array
	var:orbit_selected_TAG = {
		for_each_loop = {
			array = GNSS_mil_access_array
			add_to_array = { ROOT.selected_TAG_GNSS_mil_access_array = v }
		}
		for_each_loop = {
			array = GNSS_civ_access_array
			add_to_array = { ROOT.selected_TAG_GNSS_civ_access_array = v }
		}
		for_each_loop = {
			array = COM_mil_access_array
			add_to_array = { ROOT.selected_TAG_COM_mil_access_array = v }
		}
		for_each_loop = {
			array = COM_civ_access_array
			add_to_array = { ROOT.selected_TAG_COM_civ_access_array = v }
		}
		for_each_loop = {
			array = SPY_mil_access_array
			add_to_array = { ROOT.selected_TAG_SPY_mil_access_array = v }
		}
		for_each_loop = {
			array = SPY_civ_access_array
			add_to_array = { ROOT.selected_TAG_SPY_civ_access_array = v }
		}
	}
}

########################################
### MD_countrymissilesview_nukes_gui ###
########################################

# Documentation on how the Nuclear Production System works
# Notable Variables:
# var_enrichment_grade_factor: This is used to control how many civilian industry is required per enrichment level
# var_enrichment_nuclear_energy_prod_factor: This is used to determine how much Reactor-grade produced per tick
# var_enrichment_nuclear_material_prod_factor: This is used to determine how much Weapons-grade produced per tick

# Function: set_nuke_arrays_selected_TAG
# Purpose: This set sa set of variables for display purposes.
set_nuke_arrays_selected_TAG = {
	clear_array = ROOT.selected_TAG_nuclear_status_array
	clear_array = ROOT.selected_TAG_nuclear_doctrine_array
	var:nukes_selected_TAG = {
		for_each_loop = {
			array = THIS.nuclear_status_array
			add_to_array = { ROOT.selected_TAG_nuclear_status_array = v }
		}
		for_each_loop = {
			array = THIS.nuclear_doctrine_array
			add_to_array = { ROOT.selected_TAG_nuclear_doctrine_array = v }
		}
		set_variable = { ROOT.var_selected_TAG_LEU_selected = var_LEU_selected }
		set_variable = { ROOT.var_selected_TAG_HEU_selected = var_HEU_selected }
	}
}

# Function: set_enrichment_efficiency_LEU
# Purpose: Sets the initial variables for calculating the effienecy rates for LEU
set_enrichment_efficiency_LEU = {
	set_variable = { var_enrichment_grade_factor = 1 }
	set_variable = { var_enrichment_nuclear_energy_prod_factor = 200 } # CHANGE ME IF YOU WANT ME TO BE MORE PRODUCTIVE, weekly production value
	set_variable = { var_enrichment_nuclear_material_prod_factor = 0 }

	set_temp_variable = { modify_leu = 1 }
	add_to_temp_variable = { modify_leu = modifier@leu_fuel_production_modifier }

	multiply_variable = { var_enrichment_nuclear_energy_prod_factor = modify_leu }
	round_variable = var_enrichment_nuclear_energy_prod_factor
}

# Function: set_enrichment_efficiency_HEU
# Purpose: Sets the initial variables for calculating the effienecy rates for HEU
set_enrichment_efficiency_HEU = {
	set_variable = { var_enrichment_grade_factor = 1 }
	set_variable = { var_enrichment_nuclear_energy_prod_factor = 0 }
	set_variable = { var_enrichment_nuclear_material_prod_factor = 100 } # CHANGE ME IF YOU WANT ME TO BE MORE PRODUCTIVE, weekly production value

	set_temp_variable = { modify_heu = 1 }
	add_to_temp_variable = { modify_heu = modifier@heu_fuel_production_modifier }

	multiply_variable = { var_enrichment_nuclear_material_prod_factor = modify_heu }
	round_variable = var_enrichment_nuclear_material_prod_factor
}

# Function: update_enrichment_efficiency
# Purpose: This updates the enrichment efficiency for the production of the nuclear production
update_enrichment_efficiency = {
	if = {
		limit = {
			check_variable = { var_LEU_selected = 2 }
			check_variable = { enrichment_facilities < var_CIC_use_enrichment }
		}
		set_variable = { var_CIC_use_enrichment = enrichment_facilities }
	}

	set_variable = { var_enrichment_efficiency = var_CIC_use_enrichment }
	set_temp_variable = { temp1 = var_enrichment_grade_factor }
	multiply_temp_variable = { temp1 = enrichment_facilities }
	divide_variable = { var_enrichment_efficiency = temp1 }
	force_update_dynamic_modifier = yes
}

# Function: update_nuclear_production
# Purpose: This calculates the actual production of the resources
update_nuclear_production = { # TODO: Calculate how to increase production and CIC requirement for enrichment facilities at scale
	set_temp_variable = { temp1 = var_enrichment_nuclear_energy_prod_factor }
	multiply_temp_variable = { temp1 = enrichment_facilities }
	set_variable = { var_nuke_nuclear_reactor_prod = temp1 }

	set_temp_variable = { temp2 = var_enrichment_nuclear_material_prod_factor }
	multiply_temp_variable = { temp2 = enrichment_facilities }
	set_variable = { var_nuke_nuclear_material_prod = temp2 }

	set_variable = { var_enrichment_efficiency = 1.0 }
	missile_ui_update = yes
}

# Function: nuclear_reactor_fuel_consumption
# Purpose: This subtracts reactor grade material from the stockpile based on number of reactors
nuclear_reactor_fuel_consumption = {
	subtract_from_variable = { var_reactor_material_stockpile = nuclear_fuel_consumption } #consumption calculated in energy effects
	clamp_variable = { var = var_reactor_material_stockpile min = 0 }
}

# Function: setup_starting_reactor_stockpile
# Purpose: Setups the current nuclear reactor and enrichment facilities setup
setup_starting_reactor_stockpile = {
	set_variable = { nuclear_reactors = 0 }
	every_controlled_state = {
		add_to_variable = { PREV.nuclear_reactors = building_level@nuclear_reactor }
	}
	set_temp_variable = { starting_reactor_grade_stockpile = nuclear_reactors }
	multiply_temp_variable = { starting_reactor_grade_stockpile = 2500 }
	set_variable = { var_reactor_material_stockpile = starting_reactor_grade_stockpile }

	# Init the LEU production for all enrichment facilities
	if = { limit = { check_variable = { enrichment_facilities > 0 } }
		if = {
			limit = {
				check_variable = { var_LEU_selected = 2 }
			}
			set_variable = { var_LEU_selected = 1 }
		}
		else = {
			set_variable = { var_LEU_selected = 2 }
			set_variable = { var_HEU_selected = 1 }
		}
		set_enrichment_efficiency_LEU = yes
		update_nuclear_production = yes
		var:nukes_selected_TAG = { set_variable = { var_selected_TAG_LEU_selected = THIS.var_LEU_selected } }
		update_nuclear_production = yes
	}
}

check_enrichment = {
	if = {
		limit = {
			check_variable = { var_HEU_selected = 2 }
			NOT = {
				can_enrich_HEU = yes
			}
		}		set_variable = { var_HEU_selected = 1 }
		set_variable = { var_enrichment_efficiency = 0 }
		set_variable = {  var_enrichment_grade_factor = 0 }
		set_variable = { var_enrichment_grade_factor = 0 }
		set_variable = { var_enrichment_nuclear_energy_prod_factor = 0 }
		set_variable = { var_enrichment_nuclear_material_prod_factor = 0 }
	}
	else_if = {
		limit = {
			check_variable = { var_LEU_selected = 2 }
			NOT = {
				can_enrich_LEU = yes
			}
		}
		set_variable = { var_LEU_selected = 1 }
		set_variable = { var_HEU_selected = 1 }
		set_variable = { var_enrichment_efficiency = 0 }
		set_variable = {  var_enrichment_grade_factor = 0 }
		set_variable = { var_enrichment_grade_factor = 0 }
		set_variable = { var_enrichment_nuclear_energy_prod_factor = 0 }
		set_variable = { var_enrichment_nuclear_material_prod_factor = 0 }
	}
}

update_nuclear_deterrence = {
	set_variable = { var_nuclear_deterrence = 0 }
	set_variable = { var_nuclear_status_nuclear_deterrence = 0 }
	set_variable = { var_nuclear_doctrine_nuclear_deterrence = 0 }
	set_variable = { var_nuclear_reactor_nuclear_deterrence = 0 }
	set_variable = { var_nuclear_material_nuclear_deterrence = 0 }
	set_variable = { var_nuclear_warhead_nuclear_deterrence = 0 }
	for_each_loop = {
		array = global.nuclear_status_nuclear_deterrence_array
		if = {
			limit = {
				is_in_array = {
					array = nuclear_status_array
					value = i
				}
			}
			add_to_variable = { var_nuclear_status_nuclear_deterrence = global.nuclear_status_nuclear_deterrence_array^i }
		}
	}
	for_each_loop = {
		array = global.nuclear_doctrine_nuclear_deterrence_array
		if = {
			limit = {
				is_in_array = {
					array = nuclear_doctrine_array
					value = i
				}
			}
			add_to_variable = { var_nuclear_doctrine_nuclear_deterrence = global.nuclear_doctrine_nuclear_deterrence_array^i }
		}
	}
	every_controlled_state = {
		add_to_variable = { PREV.var_nuclear_reactor_nuclear_deterrence = non_damaged_building_level@nuclear_reactor }
	}
	multiply_variable = { var_nuclear_reactor_nuclear_deterrence = 10 }
	set_variable = { var_nuclear_material_nuclear_deterrence = var_nuclear_material_nuclear_deterrence_factor }
	multiply_variable = { var_nuclear_material_nuclear_deterrence = var_nuclear_material_stockpile }
	for_each_loop = {
		array = global.nuclear_warhead_nuclear_deterrence_array
		set_temp_variable = { temp1 = nuclear_warhead_inventory_array^i }
		multiply_temp_variable = { temp1 = global.nuclear_warhead_nuclear_deterrence_array^i }
		add_to_variable = { var_nuclear_warhead_nuclear_deterrence = temp1 }
	}
	# for balancing max 1000 per open end category
	if = {
		limit = {
			check_variable = {
				var_nuclear_reactor_nuclear_deterrence > 1000
			}
		}
		set_variable = { var_nuclear_reactor_nuclear_deterrence = 1000 }
	}
	if = {
		limit = {
			check_variable = {
				var_nuclear_material_nuclear_deterrence > 1000
			}
		}
		set_variable = { var_nuclear_material_nuclear_deterrence = 1000 }
	}
	if = {
		limit = {
			check_variable = {
				var_nuclear_warhead_nuclear_deterrence > 1000
			}
		}
		set_variable = { var_nuclear_warhead_nuclear_deterrence = 1000 }
	}
	#
	add_to_variable = { var_nuclear_deterrence = var_nuclear_status_nuclear_deterrence }
	add_to_variable = { var_nuclear_deterrence = var_nuclear_doctrine_nuclear_deterrence }
	add_to_variable = { var_nuclear_deterrence = var_nuclear_reactor_nuclear_deterrence }
	add_to_variable = { var_nuclear_deterrence = var_nuclear_material_nuclear_deterrence }
	add_to_variable = { var_nuclear_deterrence = var_nuclear_warhead_nuclear_deterrence }
	set_variable = { var_nuclear_deterrence_PP_factor = 0.01 }
	multiply_variable = { var_nuclear_deterrence_PP_factor = var_nuclear_deterrence }
	if = {
		limit = {
			is_in_array = {
				array = nuclear_status_array
				value = 6
			}
		}
		add_to_variable = { var_nuclear_deterrence_PP_factor = 0.50 }
	}
	if = {
		limit = {
			is_in_array = {
				array = nuclear_status_array
				value = 7
			}
		}
		add_to_variable = { var_nuclear_deterrence_PP_factor = 0.75 }
	}
	# no stability malus
	#set_temp_variable = { temp1 = var_nuclear_deterrence }
	#multiply_temp_variable = { temp1 = 0.005 }
	#add_to_variable = { var_nuclear_stability_factor = temp1 }
	#
	### balancing switching to political_power_factor in %
	#
	multiply_variable = { var_nuclear_deterrence_PP_factor = 0.01 }
}

update_nuclear_stability_factor = {
	if = { limit = { is_in_array = { array = nuclear_status_array value = 5 } }
		set_variable = { var_nuclear_stability_factor = 0.05 }
	}
	else = {
		clear_variable = var_nuclear_stability_factor
	}
}

set_nuclear_status_special_effect = {
	if = {
		limit = {
			OR = {
				check_variable = { nuclear_status_display_array^i = 3 }
				check_variable = { nuclear_status_display_array^i = 4 }
				check_variable = { nuclear_status_display_array^i = 6 }
				check_variable = { nuclear_status_display_array^i = 7 }
			}
		}
		if = { limit = { NOT = { has_dynamic_modifier = { modifier = nuclear_state_modifier } } }
			add_dynamic_modifier = { modifier = nuclear_state_modifier }
		}
	}
	else_if = { limit = { check_variable = { nuclear_status_display_array^i = 9 } }
		set_variable = { var_nuclear_status_aircraft_cost_factor = 0.25 }
		set_variable = { var_nuclear_status_ship_cost_factor = 0.25 }
	}
	else_if = { limit = { check_variable = { nuclear_status_display_array^i = 10 } }
		set_variable = { var_nuclear_status_aircraft_cost_factor = 0.3 }
	}
	else_if = { limit = { check_variable = { nuclear_status_display_array^i = 12 } }
		set_variable = { var_nuclear_status_ship_cost_factor = 0.3 }
	}
	if = { limit = { has_NPOWER_OR_SPOWER = yes }
		set_variable = { var = var_nuclear_deterrence_foreign_influence_defense value = 0.05 }
	}
}

remove_nuclear_status_special_effect = {
	if = { limit = { check_variable = { nuclear_status_array^i = 9 } }
		set_variable = { var_nuclear_status_aircraft_cost_factor = 0 }
		set_variable = { var_nuclear_status_ship_cost_factor = 0 }
	}
	else_if = { limit = { check_variable = { nuclear_status_array^i = 10 } }
		set_variable = { var_nuclear_status_aircraft_cost_factor = 0 }
	}
	else_if = { limit = { check_variable = { nuclear_status_array^i = 12 } }
		set_variable = { var_nuclear_status_ship_cost_factor = 0 }
	}
}

####################
### redeploy gui ###
####################

on_weekly_redeploy = {
	# SAM
	add_to_variable = { var_SAM_ready = var_SAM_redeploy_week2 }
	set_variable = { var_SAM_redeploy_week2 = var_SAM_redeploy_week1 }
	set_variable = { var_SAM_redeploy_week1 = var_SAM_redeploy }
	set_variable = { var_SAM_redeploy = 0 }
	# TEL
	add_to_variable = { var_TEL_ready = var_TEL_redeploy_week2 }
	set_variable = { var_TEL_redeploy_week2 = var_TEL_redeploy_week1 }
	set_variable = { var_TEL_redeploy_week1 = var_TEL_redeploy }
	set_variable = { var_TEL_redeploy = 0 }
}

#######################
#######################
### for missiles AI ###
#######################
#######################


# set_trajectory_PREV_to_THIS = {
# }

set_AI_missiles_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_AI_missiles_on_alert"
	set_eligible_alert_targets = yes
	prioritize_alert_targets = yes
	check_nuclear_warheads_for_alert_targets = yes
	set_temp_sea_launch_point_array = yes
	set_GLCM_on_alert = yes
	set_ALCM_on_alert = yes
	set_SLCM_on_alert = yes
	set_HSCM_on_alert = yes
	set_IRBM_on_alert = yes
	set_ICBM_on_alert = yes
	set_SLBM_on_alert = yes
	set_missile_launch_arrays_selected_TAG = yes
	clear_launch_button_loc_vars = yes
}

set_eligible_alert_targets = {
	log = "[GetDateText]: [Root.GetName]: set_eligible_alert_targets"
	for_each_scope_loop = {
		array = enemies
		every_controlled_state = {
			limit = {
				NOT = {
					is_core_of = ROOT
				}
			}
			set_temp_variable = { temp_target_value = 0 }

			set_temp_variable = { temp0 = building_level@industrial_complex }
			multiply_temp_variable = { temp0 = 2 }
			add_to_temp_variable = { temp_target_value = temp0 }

			set_temp_variable = { temp1 = building_level@arms_factory }
			multiply_temp_variable = { temp1 = 2 }
			add_to_temp_variable = { temp_target_value = temp1 }

			set_temp_variable = { temp2 = building_level@infrastructure }
			multiply_temp_variable = { temp2 = 1 }
			add_to_temp_variable = { temp_target_value = temp2 }

			set_temp_variable = { temp3 = building_level@internet_station }
			multiply_temp_variable = { temp3 = 1 }
			add_to_temp_variable = { temp_target_value = temp3 }

			set_temp_variable = { temp4 = building_level@dockyard }
			multiply_temp_variable = { temp4 = 2 }
			add_to_temp_variable = { temp_target_value = temp4 }

			set_temp_variable = { temp5 = building_level@air_base }
			multiply_temp_variable = { temp5 = 2 }
			add_to_temp_variable = { temp_target_value = temp5 }

			set_temp_variable = { temp6 = building_level@radar_station }
			multiply_temp_variable = { temp6 = 2 }
			add_to_temp_variable = { temp_target_value = temp6 }

			set_temp_variable = { temp7 = building_level@anti_air_building }
			multiply_temp_variable = { temp7 = 2 }
			add_to_temp_variable = { temp_target_value = temp7 }

			set_temp_variable = { temp8 = building_level@missile_defense_station }
			multiply_temp_variable = { temp8 = 2 }
			add_to_temp_variable = { temp_target_value = temp8 }

			set_temp_variable = { temp9 = building_level@TEL_base }
			multiply_temp_variable = { temp9 = 3 }
			add_to_temp_variable = { temp_target_value = temp9 }

			set_temp_variable = { temp10 = building_level@missile_silo }
			multiply_temp_variable = { temp10 = 3 }
			add_to_temp_variable = { temp_target_value = temp10 }

			set_temp_variable = { temp11 = building_level@nuclear_reactor }
			multiply_temp_variable = { temp11 = 2 }
			add_to_temp_variable = { temp_target_value = temp11 }

			set_temp_variable = { temp12 = building_level@synthetic_refinery }
			multiply_temp_variable = { temp12 = 1 }
			add_to_temp_variable = { temp_target_value = temp12 }

			set_temp_variable = { temp13 = building_level@fuel_silo }
			multiply_temp_variable = { temp13 = 1 }
			add_to_temp_variable = { temp_target_value = temp13 }

			set_temp_variable = { temp14 = building_level@offices }
			multiply_temp_variable = { temp14 = 1 }
			add_to_temp_variable = { temp_target_value = temp14 }

			set_temp_variable = { temp15 = building_level@naval_base }
			multiply_temp_variable = { temp15 = 2 }
			add_to_temp_variable = { temp_target_value = temp15 }

			set_temp_variable = { temp16 = building_level@bunker }
			multiply_temp_variable = { temp16 = 1 }
			add_to_temp_variable = { temp_target_value = temp16 }

			set_temp_variable = { temp17 = building_level@coastal_bunker }
			multiply_temp_variable = { temp17 = 1 }
			add_to_temp_variable = { temp_target_value = temp17 }

			set_temp_variable = { temp18 = building_level@supply_node }
			multiply_temp_variable = { temp18 = 1 }
			add_to_temp_variable = { temp_target_value = temp18 }

			set_temp_variable = { temp19 = building_level@rail_way }
			multiply_temp_variable = { temp19 = 1 }
			add_to_temp_variable = { temp_target_value = temp19 }

			add_to_array = { ROOT.eligible_alert_targets_value_array = temp_target_value }
			add_to_array = { ROOT.eligible_alert_targets_state_array = THIS.id }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_alert_targets_value_array^num [?ROOT.eligible_alert_targets_value_array^num]"
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_alert_targets_state_array^num [?ROOT.eligible_alert_targets_state_array^num]"
}


prioritize_alert_targets = {
	log = "[GetDateText]: [Root.GetName]: prioritize_alert_targets"
	#resize_array = { ROOT.prioritize_alert_targets_array = ROOT.eligible_alert_targets_state_array^num }
	#resize_array = { ROOT.prioritize_alert_targets_value_array = ROOT.eligible_alert_targets_value_array^num }
	while_loop_effect = {
		limit = {
			check_variable = {
				ROOT.eligible_alert_targets_state_array^num > 0
			}
		}
		find_highest_in_array = {
			array = ROOT.eligible_alert_targets_value_array
			value = target_value
			index = idx
		}
		add_to_array = { ROOT.prioritize_alert_targets_array = ROOT.eligible_alert_targets_state_array^idx }
		add_to_array = { ROOT.prioritize_alert_targets_value_array = ROOT.eligible_alert_targets_value_array^idx }

		ROOT = { set_prioritize_alert_targets_defenses = yes }

		#add_to_array = { ROOT.prioritize_alert_targets_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.prioritize_alert_targets_midcourse_defense_array = temp_midcourse_defense_value }
		add_to_array = { ROOT.prioritize_alert_targets_terminal_defense_array = temp_terminal_defense_value }

		#set_variable = { ROOT.prioritize_alert_targets_array^idx = ROOT.eligible_alert_targets_state_array^idx }
		#set_variable = { ROOT.prioritize_alert_targets_value_array^idx = ROOT.eligible_alert_targets_value_array^idx }
		log = "ROOT.prioritize_alert_targets_array^num [?ROOT.prioritize_alert_targets_array^num]"
		log = "ROOT.eligible_alert_targets_state_array^num [?ROOT.eligible_alert_targets_state_array^num]"
		# set_temp_variable = { temp_val = ROOT.eligible_alert_targets_value_array^num }
		# set_temp_variable = { temp_state = ROOT.eligible_alert_targets_state_array^num }
		# subtract_from_variable = { temp_val = 1 }
		# subtract_from_variable = { temp_state = 1 }
		remove_from_array = {
			array = ROOT.eligible_alert_targets_value_array
			#value = target_value
			index = idx
		}
		remove_from_array = {
			array = ROOT.eligible_alert_targets_state_array
			#value = ROOT.eligible_alert_targets_state_array^idx
			index = idx
		}
		# resize_array = { ROOT.eligible_alert_targets_value_array = temp_val }
		# resize_array = { ROOT.eligible_alert_targets_state_array = temp_state }
		log = "after resize ROOT.eligible_alert_targets_state_array^num [?ROOT.eligible_alert_targets_state_array^num]"
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.prioritize_alert_targets_array^num [?ROOT.prioritize_alert_targets_array^num]"
}

### limit potential sea launch points
set_temp_sea_launch_point_array = {
	for_each_loop = {
		array = enemies
		index = e
		var:enemies^e = {
			for_each_loop = {
				array = controlled_states
				index = c
				var:controlled_states^c = {
					if = {
						limit = {
							is_in_array = {
								array = global.sea_launch_point_array
								value = THIS.id
							}
						}
						add_to_temp_array = { temp_sea_launch_point_array = THIS.id }
					}
				}
			}
		}
	}
	for_each_loop = {
		array = controlled_states
		index = r
		var:controlled_states^r = {
			if = {
				limit = {
					is_in_array = {
						array = global.sea_launch_point_array
						value = THIS.id
					}
				}
				add_to_temp_array = { temp_sea_launch_point_array = THIS.id }
			}
		}
	}
	log = "[GetDateText]: [Root.GetName]: temp_sea_launch_point_array^num [?temp_sea_launch_point_array^num]"
}

set_GLCM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_GLCM_eligible_launch_points"
	every_controlled_state = {
		limit = {
			TEL_base > 0
		}
		add_to_array = { ROOT.eligible_launch_point_state_array = THIS.id }
		ROOT = {
			set_temp_variable = { temp_max_launchers = PREV.non_damaged_building_level@TEL_base }
			multiply_temp_variable = { temp_max_launchers = var_TEL_launcher }
		}
		add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers }

		ROOT = { set_eligible_launch_points_defenses = yes }

		add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
		#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

set_ALCM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_ALCM_eligible_launch_points"
	every_controlled_state = {
		limit = {
			MD_missiles_AI_on_alert_ALCM_trigger = yes
		}
		add_to_array = { ROOT.eligible_launch_point_state_array = THIS.id }
		ROOT = {
			set_temp_variable = { temp_max_launchers_bomber = num_deployed_planes_with_type@large_plane_airframe }
			multiply_temp_variable = { temp_max_launchers_bomber = var_bomber_launcher }

			set_temp_variable = { temp_max_launchers_STK = num_deployed_planes_with_type@small_plane_strike_airframe }
			multiply_temp_variable = { temp_max_launchers_STK = var_STK_launcher }

			set_temp_variable = { temp_max_launchers_MR = num_deployed_planes_with_type@medium_plane_airframe }
			multiply_temp_variable = { temp_max_launchers_MR = var_MR_launcher }

			set_temp_variable = { temp_max_launchers_MR_CV = num_deployed_planes_with_type@cv_medium_plane_airframe }
			multiply_temp_variable = { temp_max_launchers_MR_CV = var_MR_CV_launcher }
		}
		if = {
			limit = {
				check_variable = { temp_max_launchers_bomber > temp_max_launchers_STK }
				check_variable = { temp_max_launchers_bomber > temp_max_launchers_MR }
				check_variable = { temp_max_launchers_bomber > temp_max_launchers_MR_CV }
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_bomber }
		}
		else_if = {
			limit = {
				check_variable = { temp_max_launchers_STK > temp_max_launchers_bomber }
				check_variable = { temp_max_launchers_STK > temp_max_launchers_MR }
				check_variable = { temp_max_launchers_STK > temp_max_launchers_MR_CV }
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_STK }
		}
		else_if = {
			limit = {
				check_variable = { temp_max_launchers_MR > temp_max_launchers_STK }
				check_variable = { temp_max_launchers_MR > temp_max_launchers_bomber }
				check_variable = { temp_max_launchers_MR > temp_max_launchers_MR_CV }
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_MR }
		}
		else = {
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_MR_CV }
		}

		ROOT = { set_eligible_launch_points_defenses = yes }

		add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
		#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

#launch points need to be limited to number of ship in area???
set_SLCM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_SLCM_eligible_launch_points"
	ROOT = {
		set_variable = { var_sub_number_LAM = 1 }
		set_variable = { var_attack_sub_number_LAM = 1 }
		set_variable = { var_ship_number_LAM = 1 }
	}

	# cruise missile subs
	set_temp_variable = { temp_num_attack_sub = num_ships_with_type@attack_submarine }
	add_to_temp_variable = { temp_num_attack_sub = num_ships_with_type@missile_submarine }

	# missile ships
	set_temp_variable = { temp_num_ship = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@heavy_frigate }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_num_ship = num_ships_with_type@stealth_destroyer }
	}

	#set_temp_sea_launch_point_array = yes
	for_each_loop = {
		#array = global.sea_launch_point_array
		array = temp_sea_launch_point_array
		break = break_num_SLCM
		if = {
			limit = {
				MD_missiles_AI_on_alert_SLCM_trigger = yes
			}
			#add_to_array = { ROOT.eligible_launch_point_state_array = global.sea_launch_point_array^i }
			add_to_array = { ROOT.eligible_launch_point_state_array = temp_sea_launch_point_array^i }
			subtract_from_temp_variable = { temp_num_attack_sub = 1 }
			subtract_from_temp_variable = { temp_num_ship = 1 }
			ROOT = {
				### for the start keep it simple and check only for one ship
				if = {
					limit = {
						check_variable = { var_ship_VLS_launcher > var_ship_launcher }
						check_variable = { var_ship_VLS_launcher > var_sub_launcher }
						check_variable = { var_ship_VLS_launcher > var_SLBM_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_ship_VLS_launcher }
				}
				else_if = {
					limit = {
						check_variable = { var_sub_launcher > var_ship_launcher }
						check_variable = { var_sub_launcher > var_ship_VLS_launcher }
						check_variable = { var_sub_launcher > var_SLBM_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_sub_launcher }
				}
				else_if = {
					limit = {
						check_variable = { var_SLBM_launcher > var_ship_launcher }
						check_variable = { var_SLBM_launcher > var_sub_launcher }
						check_variable = { var_SLBM_launcher > var_ship_VLS_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_SLBM_launcher }
				}
				else = {
					set_temp_variable = { temp_max_launchers = var_ship_launcher }
				}
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers }

			ROOT = { set_eligible_launch_points_defenses = yes }

			add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
			add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
			#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
		}
		if = {
			limit = {
				check_variable = { temp_num_attack_sub < 1 }
				check_variable = { temp_num_ship < 1 }
			}
			set_temp_variable = { break_num_SLCM = 1 }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}


#launch points need to be limited to number of ship in area???
set_HSCM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_HSCM_eligible_launch_points"
	ROOT = {
		set_variable = { var_sub_number_LAM = 1 }
		set_variable = { var_attack_sub_number_LAM = 1 }
		set_variable = { var_ship_number_LAM = 1 }
	}
	# cruise missile subs
	set_temp_variable = { temp_num_attack_sub = num_ships_with_type@attack_submarine }
	add_to_temp_variable = { temp_num_attack_sub = num_ships_with_type@missile_submarine }

	# missile ships
	set_temp_variable = { temp_num_ship = num_ships_with_type@cruiser }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@destroyer }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@frigate }
	add_to_temp_variable = { temp_num_ship = num_ships_with_type@heavy_frigate }
	if = { limit = { has_dlc = "Man the Guns" }
		add_to_temp_variable = { temp_num_ship = num_ships_with_type@stealth_destroyer }
	}

	for_each_loop = {
		#array = global.sea_launch_point_array
		array = temp_sea_launch_point_array
		break = break_num_HSCM
		if = {
			limit = {
				MD_missiles_AI_on_alert_sea_launch_HSCM_trigger = yes
			}
			#add_to_array = { ROOT.eligible_launch_point_state_array = global.sea_launch_point_array^i }
			add_to_array = { ROOT.eligible_launch_point_state_array = temp_sea_launch_point_array^i }
			subtract_from_temp_variable = { temp_num_attack_sub = 1 }
			subtract_from_temp_variable = { temp_num_ship = 1 }
			ROOT = {
				### for the start keep it simple and check only for one ship
				if = {
					limit = {
						check_variable = { var_ship_VLS_launcher > var_ship_launcher }
						check_variable = { var_ship_VLS_launcher > var_sub_launcher }
						check_variable = { var_ship_VLS_launcher > var_SLBM_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_ship_VLS_launcher }
				}
				else_if = {
					limit = {
						check_variable = { var_sub_launcher > var_ship_launcher }
						check_variable = { var_sub_launcher > var_ship_VLS_launcher }
						check_variable = { var_sub_launcher > var_SLBM_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_sub_launcher }
				}
				else_if = {
					limit = {
						check_variable = { var_SLBM_launcher > var_ship_launcher }
						check_variable = { var_SLBM_launcher > var_sub_launcher }
						check_variable = { var_SLBM_launcher > var_ship_VLS_launcher }
					}
					set_temp_variable = { temp_max_launchers = var_SLBM_launcher }
				}
				else = {
					set_temp_variable = { temp_max_launchers = var_ship_launcher }
				}
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers }

			ROOT = { set_eligible_launch_points_defenses = yes }

			add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
			add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
			#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
		}
		if = {
			limit = {
				check_variable = { temp_num_attack_sub < 1 }
				check_variable = { temp_num_ship < 1 }
			}
			set_temp_variable = { break_num_HSCM = 1 }
		}
	}
	every_controlled_state = {
		limit = {
			OR = {
				TEL_base > 0
				MD_missiles_AI_on_alert_air_launch_HSCM_trigger = yes
				#MD_missiles_AI_on_alert_sea_launch_HSCM_trigger = yes
			}
		}
		add_to_array = { ROOT.eligible_launch_point_state_array = THIS.id }
		ROOT = {
			set_temp_variable = { temp_max_launchers = PREV.non_damaged_building_level@TEL_base }
			multiply_temp_variable = { temp_max_launchers = var_TEL_launcher }
		}
		add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers }

		ROOT = { set_eligible_launch_points_defenses = yes }

		add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
		#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

set_IRBM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_IRBM_eligible_launch_points"
	every_controlled_state = {
		limit = {
			OR = {
				TEL_base > 0
				missile_silo > 0
			}
		}
		add_to_array = { ROOT.eligible_launch_point_state_array = THIS.id }
		ROOT = {
			set_temp_variable = { temp_max_launchers_TEL = PREV.non_damaged_building_level@TEL_base }
			multiply_temp_variable = { temp_max_launchers_TEL = var_TEL_launcher }

			set_temp_variable = { temp_max_launchers_silo = PREV.non_damaged_building_level@missile_silo }
			multiply_temp_variable = { temp_max_launchers_silo = var_silo_launcher }
		}
		if = {
			limit = {
				check_variable = { temp_max_launchers_TEL > temp_max_launchers_silo }
			}
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_TEL }
		}
		else = {
			add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_silo }
		}

		ROOT = { set_eligible_launch_points_defenses = yes }

		add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
		#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

set_ICBM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_ICBM_eligible_launch_points"
	every_controlled_state = {
		limit = {
			missile_silo > 0
		}
		add_to_array = { ROOT.eligible_launch_point_state_array = THIS.id }
		ROOT = {
			set_temp_variable = { temp_max_launchers_silo = PREV.non_damaged_building_level@missile_silo }
			multiply_temp_variable = { temp_max_launchers_silo = var_silo_launcher }
		}
		add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_silo }

		ROOT = { set_eligible_launch_points_defenses = yes }

		add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
		add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
		#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

#launch points need to be limited to number of ship in area???
set_SLBM_eligible_launch_points = {
	log = "[GetDateText]: [Root.GetName]: set_SLBM_eligible_launch_points"
	### for the start keep it simple and check only for one ship
	ROOT = { set_variable = { var_sub_number_LAM = 1 } }
	set_temp_variable = { temp_num_sub = num_ships_with_type@missile_submarine }
	#set_temp_sea_launch_point_array = yes
	for_each_loop = {
		#array = global.sea_launch_point_array
		array = temp_sea_launch_point_array
		break = break_num_sub
			log = "[GetDateText]: [Root.GetName]: global.sea_launch_point_array^i.GetName [?global.sea_launch_point_array^i.GetName]"
			log = "[GetDateText]: [Root.GetName]: global.sea_launch_point_array^i.GetID [?global.sea_launch_point_array^i.GetID]"
			log = "[GetDateText]: [Root.GetName]: global.sea_launch_point_array^i [?global.sea_launch_point_array^i]"
			if = {
				limit = {
					MD_missiles_AI_on_alert_SLBM_trigger = yes
				}
				log = "[GetDateText]: [Root.GetName]: MD_missiles_AI_on_alert_SLBM_trigger = yes"
				#add_to_array = { ROOT.eligible_launch_point_state_array = global.sea_launch_point_array^i }
				add_to_array = { ROOT.eligible_launch_point_state_array = temp_sea_launch_point_array^i }
				subtract_from_temp_variable = { temp_num_sub = 1 }
				ROOT = {
					set_temp_variable = { temp_max_launchers_SLBM = var_SLBM_launcher }
				}
				add_to_array = { ROOT.eligible_launch_point_max_salvo_array = temp_max_launchers_SLBM }

				ROOT = { set_eligible_launch_points_defenses = yes }

				add_to_array = { ROOT.eligible_launch_point_boost_defense_array = temp_boost_defense_value }
				add_to_array = { ROOT.eligible_launch_point_midcourse_defense_array = temp_midcourse_defense_value }
				#add_to_array = { ROOT.eligible_launch_point_terminal_defense_array = temp_terminal_defense_value }
			}
			if = {
				limit = {
					check_variable = { temp_num_sub < 1 }
				}
				set_temp_variable = { break_num_sub = 1 }
			}
		#}
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.eligible_launch_point_state_array^num [?ROOT.eligible_launch_point_state_array^num]"
}

set_eligible_launch_points_defenses = {
	meta_effect = {
		text = {
			set_temp_variable = { temp_intercept_capacity_terminal_land = 0 }
			set_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }
			set_temp_variable = { temp_intercept_capacity_midcourse_land = 0 }
			set_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
			#set_temp_variable = { temp_intercept_capacity_terminal_land = 0 }
			#set_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }

			### set intercept capacity
			### boost phase defense ###
			if = {
				limit = {
					has_country_flag = boost_phase_defense
				}
				every_controlled_state = {
					limit = {
						anti_air_building > 0
						[launch_point_ID] = {
							distance_to = {
								value < [SAM_range]
								target = PREV
							}
						}
					}
					set_temp_variable = { temp1 = 0 }
					add_to_temp_variable = { temp1 = non_damaged_building_level@anti_air_building }
					multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }

					add_to_temp_variable = { temp_intercept_capacity_boost_land = temp1 }
					log = "[GetDateText]: [ROOT.GetName]: ### boost phase defense ### in meta"
					log = "[THIS.GetName]"
					log = "var_SAM_range [?var_SAM_range]"
					log = "ROOT.var_intercept_capacity_boost_land [?ROOT.var_intercept_capacity_boost_land]"
				}
			}
			### midcourse phase defense ###
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					[launch_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}
				}
				set_temp_variable = { temp1 = 0 }
				add_to_temp_variable = { temp1 = non_damaged_building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }

				add_to_temp_variable = { temp_intercept_capacity_midcourse_land = temp1 }
				set_state_flag = defend_land_launch_point
			}

			### seabased_missile_defense
			if = {
				limit = {
					[launch_point_ID] = {
					has_state_flag = sea_launch_point
					}
			}
			set_variable = { var_ship_number_AA = 9 }
			while_loop_effect = {
				break = temp3
				limit = {
					check_variable = { var_ship_number_AA > 1 }
				}
				if = {
					limit = {
						THIS = { sea_launch_point_defense_[launch_point_ID] = yes }
					}
					set_temp_variable = { temp1 = 0 }
					set_temp_variable = { temp2 = 0 }
					### boost ###
					add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
					add_to_temp_variable = { temp1 = 1 }
					multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
					add_to_temp_variable = { temp_intercept_capacity_boost_sea = temp1 }
					### midcourse ###
					add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
					add_to_temp_variable = { temp2 = 1 }
					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
					add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = temp2 }
					###
					set_temp_variable = { temp3 = 1 }
					log = "set_seabased_missile_defense_cap launch_point [launch_point_ID]"
				}
				else = {
					add_to_temp_variable = { temp_intercept_capacity_boost_sea = 0 }
					add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
					log = "set_seabased_missile_defense_cap launch_point no ships"
				}
				subtract_from_variable = { var_ship_number_AA = 1 }
				log = "set_seabased_missile_defense_cap launch_point var_ship_number_AA [?var_ship_number_AA]"
			}
			}
			else = {
			add_to_temp_variable = { temp_intercept_capacity_boost_sea = 0 }
			add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
			log = "set_seabased_missile_defense_cap launch_point no sea_launch_point"
			}
			### set intercept chance
			### sea
			set_temp_variable = { temp_intercept_chance_boost_sea = var_SAM_intercept_chance_sea }
			set_temp_variable = { temp_intercept_chance_midcourse_sea = var_ABM_intercept_chance_sea }
			#set_temp_variable = { temp_intercept_chance_terminal_sea = var_SAM_intercept_chance_sea }
			### land
			set_temp_variable = { temp_intercept_chance_boost_land = var_SAM_intercept_chance_land }
			set_temp_variable = { temp_intercept_chance_midcourse_land = var_ABM_intercept_chance_land }
			#set_temp_variable = { temp_intercept_chance_terminal_land = var_SAM_intercept_chance_land }

			### set defense value
			multiply_temp_variable = { temp_intercept_capacity_boost_sea = temp_intercept_chance_boost_sea }
			multiply_temp_variable = { temp_intercept_capacity_boost_land = temp_intercept_chance_boost_land }
			multiply_temp_variable = { temp_intercept_capacity_midcourse_sea = temp_intercept_chance_midcourse_sea }
			multiply_temp_variable = { temp_intercept_capacity_midcourse_land = temp_intercept_chance_midcourse_land }
			#multiply_temp_variable = { temp_intercept_capacity_terminal_sea = temp_intercept_chance_terminal_sea }
			#multiply_temp_variable = { temp_intercept_capacity_terminal_land = temp_intercept_chance_terminal_land }

			set_temp_variable = { temp_boost_defense_value = temp_intercept_capacity_boost_sea }
			add_to_temp_variable = { temp_boost_defense_value = temp_intercept_capacity_boost_land }
			set_temp_variable = { temp_midcourse_defense_value = temp_intercept_capacity_midcourse_sea }
			add_to_temp_variable = { temp_midcourse_defense_value = temp_intercept_capacity_midcourse_land }
			#set_temp_variable = { temp_terminal_defense_value = temp_intercept_capacity_terminal_sea }
			#add_to_temp_variable = { temp_terminal_defense_value = temp_intercept_capacity_terminal_land }
		}
		launch_point_ID = "[?ROOT.missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		#target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
	}
}

clear_eligible_launch_points = {
	clear_array = ROOT.eligible_launch_point_state_array
	clear_array = ROOT.eligible_launch_point_max_salvo_array
	clear_array = ROOT.eligible_launch_point_boost_defense_array
	clear_array = ROOT.eligible_launch_point_midcourse_defense_array
}

set_prioritize_alert_targets_defenses = {
	meta_effect = {
		text = {
			#set_temp_variable = { temp_intercept_capacity_terminal_land = 0 }
			#set_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }
			set_temp_variable = { temp_intercept_capacity_midcourse_land = 0 }
			set_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
			set_temp_variable = { temp_intercept_capacity_terminal_land = 0 }
			set_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }

			### set intercept capacity
			### midcourse phase defense ###

			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					NOT = {
						has_state_flag = defend_land_launch_point
					}
					[target_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}
				}
				set_temp_variable = { temp1 = 0 }
				add_to_temp_variable = { temp1 = non_damaged_building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }

				add_to_temp_variable = { temp_intercept_capacity_midcourse_land = temp1 }
			}
			every_controlled_state = {
				clr_state_flag = defend_land_launch_point
			}
			### terminal phase defense ###
			if = {
				limit = {
					has_country_flag = terminal_phase_defense
				}
				every_controlled_state = {
					limit = {
						anti_air_building > 0
						[target_point_ID] = {
							distance_to = {
								value < [SAM_range]
								target = PREV
							}
						}
					}
					set_temp_variable = { temp1 = 0 }
					add_to_temp_variable = { temp1 = non_damaged_building_level@anti_air_building }
					multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }

					add_to_temp_variable = { temp_intercept_capacity_terminal_land = temp1 }
				}
			}

			### seabased_missile_defense
			if = {
				limit = {
					[target_point_ID] = {
						has_state_flag = sea_launch_point
					}
				}
				set_variable = { var_ship_number_AA = 9 }
				while_loop_effect = {
					break = temp3
					limit = {
						check_variable = { var_ship_number_AA > 1 }
					}
					if = {
						limit = {
							THIS = { sea_launch_point_defense_[target_point_ID] = yes }
						}
						set_temp_variable = { temp1 = 0 }
						set_temp_variable = { temp2 = 0 }
						### midcourse ###
						add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp2 = 1 }
	 					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
						add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = temp2 }
						### terminal ###
						add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp1 = 1 }
						multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
						add_to_temp_variable = { temp_intercept_capacity_terminal_sea = temp1 }
						###
						set_temp_variable = { temp3 = 1 }
						log = "set_seabased_missile_defense_cap target_point"
					}
					else = {
						add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
						add_to_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }
						log = "set_seabased_missile_defense_cap target_point no ships"
					}
					subtract_from_variable = { var_ship_number_AA = 1 }
					log = "set_seabased_missile_defense_cap target_point var_ship_number_AA [?var_ship_number_AA]"
				}
			}
			else = {
				add_to_temp_variable = { temp_intercept_capacity_midcourse_sea = 0 }
				add_to_temp_variable = { temp_intercept_capacity_terminal_sea = 0 }
				log = "set_seabased_missile_defense_cap target_point no sea_launch_point"
			}
			clear_variable = var_ship_number_AA

			### set intercept chance
			### sea
			#set_temp_variable = { temp_intercept_chance_boost_sea = var_SAM_intercept_chance_sea }
			set_temp_variable = { temp_intercept_chance_midcourse_sea = var_ABM_intercept_chance_sea }
			set_temp_variable = { temp_intercept_chance_terminal_sea = var_SAM_intercept_chance_sea }
			### land
			#set_temp_variable = { temp_intercept_chance_boost_land = var_SAM_intercept_chance_land }
			set_temp_variable = { temp_intercept_chance_midcourse_land = var_ABM_intercept_chance_land }
			set_temp_variable = { temp_intercept_chance_terminal_land = var_SAM_intercept_chance_land }

			### set defense value
			#multiply_temp_variable = { temp_intercept_capacity_boost_sea = temp_intercept_chance_boost_sea }
			#multiply_temp_variable = { temp_intercept_capacity_boost_land = temp_intercept_chance_boost_land }
			multiply_temp_variable = { temp_intercept_capacity_midcourse_sea = temp_intercept_chance_midcourse_sea }
			multiply_temp_variable = { temp_intercept_capacity_midcourse_land = temp_intercept_chance_midcourse_land }
			multiply_temp_variable = { temp_intercept_capacity_terminal_sea = temp_intercept_chance_terminal_sea }
			multiply_temp_variable = { temp_intercept_capacity_terminal_land = temp_intercept_chance_terminal_land }

			#set_temp_variable = { temp_boost_defense_value = temp_intercept_capacity_boost_sea }
			#add_to_temp_variable = { temp_boost_defense_value = temp_intercept_capacity_boost_land }
			set_temp_variable = { temp_midcourse_defense_value = temp_intercept_capacity_midcourse_sea }
			add_to_temp_variable = { temp_midcourse_defense_value = temp_intercept_capacity_midcourse_land }
			set_temp_variable = { temp_terminal_defense_value = temp_intercept_capacity_terminal_sea }
			add_to_temp_variable = { temp_terminal_defense_value = temp_intercept_capacity_terminal_land }
		}
		#launch_point_ID = "[?ROOT.missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?ROOT.missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
	}
}

check_nuclear_warheads_for_alert_targets = {
	log = "[GetDateText]: [Root.GetName]: check_nuclear_warheads_for_alert_targets"
	set_temp_variable = { temp_total_nukes = 0 }
	for_each_loop = {
		array = ROOT.nuclear_warhead_inventory_array
		add_to_temp_variable = { temp_total_nukes = ROOT.nuclear_warhead_inventory_array^i }
	}
	for_each_loop = {
		array = ROOT.eligible_launch_point_max_salvo_array
		add_to_temp_variable = { temp_max_salvo = ROOT.eligible_launch_point_max_salvo_array^i }
	}
	if = {
		limit = {
			check_variable = {
				temp_total_nukes < temp_max_salvo
			}
		}
		#resize_array = { ROOT.prioritize_alert_targets_array = temp_total_nukes }
		# NO = 1 # YES = 2
		set_variable = { ROOT.var_enough_nukes = 1 }
	}
	else = {
		# NO = 1 # YES = 2
		set_variable = { ROOT.var_enough_nukes = 2 }
	}
}

set_GLCM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_GLCM_on_alert"
	set_temp_variable = { i2 = -1 }
	### moved to first place (so first loop v2 i2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 51
		end = 59
		value = v2
		add_to_temp_variable = { i2 = 1 }
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
				has_GNSS_mil_system_for_CM_AI_on_alert = yes
			}
			set_GLCM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_ALCM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_ALCM_on_alert"
	set_temp_variable = { i2 = -1 }
	### moved to first place (so first loop v2 i2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 41
		end = 49
		value = v2
		add_to_temp_variable = { i2 = 1 }
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
				has_GNSS_mil_system_for_CM_AI_on_alert = yes
			}
			set_ALCM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_SLCM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_SLCM_on_alert"
	set_temp_variable = { i2 = -1 }
	### moved to first place (so first loop v2 i2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 61
		end = 69
		value = v2
		add_to_temp_variable = { i2 = 1 }
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
				has_GNSS_mil_system_for_CM_AI_on_alert = yes
			}
			log = "v2 [?v2] ROOT.missile_inventory_array^v2 [?ROOT.missile_inventory_array^v2]"
			set_SLCM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_HSCM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_HSCM_on_alert"
	set_temp_variable = { i2 = -1 }
	### moved to first place (so first loop v2 i2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 71
		end = 73
		value = v2
		add_to_temp_variable = { i2 = 1 }
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
				has_GNSS_mil_system_for_CM_AI_on_alert = yes
			}
			set_HSCM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_IRBM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_IRBM_on_alert"
	### moved to first place (so first loop v2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 21
		end = 29
		value = v2
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
			}
			set_IRBM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_ICBM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_ICBM_on_alert"
	### moved to first place (so first loop v2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 11
		end = 19
		value = v2
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
			}
			set_ICBM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

set_SLBM_on_alert = {
	log = "[GetDateText]: [Root.GetName]: set_SLBM_on_alert"
	### moved to first place (so first loop v2, second loop v1 i1, third loop v3 i3)
	for_loop_effect = {
		start = 31
		end = 39
		value = v2
		if = {
			limit = {
				check_variable = { ROOT.missile_inventory_array^v2 > 0 }
			}
			set_SLBM_eligible_launch_points = yes
			set_AI_target_and_launch_points = yes
		}
	}
	clear_eligible_launch_points = yes
}

###############
###############
###############

set_AI_target_and_launch_points = {
	for_each_loop = {
		array = ROOT.prioritize_alert_targets_array
		value = v1
		index = i1
		if = {
			limit = {
				NOT = {
					is_in_array = {
						array = ROOT.missile_target_point_array
						value = v1
					}
				}
			}
			for_each_loop = {
				array = ROOT.eligible_launch_point_state_array
				value = v3
				index = i3
				break = break_eligible_launch_points
				log = "launch_point i3 [?i3] [?ROOT.eligible_launch_point_state_array^i3.GetName]"
				log = "target_point i1 [?i1] [?ROOT.prioritize_alert_targets_array^i1.GetName]"
				if = {
					limit = {
						meta_trigger = {
							text = {
								NOT = {
									is_in_array = {
										array = ROOT.missile_launch_point_array
										value = v3
									}
								}
								[launch_point_ID] = {
									distance_to = {
										value < [range]
										target = [target_point_ID]
									}
								}
							}
							launch_point_ID = "[?ROOT.eligible_launch_point_state_array^i3.GetID]"
							target_point_ID = "[?ROOT.prioritize_alert_targets_array^i1.GetID]"
							range = "[?global.missile_range_array^v2]"
							debug = yes
						}
					}

					var:ROOT.eligible_launch_point_state_array^i3 = {
						log = "[THIS.GetName]"
						ROOT = {
							### launch point
							add_to_array = {
								array = missile_launch_point_array
								value = PREV.id
							}
							add_to_variable = {
								var_missile_trajectory_ID = 1
							}
							### target point
							add_to_array = {
								array = missile_target_point_array
								value = ROOT.prioritize_alert_targets_array^i1
								index = var_missile_trajectory_ID
							}
							### target point controller
							var:ROOT.prioritize_alert_targets_array^i1 = {
								controller = {
									add_to_array = {
										array = ROOT.missile_target_controller_array
										value = THIS.id
										index = ROOT.var_missile_trajectory_ID
									}
								}
							}
						}
					}
					set_variable = { ROOT.var_AI_missile_type = v2 }
					log = "ROOT.var_AI_missile_type [?ROOT.var_AI_missile_type] v2 [?v2]"
					###
					set_variable = { ROOT.var_AI_salvo = 0 }
					set_variable = { ROOT.var_AI_nuclear_warhead = 0 }
					set_variable = { ROOT.var_AI_decoy = 0 }
					set_variable = { ROOT.var_AI_MIRV = 0 }
					set_variable = { ROOT.var_AI_conventional_warhead = 0 } ### we have nukes here, but just to pervent errors
					set_variable = { ROOT.var_AI_nuke = 2 } # 2 = nuke
					set_variable = { ROOT.var_AI_duration = 1 }
					set_variable = { ROOT.var_AI_strike_type = 4 } # 4 = strategic
					set_alert_trajectory_arrays = yes

					### check defenses
					set_temp_variable = { temp_defense = 0 }
					add_to_temp_variable = { temp_defense = ROOT.eligible_launch_point_boost_defense_array^i3 }
					add_to_temp_variable = { temp_defense = ROOT.prioritize_alert_targets_boost_defense_array^i1 }
					if = {
						limit = {
							OR = {
								#ICBM
								AND = {
									check_variable = { ROOT.var_AI_missile_type > 10 }
									check_variable = { ROOT.var_AI_missile_type < 20 }
								}
								#IRBM
								AND = {
									check_variable = { ROOT.var_AI_missile_type > 20 }
									check_variable = { ROOT.var_AI_missile_type < 30 }
								}
								#SLBM
								AND = {
									check_variable = { ROOT.var_AI_missile_type > 30 }
									check_variable = { ROOT.var_AI_missile_type < 40 }
								}
							}
						}
						add_to_temp_variable = { temp_defense = ROOT.eligible_launch_point_midcourse_defense_array^i3 }
						add_to_temp_variable = { temp_defense = ROOT.prioritize_alert_targets_midcourse_defense_array^i1 }
					}
					add_to_temp_variable = { temp_defense = ROOT.eligible_launch_point_terminal_defense_array^i3 }
					add_to_temp_variable = { temp_defense = ROOT.prioritize_alert_targets_terminal_defense_array^i1 }

					#set salvo
					if = {
						limit = {
							OR = {
								check_variable = { ROOT.missile_inventory_array^v2 > ROOT.eligible_launch_point_max_salvo_array^i3 }
								check_variable = { ROOT.missile_inventory_array^v2 = ROOT.eligible_launch_point_max_salvo_array^i3 }
							}
						}
						set_variable = { ROOT.var_AI_salvo = ROOT.eligible_launch_point_max_salvo_array^i3 }
						# limit to defenses
						if = {
							limit = {
								OR = {
									check_variable = { ROOT.var_AI_salvo > temp_defense }
									check_variable = { ROOT.var_AI_salvo = temp_defense }
								}
							}
							set_variable = { ROOT.var_AI_salvo = temp_defense }
							add_to_variable = { ROOT.var_AI_salvo = 1 }
							# check target value
							if = {
								limit = {
									check_variable = { ROOT.prioritize_alert_targets_value_array^i1 > ROOT.var_AI_salvo }
									OR = {
										check_variable = { ROOT.missile_inventory_array^v2 > ROOT.prioritize_alert_targets_value_array^i1 }
										check_variable = { ROOT.missile_inventory_array^v2 = ROOT.prioritize_alert_targets_value_array^i1 }
									}
								}
								set_variable = { ROOT.var_AI_salvo = ROOT.prioritize_alert_targets_value_array^i1 }
							}
						}
						else = {
							# limit to target value
							if = {
								limit = {
									check_variable = { ROOT.var_AI_salvo > ROOT.prioritize_alert_targets_value_array^i1 }
								}
								set_variable = { ROOT.var_AI_salvo = ROOT.prioritize_alert_targets_value_array^i1 }
							}
						}
					}
					else = {
						set_variable = { ROOT.var_AI_salvo = ROOT.missile_inventory_array^v2 }
						# limit to defenses
						if = {
							limit = {
								OR = {
									check_variable = { ROOT.var_AI_salvo > temp_defense }
									check_variable = { ROOT.var_AI_salvo = temp_defense }
								}
							}
							set_variable = { ROOT.var_AI_salvo = temp_defense }
							add_to_variable = { ROOT.var_AI_salvo = 1 }
							# check target value
							if = {
								limit = {
									check_variable = { ROOT.prioritize_alert_targets_value_array^i1 > ROOT.var_AI_salvo }
									OR = {
										check_variable = { ROOT.missile_inventory_array^v2 > ROOT.prioritize_alert_targets_value_array^i1 }
										check_variable = { ROOT.missile_inventory_array^v2 = ROOT.prioritize_alert_targets_value_array^i1 }
									}
								}
								set_variable = { ROOT.var_AI_salvo = ROOT.prioritize_alert_targets_value_array^i1 }
							}
						}
						else = {
							# limit to target value
							if = {
								limit = {
									check_variable = { ROOT.var_AI_salvo > ROOT.prioritize_alert_targets_value_array^i1 }
								}
								set_variable = { ROOT.var_AI_salvo = ROOT.prioritize_alert_targets_value_array^i1 }
							}
						}
					}

					### set warhead
					for_loop_effect = {
						start = 0
						end = 13
						break = break_warhead
						value = v4
						set_temp_variable = { temp_WH = 12 }
						subtract_from_temp_variable = { temp_WH = v4 }
						if = {
							limit = {
								OR = {
									check_variable = { ROOT.nuclear_warhead_inventory_array^temp_WH > ROOT.var_AI_salvo }
									check_variable = { ROOT.nuclear_warhead_inventory_array^temp_WH = ROOT.var_AI_salvo }
								}
							}
							set_variable = { ROOT.var_AI_nuclear_warhead = temp_WH }
							### MIRV / decoy ### not relevant GLCM
							set_variable = { ROOT.var_AI_decoy = 0 }
							set_variable = { ROOT.var_AI_MIRV = 1 }
							set_temp_variable = { break_warhead = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { ROOT.var_AI_MIRV < 1 }
						}
						for_loop_effect = {
							start = 0
							end = 13
							break = break2_warhead
							value = v5
							set_temp_variable = { temp2_WH = 12 }
							subtract_from_temp_variable = { temp2_WH = v5 }
							if = {
								limit = {
									OR = {
										check_variable = { ROOT.nuclear_warhead_inventory_array^temp2_WH > 1 }
										check_variable = { ROOT.nuclear_warhead_inventory_array^temp2_WH = 1 }
									}
								}
								set_variable = { ROOT.var_AI_nuclear_warhead = temp2_WH }
								### MIRV / decoy ### not relevant GLCM
								set_variable = { ROOT.var_AI_decoy = 0 }
								set_variable = { ROOT.var_AI_MIRV = 1 }
								set_variable = { ROOT.var_AI_salvo = ROOT.nuclear_warhead_inventory_array^temp2_WH }
								set_temp_variable = { break2_warhead = 1 }
							}
						}
					}
					set_alert_trajectory_arrays_vars = yes

					set_temp_variable = { break_eligible_launch_points = 1 }
				}
				### else do nothing
			}
		}
		### else do nothing
	}
}


###############
###############
###############






set_alert_trajectory_arrays_vars = {
	set_variable = { ROOT.missile_nuclear_warhead_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_nuclear_warhead }
	set_variable = { ROOT.missile_MIRV_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_MIRV }
	set_variable = { ROOT.missile_decoy_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_decoy }
	set_variable = { ROOT.missile_salvo_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_salvo }
	set_variable = { ROOT.missile_duration_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_duration }
	set_variable = { ROOT.missile_strike_type_array^ROOT.var_missile_trajectory_ID = ROOT.var_AI_strike_type }
	set_variable = { ROOT.missile_alert_array^ROOT.var_missile_trajectory_ID = 2 }
}



set_alert_trajectory_arrays = {
	log = "[GetDateText]: [Root.GetName]: set_alert_trajectory_arrays"
	add_to_array = {
		array = ROOT.missile_type_array
		value = ROOT.var_AI_missile_type
		index = ROOT.var_missile_trajectory_ID
	}
	log = "[GetDateText]: [Root.GetName]: ROOT.var_AI_missile_type [ROOT.var_AI_missile_type?]"
	log = "[GetDateText]: [Root.GetName]: ROOT.var_missile_trajectory_ID [ROOT.var_missile_trajectory_ID?]"
	add_to_array = {
		array = ROOT.missile_conventional_warhead_array
		value = ROOT.var_AI_conventional_warhead
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_nuclear_warhead_array
		value = ROOT.var_AI_nuclear_warhead
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_nuke_array
		value = ROOT.var_AI_nuke
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_MIRV_array
		value = ROOT.var_AI_MIRV
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_decoy_array
		value = ROOT.var_AI_decoy
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_salvo_array
		value = ROOT.var_AI_salvo
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_duration_array
		value = ROOT.var_AI_duration
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		array = ROOT.missile_strike_type_array
		value = ROOT.var_AI_strike_type
		index = ROOT.var_missile_trajectory_ID
	}
	add_to_array = {
		#### 1 = fire; 2 = alert
		array = ROOT.missile_alert_array
		value = 2
		index = ROOT.var_missile_trajectory_ID
	}
	log = "[GetDateText]: [Root.GetName]: missile_type_array^num [?missile_type_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_conventional_warhead_array^num [?missile_conventional_warhead_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_nuclear_warhead_array^num [?missile_nuclear_warhead_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_nuke_array^num [?missile_nuke_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_MIRV_array^num [?missile_MIRV_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_decoy_array^num [?missile_decoy_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_salvo_array^num [?missile_salvo_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_duration_array^num [?missile_duration_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_strike_type_array^num [?missile_strike_type_array^num]"
	log = "[GetDateText]: [Root.GetName]: missile_alert_array^num [?missile_alert_array^num]"
}


###########################
### for on daily effect ###
###########################

### to do: change warhead arrays

# new name
# if change here, change fire_on_alert as well
missile_on_weekly = {
	### for launch gui entry ###
	clear_launch_trigger_num_gui_arrays = yes
	#
	for_each_loop = {
		array = missile_target_point_array
		### needs to be tested
		#set_missile_model = yes

		set_launch_trigger_num = yes

		if = {
			limit = {
				### war check or ROOT
				var:ROOT.missile_target_controller_array^i = {
					#OR = {
					#	original_tag = ROOT # no nuclear tests on alert / don't nuke occupied states
						has_war_with = ROOT
					#}
				}
				check_variable = { missile_duration_array^i > 0 }
				#### 1 = fire; 2 = alert
				check_variable = { missile_alert_array^i = 1 }
				### check missiles and warhead inventory
				set_temp_variable = { temp_check_missile_type = missile_type_array^i }
				OR = {
					check_variable = { missile_inventory_array^temp_check_missile_type > missile_salvo_array^i }
					check_variable = { missile_inventory_array^temp_check_missile_type = missile_salvo_array^i }
				}

				if = {
					limit = {
						check_variable = { missile_nuke_array^i = 2 }
					}
					set_temp_variable = { temp_check_warhead_num = missile_salvo_array^i }
					multiply_temp_variable = { temp_check_warhead_num = missile_MIRV_array^i }
					set_temp_variable = { temp_check_warhead_type = missile_nuclear_warhead_array^i }
					OR = {
						check_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type > temp_check_warhead_num }
						check_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type = temp_check_warhead_num }
					}
				}

				#check_variable = { missile_alert_array^i = 1 }

				check_launch_point = yes

			}

			log = "[GetDateText]: [Root.GetName]: missile_on_daily: Missile Target: [?missile_target_point_array^i.GetName] ID = [?missile_target_point_array^i.GetID]"
			set_variable = { var_salvo = missile_salvo_array^i }

			var:ROOT.missile_target_controller_array^i = {
				### sea
				set_variable = { ROOT.var_intercept_capacity_boost_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_sea = 0 }
				### land
				set_variable = { ROOT.var_intercept_capacity_boost_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_land = 0 }

				set_seabased_missile_defense_cap = yes
				set_landbased_missile_defense_cap = yes

				### sea
				set_variable = { ROOT.var_intercept_chance_boost_sea = var_SAM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_midcourse_sea = var_ABM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_terminal_sea = var_SAM_intercept_chance_sea }
				### land
				set_variable = { ROOT.var_intercept_chance_boost_land = var_SAM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_midcourse_land = var_ABM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_terminal_land = var_SAM_intercept_chance_land }
			}

			### moved upwards in the effect, reactivated
			set_missile_model = yes ### add modify intercept chance

			#does it work ???
			#set_mod_intercept_chance = yes

			set_temp_variable = { temp_missile_type = missile_type_array^i }
			subtract_from_variable = { missile_inventory_array^temp_missile_type = var_salvo }

			set_variable = { var_MIRV = missile_MIRV_array^i }
			set_variable = { var_decoy = missile_decoy_array^i }

			### subtract warheads
			if = {
				limit = {
					check_variable = { missile_nuke_array^i = 2 }
				}
				set_temp_variable = { temp_check_warhead_num = var_salvo }
				multiply_temp_variable = { temp_check_warhead_num = var_MIRV }
				set_temp_variable = { temp_check_warhead_type = missile_nuclear_warhead_array^i }
				subtract_from_variable = { nuclear_warhead_inventory_array^temp_check_warhead_type = temp_check_warhead_num }
			}

			subtract_from_variable = { missile_duration_array^i = 1 }

			var:ROOT.missile_target_controller_array^i = {
				ROOT = {
					### boost phase vs defense ###
					boost_phase_defense_sea = yes
					boost_phase_defense_land = yes
					### midcourse phase vs defense ###
					if = {
						limit = {
							OR = {
								#ICBM
								AND = {
									check_variable = { missile_type_array^i > 10 }
									check_variable = { missile_type_array^i < 20 }
								}
								#IRBM
								AND = {
									check_variable = { missile_type_array^i > 20 }
									check_variable = { missile_type_array^i < 30 }
								}
								#SLBM
								AND = {
									check_variable = { missile_type_array^i > 30 }
									check_variable = { missile_type_array^i < 40 }
								}
							}
						}
						midcourse_phase_defense_sea = yes
						midcourse_phase_defense_land = yes
					}
					else = {
						midcourse_bypass = yes
					}
					### terminal phase vs defense ###
					terminal_phase_defense_sea = yes
					terminal_phase_defense_land = yes
				}
			}
			add_to_array = { array = SAM_consumption_sea_array value = SAM_consumption_sea index = i }
			add_to_array = { array = SAM_consumption_land_array value = SAM_consumption_land index = i }
			add_to_array = { array = ABM_consumption_sea_array value = ABM_consumption_sea index = i }
			add_to_array = { array = ABM_consumption_land_array value = ABM_consumption_land index = i }

			clear_variable = SAM_consumption_sea
			clear_variable = SAM_consumption_land
			clear_variable = ABM_consumption_sea
			clear_variable = ABM_consumption_land
			clear_defense_vars = yes

			set_missile_warhead_effects = yes

		}
		else = {
			add_to_array = { array = missile_boost_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_boost_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_boost_completed_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_boost_land_stat_array value = 0 index = i }

			add_to_array = { array = missile_midcourse_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_midcourse_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_midcourse_completed_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_midcourse_land_stat_array value = 0 index = i }

			add_to_array = { array = missile_terminal_completed_sea_stat_array value = 0 index = i }
			add_to_array = { array = missile_interception_terminal_sea_stat_array value = 0 index = i }

			add_to_array = { array = missile_interception_terminal_land_stat_array value = 0 index = i }
			add_to_array = { array = missile_target_miss_stat_array value = 0 index = i }
			add_to_array = { array = missile_target_hit_stat_array value = 0 index = i }

			add_to_array = { array = SAM_consumption_sea_array value = 0 index = i }
			add_to_array = { array = SAM_consumption_land_array value = 0 index = i }
			add_to_array = { array = ABM_consumption_sea_array value = 0 index = i }
			add_to_array = { array = ABM_consumption_land_array value = 0 index = i }

			set_missile_damage_stats = yes ### should be zero for all
		}
		### for launch gui entry ###
		set_launch_trigger_num_gui = yes
	}
}

# Utilities

# Function: modify_missile_inventory_count
# Purpose: Allows you to modify the current amount of a missile's inventory
# Parameters: missile_index (temp_var), missile_type, missile_count
# 1;ICBM 2;IRBM 3;SLBM 4;ALCM 5;GLCM 6;SLCM 7;HSCM 8;SAM 9;ABM
# 10;OLV 11;GNSS 12;COMSAT 13;SPYSAT 14;KILLSAT 15;Rods from God
modify_missile_inventory_count = {
	custom_effect_tooltip = modify_missile_inventory_count_tt
	add_to_variable = { missile_inventory_array^missile_index = missile_count }
}

modify_nuclear_warhead_inventory_count = {
	custom_effect_tooltip = modify_nuclear_warhead_inventory_count_tt
	add_to_variable = { nuclear_warhead_inventory_array^nuclear_warhead_index = nuclear_warhead_count }
}
